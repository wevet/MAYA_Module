# -*- coding: utf-8 -*-

import os
import maya.cmds as cmds
import maya.mel as mel
import sys, uuid
from shiboken2 import wrapInstance
from PySide2 import QtGui
from PySide2 import QtCore
from PySide2 import QtUiTools
from PySide2 import QtWidgets
from PySide2 import QtNetwork
import hashlib
from threading import Timer
from PySide2.QtCore import QUrl
from PySide2.QtWidgets import QApplication, QMainWindow
from PySide2.QtNetwork import QNetworkAccessManager, QNetworkRequest
import maya.OpenMayaUI as omui
import importlib

class UndoContext(object):

    def __enter__(self):
        cmds.undoInfo(openChunk=True)

    def __exit__(self, *exc_info):
        cmds.undoInfo(closeChunk=True)


def maya_main_window():
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)

# constant
FACIAL_MESH_GROUP_NAME = 'Facial_Mesh_grp'
HEAD_MASTER_JOINT_NAME = 'Head_master_jnt'
JAW_MASTER_JOINT_NAME = 'Jaw_master_jnt'
SKIN_HEAD_MASTER_JOINT_NAME = 'Skin_Head_master_jnt'
SKIN_JAW_MASTER_JOINT_NAME = 'Skin_Jaw_master_jnt'

class Facial_Window_Manager(QtWidgets.QDialog):

    @classmethod
    def main(cls):
        global g_ver
        global Facial_Window_Manager_UI
        try:
            Facial_Window_Manager_UI.close()
            Facial_Window_Manager_UI.deleteLater()
        except:
            g_ver = 1
        Facial_Window_Manager_UI = Facial_Window_Manager()

    def disableMsg(self):
        self.ui.label_3.setText('')
        self.msgTime.cancel()

    def __init__(self, parent=maya_main_window()):
        #global macAddr
        self.g_pass = True
        super(Facial_Window_Manager, self).__init__(parent)
        self.current_dir = os.path.dirname(__file__)
        self.create_instance()

    def init_ui(self):
        f = QtCore.QFile(self.current_dir + '/ui/Face_Check.ui')
        f.open(QtCore.QFile.ReadOnly)
        loader = QtUiTools.QUiLoader()
        self.ui = loader.load(f, parentWidget=self)
        f.close()

    def create_connections(self):
        self.ui.okBtn.clicked.connect(self.activate)

    def activate(self):
        self.ui.okBtn.hide()
        pass

    def create_instance(self):
        Facial_Auto_Rig_Window.main()
        self.close()
        self.deleteLater()


class Facial_Auto_Rig_Window(QtWidgets.QMainWindow):

    @classmethod
    def main(cls):
        global Facial_ui
        try:
            Facial_ui.close()
            Facial_ui.deleteLater()
        except:
            pass

        Facial_ui = Facial_Auto_Rig_Window()
        Facial_ui.show()

    def __init__(self, parent=maya_main_window()):
        super(Facial_Auto_Rig_Window, self).__init__(parent)
        self.current_dir = os.path.dirname(__file__)
        mel.eval('channelBoxCommand -break;')
        self.setWindowTitle('FaceRig SetUp v1.0')
        cmds.loadPlugin('matrixNodes.mll')
        self.color_property = 'QCheckBox:enabled{ color:rgb(0, 170, 255); }QCheckBox:disabled{ color:rgb(160, 160, 160); }'
        self.styles = 'Plastique'
        self.init_ui()
        self.create_layout()
        self.create_connections()
        self.lock_parts()
        self.scrollArea = ''
        self.jntRadius = 1.0
        self.ctrl_scale = 0.0
        self.non_symmetry_check = False
        self.rig_check = False
        self.create_joint_check = False
        self.RebuildCheck = 0
        self.TopolDefine_window = 'TopolDefine_window'
        self.addNeck = 0
        self.Neck_pathTemp = ''
        self.head_joint = ''
        self.Skin_Lip_vetex_Check = 0
        self.Skin_Lip_vetex_UnLock = 0
        self.Skin_Jaw_vetex_Check = 0
        self.Skin_Jaw_vetex_UnLock = 0
        self.Skin_Eye_vetex_Check = 0
        self.Skin_Eye_vetex_UnLock = 0
        self.Skin_Cheek_vetex_Check = 0
        self.Skin_Cheek_vetex_UnLock = 0
        self.Skin_Nose_vetex_Check = 0
        self.Skin_Nose_vetex_UnLock = 0
        self.Skin_Brow_vetex_Check = 0
        self.Skin_Brow_vetex_UnLock = 0
        self.Skin_Upper_teeth_vetex_Check = 0
        self.Skin_Lower_teeth_vetex_Check = 0
        self.Skin_Tongue_vetex_Check = 0
        self.Skin_EyeBall_L_vetex_Check = 0
        self.Skin_EyeBall_R_vetex_Check = 0
        self.LipUpVetex = ''
        self.LipDownVetex = ''
        self.LipCorner_L_Vetex = ''
        self.LipCorner_lower_L_Vetex = ''
        self.LipCorner_R_Vetex = ''
        self.LipCorner_lower_R_Vetex = ''
        self.LipUpper_Vetex = ''
        self.LipLower_Vetex = ''
        self.Lip_L_UpperSide_Vetex = ''
        self.Lip_L_LowerSide_Vetex = ''
        self.Lip_L_UpperSide_02_Vetex = ''
        self.Lip_L_LowerSide_02_Vetex = ''
        self.Lip_R_UpperSide_Vetex = ''
        self.Lip_R_LowerSide_Vetex = ''
        self.Lip_R_UpperSide_02_Vetex = ''
        self.Lip_R_LowerSide_02_Vetex = ''
        self.LipLower_Outer_Vetex = ''
        self.Lip_L_UpperOuter_Vetex = ''
        self.Lip_R_UpperOuter_Vetex = ''
        self.Lip_L_LowerOuter_Vetex = ''
        self.Lip_R_LowerOuter_Vetex = ''
        self.HeadMesh = ''
        self.L_EyeballMesh = ''
        self.R_EyeballMesh = ''
        self.UpperTeethMesh = ''
        self.LowerTeethMesh = ''
        self.TongueMesh = ''
        self.JawVetex = ''
        self.Lip_Jaw_Vetex = ''
        if cmds.selectPref(q=True, trackSelectionOrder=True) is False:
            cmds.selectPref(trackSelectionOrder=True)
        self.EyeLVetex = ''
        self.EyeRVetex = ''
        self.Eye_L_blink_Vetex = ''
        self.Eye_R_blink_Vetex = ''
        self.Eye_L_lower_Vetex = ''
        self.Eye_R_lower_Vetex = ''
        self.Eye_L_lacrimal_Vetex = ''
        self.Eye_L_lacrimal_upper_Vetex = ''
        self.Eye_L_lacrimal_lower_Vetex = ''
        self.Eye_L_back_Vetex = ''
        self.Eye_L_back_upper_Vetex = ''
        self.Eye_L_back_lower_Vetex = ''
        self.Eye_L_double_Vetex = ''
        self.Eye_R_lacrimal_Vetex = ''
        self.Eye_R_lacrimal_upper_Vetex = ''
        self.Eye_R_lacrimal_lower_Vetex = ''
        self.Eye_R_back_Vetex = ''
        self.Eye_R_back_upper_Vetex = ''
        self.Eye_R_back_lower_Vetex = ''
        self.Eye_R_double_Vetex = ''
        self.Temp = ''
        self.Eye_C_Grow_vertex = ''
        self.CheekLVetex = ''
        self.CheekRVetex = ''
        self.Cheek_L_Vetex = ''
        self.Cheek_L_upper_Vetex = ''
        self.Cheek_L_outer_orbicularis_Vetex = ''
        self.Cheek_L_inner_orbicularis_Vetex = ''
        self.Cheek_L_lower_Vetex = ''
        self.Cheek_L_lip_lid_Vetex = ''
        self.Cheek_R_Vetex = ''
        self.Cheek_R_upper_Vetex = ''
        self.Cheek_R_outer_orbicularis_Vetex = ''
        self.Cheek_R_inner_orbicularis_Vetex = ''
        self.Cheek_R_lower_Vetex = ''
        self.Cheek_R_lip_lid_Vetex = ''
        self.NoseVetex = ''
        self.Nose_L_Vetex = ''
        self.Nose_L_nasalis_transverse_Vetex = ''
        self.Nose_L_procerus_Vetex = ''
        self.Nose_L_nasolabial_fold_Vetex = ''
        self.Nose_R_Vetex = ''
        self.Nose_R_nasalis_transverse_Vetex = ''
        self.Nose_R_procerus_Vetex = ''
        self.Nose_R_nasolabial_fold_Vetex = ''
        self.Nose_Center_Vetex = ''
        self.Nose_Lower_Vetex = ''
        self.Nose_depressor_septi_Vetex = ''
        self.BrowLVetex = ''
        self.BrowRVetex = ''
        self.Brow_L_Vetex = ''
        self.Brow_R_Vetex = ''
        self.Brow_L_02_Vetex = ''
        self.Brow_R_02_Vetex = ''
        self.Brow_L_03_Vetex = ''
        self.Brow_R_03_Vetex = ''
        self.Brow_L_medial_fibers_Vetex = ''
        self.Brow_L_lateral_fibers_Vetex = ''
        self.Brow_L_procerus_Vetex = ''
        self.Brow_R_medial_fibers_Vetex = ''
        self.Brow_R_lateral_fibers_Vetex = ''
        self.Brow_R_procerus_Vetex = ''
        self.Brow_Center_Vetex = ''
        self.Oral_Upper_teeth_Vetex = ''
        self.Oral_Lower_teeth_Vetex = ''
        self.Oral_Tongue_Vetex = ''
        self.Oral_Tongue_02_Vetex = ''
        self.Oral_Tongue_03_Vetex = ''
        self.EyeBall_L_Vetex = ''
        self.EyeBall_R_Vetex = ''
        self.green_color = 'background-color: rgb(0, 170, 255);'
        self.red_color = 'background-color: red'

    def init_ui(self):
        f = QtCore.QFile(self.current_dir + '/ui/Facial_Rig.ui')
        f.open(QtCore.QFile.ReadOnly)
        loader = QtUiTools.QUiLoader()
        self.ui = loader.load(f, parentWidget=None)
        self.setCentralWidget(self.ui)
        f.close()
        return

    def create_layout(self):
        self.ui.layout().setContentsMargins(6, 6, 6, 6)
        reg_ex = QtCore.QRegExp('[0-9-]+')
        text_validator1 = QtGui.QRegExpValidator(reg_ex, self.ui.TimeStart_pathText)
        self.ui.TimeStart_pathText.setValidator(text_validator1)
        text_validator2 = QtGui.QRegExpValidator(reg_ex, self.ui.TimeEnd_pathText)
        self.ui.TimeEnd_pathText.setValidator(text_validator2)
        minTime = str(int(cmds.playbackOptions(q=True, minTime=True)))
        maxTime = str(int(cmds.playbackOptions(q=True, maxTime=True)))
        self.ui.TimeStart_pathText.setText(minTime)
        self.ui.TimeEnd_pathText.setText(maxTime)
        self.ui.Neck_pathText.returnPressed.connect(self.return_neck)
        self.ui.set_min_Btn.clicked.connect(self.set_max_influence_command)
        self.ui.centralwidget.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.FacialSetOptionGrp.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.groupBox.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.LipOption.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.CheekOption.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.NoseOption.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.BrowOption.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.EyeOption.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.AdvancedButtonGrp.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.OralOption.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.BrowTopolLBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.BrowTopolRBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.EyeTopolLBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.EyeTopolRBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.NoseTopolBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.CheekTopolLBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.CheekTopolRBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.LipTopolUpBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.LipTopolDownBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        self.ui.JawTopolBtn.setStyle(QtWidgets.QStyleFactory.create(self.styles))

        self.ui.LipCheckBox.setStyleSheet(self.color_property)
        self.ui.CheekCheckBox.setStyleSheet(self.color_property)
        self.ui.NoseCheckBox.setStyleSheet(self.color_property)
        self.ui.BrowCheckBox.setStyleSheet(self.color_property)
        self.ui.EyeCheckBox.setStyleSheet(self.color_property)
        self.ui.EyeTargetCheckBox.setStyleSheet(self.color_property)
        self.ui.OralCavityCheckBox.setStyleSheet(self.color_property)
        self.ui.BrowTopolCheckBox.setStyleSheet(self.color_property)
        self.ui.EyeTopolCheckBox.setStyleSheet(self.color_property)
        self.ui.NoseTopolCheckBox.setStyleSheet(self.color_property)
        self.ui.CheekTopolCheckBox.setStyleSheet(self.color_property)
        self.ui.LipTopolCheckBox.setStyleSheet(self.color_property)
        self.ui.JawTopolCheckBox.setStyleSheet(self.color_property)
        self.ui.UnrealCheckBox.setVisible(False)

    def return_neck(self):
        self.Neck_pathTemp = self.ui.Neck_pathText.text()

    def create_connections(self):
        self.ui.TopolDefineBtn.clicked.connect(self.topology_define_command)
        self.ui.TopolDefineBtn_02.clicked.connect(self.topology_define_command)
        self.ui.closeBtn.clicked.connect(self.close)
        self.ui.Create_jnt_Btn.clicked.connect(self.create_joint_command)
        self.ui.HeadJointBtn.clicked.connect(self.head_joint_command)
        self.ui.SymBtn.clicked.connect(self.symmetry_command)
        self.ui.Create_Rig_Btn.clicked.connect(self.create_rig_command)
        self.ui.Connect_jnt_Btn.clicked.connect(self.connect_joint_command)
        self.ui.LabelBtn.clicked.connect(self.label_command)
        self.ui.LabelAllBtn.clicked.connect(self.label_all_command)
        self.ui.LipCheckBox.stateChanged.connect(self.lip_checkbox_function)
        self.ui.LipOption.currentTextChanged.connect(self.lip_option_command)
        self.ui.Rebuild_CtrlBtn.clicked.connect(self.rebuild_control_command)
        self.ui.Rebuild_SkinBtn.clicked.connect(self.rebuild_skin_command)
        self.ui.RebuildSymBtn.clicked.connect(self.rebuild_symmetry_command)
        self.ui.PickerBtn.clicked.connect(self.picker_command)

        # save setting start
        self.ui.actionReset_Settings.triggered.connect(self.edit_menu_reset_command)
        self.ui.actionSave_Settings.triggered.connect(self.edit_menu_save_command)
        self.ui.actionLoad_Settings.triggered.connect(self.edit_menu_load_command)
        # save setting end

        self.ui.BrowLockCheckBtn.clicked.connect(self.brow_lock_check_command)
        self.ui.EyeLockCheckBtn.clicked.connect(self.eye_lock_check_command)
        self.ui.NoseLockCheckBtn.clicked.connect(self.nose_lock_check_command)
        self.ui.CheekLockCheckBtn.clicked.connect(self.cheek_lock_check_command)
        self.ui.LipLockCheckBtn.clicked.connect(self.lip_lock_check_command)
        self.ui.JawLockCheckBtn.clicked.connect(self.jaw_lock_check_command)

        # joint location button
        self.ui.JointLocationBtn.clicked.connect(self.joint_location_command)

        self.ui.BrowTopolLBtn.clicked.connect(self.brow_topology_left_command)
        self.ui.BrowTopolRBtn.clicked.connect(self.brow_topology_right_command)
        self.ui.EyeTopolLBtn.clicked.connect(self.eye_topology_left_command)
        self.ui.EyeTopolRBtn.clicked.connect(self.eye_topology_right_command)
        self.ui.NoseTopolBtn.clicked.connect(self.nose_topology_command)
        self.ui.CheekTopolLBtn.clicked.connect(self.cheek_topology_left_command)
        self.ui.CheekTopolRBtn.clicked.connect(self.cheek_topology_right_command)
        self.ui.LipTopolUpBtn.clicked.connect(self.lip_topology_up_command)
        self.ui.LipTopolDownBtn.clicked.connect(self.lip_topology_down_command)
        self.ui.JawTopolBtn.clicked.connect(self.jaw_topology_command)
        self.ui.SkinBuildBtn.clicked.connect(self.skin_build_command)
        self.ui.BrowTopolLBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        BrowTopolLBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.BrowTopolLBtn)
        BrowTopolLBtn_reset_action = QtWidgets.QAction('Reset', self.ui.BrowTopolLBtn)
        self.ui.BrowTopolLBtn.addAction(BrowTopolLBtn_all_action)
        self.ui.BrowTopolLBtn.addAction(BrowTopolLBtn_reset_action)
        BrowTopolLBtn_all_action.triggered.connect(self.BrowL_All_PopupCmd)
        BrowTopolLBtn_reset_action.triggered.connect(self.BrowL_Reset_PopupCmd)
        self.ui.BrowTopolRBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        BrowTopolRBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.BrowTopolRBtn)
        BrowTopolRBtn_reset_action = QtWidgets.QAction('Reset', self.ui.BrowTopolRBtn)
        self.ui.BrowTopolRBtn.addAction(BrowTopolRBtn_all_action)
        self.ui.BrowTopolRBtn.addAction(BrowTopolRBtn_reset_action)
        BrowTopolRBtn_all_action.triggered.connect(self.BrowR_All_PopupCmd)
        BrowTopolRBtn_reset_action.triggered.connect(self.BrowR_Reset_PopupCmd)
        self.ui.EyeTopolLBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        EyeTopolLBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.EyeTopolLBtn)
        EyeTopolLBtn_reset_action = QtWidgets.QAction('Reset', self.ui.EyeTopolLBtn)
        self.ui.EyeTopolLBtn.addAction(EyeTopolLBtn_all_action)
        self.ui.EyeTopolLBtn.addAction(EyeTopolLBtn_reset_action)
        EyeTopolLBtn_all_action.triggered.connect(self.EyeL_All_PopupCmd)
        EyeTopolLBtn_reset_action.triggered.connect(self.EyeL_Reset_PopupCmd)
        self.ui.EyeTopolRBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        EyeTopolRBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.EyeTopolRBtn)
        EyeTopolRBtn_reset_action = QtWidgets.QAction('Reset', self.ui.EyeTopolRBtn)
        self.ui.EyeTopolRBtn.addAction(EyeTopolRBtn_all_action)
        self.ui.EyeTopolRBtn.addAction(EyeTopolRBtn_reset_action)
        EyeTopolRBtn_all_action.triggered.connect(self.EyeR_All_PopupCmd)
        EyeTopolRBtn_reset_action.triggered.connect(self.EyeR_Reset_PopupCmd)
        self.ui.NoseTopolBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        NoseTopolBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.NoseTopolBtn)
        NoseTopolBtn_reset_action = QtWidgets.QAction('Reset', self.ui.NoseTopolBtn)
        self.ui.NoseTopolBtn.addAction(NoseTopolBtn_all_action)
        self.ui.NoseTopolBtn.addAction(NoseTopolBtn_reset_action)
        NoseTopolBtn_all_action.triggered.connect(self.Nose_All_PopupCmd)
        NoseTopolBtn_reset_action.triggered.connect(self.Nose_Reset_PopupCmd)
        self.ui.CheekTopolLBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        CheekTopolLBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.CheekTopolLBtn)
        CheekTopolLBtn_reset_action = QtWidgets.QAction('Reset', self.ui.CheekTopolLBtn)
        self.ui.CheekTopolLBtn.addAction(CheekTopolLBtn_all_action)
        self.ui.CheekTopolLBtn.addAction(CheekTopolLBtn_reset_action)
        CheekTopolLBtn_all_action.triggered.connect(self.CheekL_All_PopupCmd)
        CheekTopolLBtn_reset_action.triggered.connect(self.CheekL_Reset_PopupCmd)
        self.ui.CheekTopolRBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        CheekTopolRBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.CheekTopolRBtn)
        CheekTopolRBtn_reset_action = QtWidgets.QAction('Reset', self.ui.CheekTopolRBtn)
        self.ui.CheekTopolRBtn.addAction(CheekTopolRBtn_all_action)
        self.ui.CheekTopolRBtn.addAction(CheekTopolRBtn_reset_action)
        CheekTopolRBtn_all_action.triggered.connect(self.CheekR_All_PopupCmd)
        CheekTopolRBtn_reset_action.triggered.connect(self.CheekR_Reset_PopupCmd)
        self.ui.LipTopolUpBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipTopolUpBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.LipTopolUpBtn)
        LipTopolUpBtn_reset_action = QtWidgets.QAction('Reset', self.ui.LipTopolUpBtn)
        self.ui.LipTopolUpBtn.addAction(LipTopolUpBtn_all_action)
        self.ui.LipTopolUpBtn.addAction(LipTopolUpBtn_reset_action)
        LipTopolUpBtn_all_action.triggered.connect(self.LipUp_All_PopupCmd)
        LipTopolUpBtn_reset_action.triggered.connect(self.LipUp_Reset_PopupCmd)
        self.ui.LipTopolDownBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipTopolDownBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.LipTopolDownBtn)
        LipTopolDownBtn_reset_action = QtWidgets.QAction('Reset', self.ui.LipTopolDownBtn)
        self.ui.LipTopolDownBtn.addAction(LipTopolDownBtn_all_action)
        self.ui.LipTopolDownBtn.addAction(LipTopolDownBtn_reset_action)
        LipTopolDownBtn_all_action.triggered.connect(self.LipDown_All_PopupCmd)
        LipTopolDownBtn_reset_action.triggered.connect(self.LipDown_Reset_PopupCmd)
        self.ui.JawTopolBtn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        JawTopolBtn_first_action = QtWidgets.QAction('Select the First Vertex', self.ui.JawTopolBtn)
        JawTopolBtn_all_action = QtWidgets.QAction('Select the All Vertex', self.ui.JawTopolBtn)
        JawTopolBtn_reset_action = QtWidgets.QAction('Reset', self.ui.JawTopolBtn)
        self.ui.JawTopolBtn.addAction(JawTopolBtn_first_action)
        self.ui.JawTopolBtn.addAction(JawTopolBtn_all_action)
        self.ui.JawTopolBtn.addAction(JawTopolBtn_reset_action)
        JawTopolBtn_first_action.triggered.connect(self.Jaw_First_PopupCmd)
        JawTopolBtn_all_action.triggered.connect(self.Jaw_All_PopupCmd)
        JawTopolBtn_reset_action.triggered.connect(self.jaw_reset_popup_command)
        self.ui.EyeGrowBtn.clicked.connect(self.eye_grow_command)
        self.ui.EyeResetGrowBtn.clicked.connect(self.eye_reset_grow_command)
        self.ui.AttachNeckBtn.clicked.connect(self.attach_neck_command)
        self.ui.CopyNeckSkinBtn.clicked.connect(self.copy_neck_skin_command)
        self.ui.SetToBindBtn.clicked.connect(self.set_to_bind_command)
        self.ui.ReadyToExportBtn.clicked.connect(self.ready_to_export_command)

    def joint_location_command(self):
        filepath = self.current_dir + '/icon/joint_location_guide.jpg'
        pixmap = QtGui.QPixmap(filepath)
        label = QtWidgets.QLabel()
        self.scrollArea = QtWidgets.QScrollArea()
        label.setPixmap(pixmap)
        self.scrollArea.setWindowTitle('Help on Joint Location')
        self.scrollArea.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowStaysOnTopHint)
        self.scrollArea.setMinimumSize(815, 600)
        self.scrollArea.setWidgetResizable(False)
        self.scrollArea.setWidget(label)
        self.scrollArea.show()

    def do_something(self):
        text = self.ui.Neck_pathText.text()
        print(text)

    def edit_menu_reset_command(self, *args):
        self.Eye_C_Grow_vertex = ''
        print('Grow vertex reset')
        if len(self.BrowLVetex) != 0 and len(self.BrowRVetex) != 0:
            if self.Skin_Brow_vetex_Check == 1:
                self.ui.BrowTopolCheckBox.setChecked(True)
                self.ui.BrowTopolCheckBox.setEnabled(True)
            else:
                self.ui.BrowTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setEnabled(True)
        else:
            self.ui.BrowTopolCheckBox.setChecked(False)
            self.ui.BrowTopolCheckBox.setEnabled(True)

        if len(self.EyeLVetex) != 0 and len(self.EyeRVetex) != 0:
            if self.Skin_Eye_vetex_Check == 1:
                self.ui.EyeTopolCheckBox.setChecked(True)
                self.ui.EyeTopolCheckBox.setEnabled(False)
            else:
                self.ui.EyeTopolCheckBox.setChecked(False)
                self.ui.EyeTopolCheckBox.setEnabled(False)
        else:
            self.ui.EyeTopolCheckBox.setChecked(False)
            self.ui.EyeTopolCheckBox.setEnabled(False)

        if len(self.NoseVetex) != 0:
            if self.Skin_Nose_vetex_Check == 1:
                self.ui.NoseTopolCheckBox.setChecked(True)
                self.ui.NoseTopolCheckBox.setEnabled(False)
            else:
                self.ui.NoseTopolCheckBox.setChecked(False)
                self.ui.NoseTopolCheckBox.setEnabled(False)
        else:
            self.ui.NoseTopolCheckBox.setChecked(False)
            self.ui.NoseTopolCheckBox.setEnabled(False)

        if len(self.CheekLVetex) != 0 and len(self.CheekRVetex) != 0:
            if self.Skin_Cheek_vetex_Check == 1:
                self.ui.CheekTopolCheckBox.setChecked(True)
                self.ui.CheekTopolCheckBox.setEnabled(False)
            else:
                self.ui.CheekTopolCheckBox.setChecked(False)
                self.ui.CheekTopolCheckBox.setEnabled(False)
        else:
            self.ui.CheekTopolCheckBox.setChecked(False)
            self.ui.CheekTopolCheckBox.setEnabled(False)

        if len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            if self.Skin_Lip_vetex_Check == 1:
                self.ui.LipTopolCheckBox.setChecked(True)
                self.ui.LipTopolCheckBox.setEnabled(False)
            else:
                self.ui.LipTopolCheckBox.setChecked(False)
                self.ui.LipTopolCheckBox.setEnabled(False)
        else:
            self.ui.LipTopolCheckBox.setChecked(False)
            self.ui.LipTopolCheckBox.setEnabled(False)

        if len(self.JawVetex) != 0 and len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            if self.Skin_Jaw_vetex_Check == 1:
                self.ui.JawTopolCheckBox.setChecked(True)
                self.ui.JawTopolCheckBox.setEnabled(False)
            else:
                self.ui.JawTopolCheckBox.setChecked(False)
                self.ui.JawTopolCheckBox.setEnabled(False)
        else:
            self.ui.JawTopolCheckBox.setChecked(False)
            self.ui.JawTopolCheckBox.setEnabled(False)

        self.lock_parts()
        print('Auto Skinning prograss reset')
        if cmds.objExists('FitScale_ctrl_grp'):
            if cmds.objExists('Facial_System_joint_grp'):
                print('you already generated Rig System')
            else:
                print('you already create joint')
        elif cmds.objExists('Facial_System_joint_grp'):
            print('you already generated Rig System')
        else:
            self.ui.BrowCheckBox.setChecked(True)
            self.ui.BrowCheckBox.setEnabled(True)
            self.ui.EyeCheckBox.setChecked(True)
            self.ui.EyeCheckBox.setEnabled(True)
            self.ui.EyeTargetCheckBox.setChecked(True)
            self.ui.EyeTargetCheckBox.setEnabled(True)
            self.ui.NoseCheckBox.setChecked(True)
            self.ui.NoseCheckBox.setEnabled(True)
            self.ui.CheekCheckBox.setChecked(True)
            self.ui.CheekCheckBox.setEnabled(True)
            self.ui.LipCheckBox.setChecked(True)
            self.ui.LipCheckBox.setEnabled(True)
            self.ui.OralCavityCheckBox.setChecked(True)
            self.ui.OralCavityCheckBox.setEnabled(True)
            self.ui.LipOption.setCurrentText('Lip 10 joint')
            self.ui.LipOption.setEnabled(True)
            self.ui.CheekOption.setCurrentText('Cheek 08 joint')
            self.ui.CheekOption.setEnabled(True)
            self.ui.NoseOption.setCurrentText('Nose 04 joint')
            self.ui.NoseOption.setEnabled(True)
            self.ui.BrowOption.setCurrentText('Brow 07 joint')
            self.ui.BrowOption.setEnabled(True)
            self.ui.EyeOption.setCurrentText('Eye 08 joint')
            self.ui.EyeOption.setEnabled(True)
            self.ui.OralOption.setCurrentText('Teeth & Tongue joint')
            self.ui.OralOption.setEnabled(True)

    def edit_menu_save_command(self, *args):
        mel.eval('$currentDir = `workspace -q -fn`')
        mel.eval('$dir = `workspace -dir $currentDir`')
        mel.eval('string $scnName = `file -q -ns`')
        mel.eval('$filePath=`fileDialog2 -fileMode 3 -startingDirectory $dir -caption "Facial set file path" -okCaption "Set Folder"`')
        mel.eval('$exampleFileName = $filePath[0]+"/"+$scnName+".facial"')
        mel.eval('$fileId=`fopen $exampleFileName "w"`')
        mel.eval('string $fileData_LipCorner_L_Vetex = ""')
        mel.eval('string $fileData_LipCorner_lower_L_Vetex = ""')
        mel.eval('string $fileData_LipCorner_R_Vetex = ""')
        mel.eval('string $fileData_LipCorner_lower_R_Vetex = ""')
        mel.eval('string $fileData_LipUpper_Vetex = ""')
        mel.eval('string $fileData_LipLower_Vetex = ""')
        mel.eval('string $fileData_LipLower_Outer_Vetex = ""')
        mel.eval('string $fileData_Lip_L_UpperSide_Vetex = ""')
        mel.eval('string $fileData_Lip_L_UpperSide_02_Vetex = ""')
        mel.eval('string $fileData_Lip_L_UpperOuter_Vetex = ""')
        mel.eval('string $fileData_Lip_L_LowerSide_Vetex = ""')
        mel.eval('string $fileData_Lip_L_LowerSide_02_Vetex = ""')
        mel.eval('string $fileData_Lip_L_LowerOuter_Vetex = ""')
        mel.eval('string $fileData_Lip_R_UpperSide_Vetex = ""')
        mel.eval('string $fileData_Lip_R_UpperSide_02_Vetex = ""')
        mel.eval('string $fileData_Lip_R_UpperOuter_Vetex = ""')
        mel.eval('string $fileData_Lip_R_LowerSide_Vetex = ""')
        mel.eval('string $fileData_Lip_R_LowerSide_02_Vetex = ""')
        mel.eval('string $fileData_Lip_R_LowerOuter_Vetex = ""')
        mel.eval('string $fileData_LipUpVetex = ""')
        mel.eval('string $fileData_LipDownVetex = ""')
        mel.eval('$fileData_LipCorner_L_Vetex += "--LipCorner_L_Vetex--\\n"')
        for i in range(len(self.LipCorner_L_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipCorner_L_Vetex += "' + self.LipCorner_L_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipCorner_L_Vetex += "\\n' + self.LipCorner_L_Vetex[i] + '"')
        mel.eval('$fileData_LipCorner_lower_L_Vetex += "--LipCorner_lower_L_Vetex--\\n"')

        for i in range(len(self.LipCorner_lower_L_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipCorner_lower_L_Vetex += "' + self.LipCorner_lower_L_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipCorner_lower_L_Vetex += "\\n' + self.LipCorner_lower_L_Vetex[i] + '"')
        mel.eval('$fileData_LipCorner_R_Vetex += "--LipCorner_R_Vetex--\\n"')

        for i in range(len(self.LipCorner_R_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipCorner_R_Vetex += "' + self.LipCorner_R_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipCorner_R_Vetex += "\\n' + self.LipCorner_R_Vetex[i] + '"')
        mel.eval('$fileData_LipCorner_lower_R_Vetex += "--LipCorner_lower_R_Vetex--\\n"')

        for i in range(len(self.LipCorner_lower_R_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipCorner_lower_R_Vetex += "' + self.LipCorner_lower_R_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipCorner_lower_R_Vetex += "\\n' + self.LipCorner_lower_R_Vetex[i] + '"')
        mel.eval('$fileData_LipUpper_Vetex += "--LipUpper_Vetex--\\n"')

        for i in range(len(self.LipUpper_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipUpper_Vetex += "' + self.LipUpper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipUpper_Vetex += "\\n' + self.LipUpper_Vetex[i] + '"')
        mel.eval('$fileData_LipLower_Vetex += "--LipLower_Vetex--\\n"')

        for i in range(len(self.LipLower_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipLower_Vetex += "' + self.LipLower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipLower_Vetex += "\\n' + self.LipLower_Vetex[i] + '"')
        mel.eval('$fileData_LipLower_Outer_Vetex += "--LipLower_Outer_Vetex--\\n"')

        for i in range(len(self.LipLower_Outer_Vetex)):
            if i == 0:
                mel.eval('$fileData_LipLower_Outer_Vetex += "' + self.LipLower_Outer_Vetex[i] + '"')
            else:
                mel.eval('$fileData_LipLower_Outer_Vetex += "\\n' + self.LipLower_Outer_Vetex[i] + '"')
        mel.eval('$fileData_Lip_L_UpperSide_Vetex += "--Lip_L_UpperSide_Vetex--\\n"')

        for i in range(len(self.Lip_L_UpperSide_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_L_UpperSide_Vetex += "' + self.Lip_L_UpperSide_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_L_UpperSide_Vetex += "\\n' + self.Lip_L_UpperSide_Vetex[i] + '"')
        mel.eval('$fileData_Lip_L_UpperSide_02_Vetex += "--Lip_L_UpperSide_02_Vetex--\\n"')

        for i in range(len(self.Lip_L_UpperSide_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_L_UpperSide_02_Vetex += "' + self.Lip_L_UpperSide_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_L_UpperSide_02_Vetex += "\\n' + self.Lip_L_UpperSide_02_Vetex[i] + '"')
        mel.eval('$fileData_Lip_L_UpperOuter_Vetex += "--Lip_L_UpperOuter_Vetex--\\n"')

        for i in range(len(self.Lip_L_UpperOuter_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_L_UpperOuter_Vetex += "' + self.Lip_L_UpperOuter_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_L_UpperOuter_Vetex += "\\n' + self.Lip_L_UpperOuter_Vetex[i] + '"')
        mel.eval('$fileData_Lip_L_LowerSide_Vetex += "--Lip_L_LowerSide_Vetex--\\n"')

        for i in range(len(self.Lip_L_LowerSide_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_L_LowerSide_Vetex += "' + self.Lip_L_LowerSide_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_L_LowerSide_Vetex += "\\n' + self.Lip_L_LowerSide_Vetex[i] + '"')
        mel.eval('$fileData_Lip_L_LowerSide_02_Vetex += "--Lip_L_LowerSide_02_Vetex--\\n"')

        for i in range(len(self.Lip_L_LowerSide_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_L_LowerSide_02_Vetex += "' + self.Lip_L_LowerSide_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_L_LowerSide_02_Vetex += "\\n' + self.Lip_L_LowerSide_02_Vetex[i] + '"')
        mel.eval('$fileData_Lip_L_LowerOuter_Vetex += "--Lip_L_LowerOuter_Vetex--\\n"')

        for i in range(len(self.Lip_L_LowerOuter_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_L_LowerOuter_Vetex += "' + self.Lip_L_LowerOuter_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_L_LowerOuter_Vetex += "\\n' + self.Lip_L_LowerOuter_Vetex[i] + '"')
        mel.eval('$fileData_Lip_R_UpperSide_Vetex += "--Lip_R_UpperSide_Vetex--\\n"')

        for i in range(len(self.Lip_R_UpperSide_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_R_UpperSide_Vetex += "' + self.Lip_R_UpperSide_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_R_UpperSide_Vetex += "\\n' + self.Lip_R_UpperSide_Vetex[i] + '"')
        mel.eval('$fileData_Lip_R_UpperSide_02_Vetex += "--Lip_R_UpperSide_02_Vetex--\\n"')

        for i in range(len(self.Lip_R_UpperSide_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_R_UpperSide_02_Vetex += "' + self.Lip_R_UpperSide_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_R_UpperSide_02_Vetex += "\\n' + self.Lip_R_UpperSide_02_Vetex[i] + '"')
        mel.eval('$fileData_Lip_R_UpperOuter_Vetex += "--Lip_R_UpperOuter_Vetex--\\n"')

        for i in range(len(self.Lip_R_UpperOuter_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_R_UpperOuter_Vetex += "' + self.Lip_R_UpperOuter_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_R_UpperOuter_Vetex += "\\n' + self.Lip_R_UpperOuter_Vetex[i] + '"')
        mel.eval('$fileData_Lip_R_LowerSide_Vetex += "--Lip_R_LowerSide_Vetex--\\n"')

        for i in range(len(self.Lip_R_LowerSide_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_R_LowerSide_Vetex += "' + self.Lip_R_LowerSide_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_R_LowerSide_Vetex += "\\n' + self.Lip_R_LowerSide_Vetex[i] + '"')
        mel.eval('$fileData_Lip_R_LowerSide_02_Vetex += "--Lip_R_LowerSide_02_Vetex--\\n"')

        for i in range(len(self.Lip_R_LowerSide_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_R_LowerSide_02_Vetex += "' + self.Lip_R_LowerSide_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_R_LowerSide_02_Vetex += "\\n' + self.Lip_R_LowerSide_02_Vetex[i] + '"')
        mel.eval('$fileData_Lip_R_LowerOuter_Vetex += "--Lip_R_LowerOuter_Vetex--\\n"')

        for i in range(len(self.Lip_R_LowerOuter_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_R_LowerOuter_Vetex += "' + self.Lip_R_LowerOuter_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_R_LowerOuter_Vetex += "\\n' + self.Lip_R_LowerOuter_Vetex[i] + '"')
        mel.eval('$fileData_LipUpVetex += "--LipUpVetex--\\n"')

        for i in range(len(self.LipUpVetex)):
            if i == 0:
                mel.eval('$fileData_LipUpVetex += "' + self.LipUpVetex[i] + '"')
            else:
                mel.eval('$fileData_LipUpVetex += "\\n' + self.LipUpVetex[i] + '"')
        mel.eval('$fileData_LipDownVetex += "--LipDownVetex--\\n"')

        for i in range(len(self.LipDownVetex)):
            if i == 0:
                mel.eval('$fileData_LipDownVetex += "' + self.LipDownVetex[i] + '"')
            else:
                mel.eval('$fileData_LipDownVetex += "\\n' + self.LipDownVetex[i] + '"')
        mel.eval('fprint $fileId $fileData_LipCorner_L_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipCorner_lower_L_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipCorner_R_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipCorner_lower_R_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipUpper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipLower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipLower_Outer_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_L_UpperSide_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_L_UpperSide_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_L_UpperOuter_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_L_LowerSide_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_L_LowerSide_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_L_LowerOuter_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_R_UpperSide_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_R_UpperSide_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_R_UpperOuter_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_R_LowerSide_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_R_LowerSide_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Lip_R_LowerOuter_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipUpVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_LipDownVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_Lip_Jaw_Vetex = ""')
        mel.eval('string $fileData_JawVetex = ""')
        mel.eval('$fileData_Lip_Jaw_Vetex += "--Lip_Jaw_Vetex--\\n"')

        for i in range(len(self.Lip_Jaw_Vetex)):
            if i == 0:
                mel.eval('$fileData_Lip_Jaw_Vetex += "' + self.Lip_Jaw_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Lip_Jaw_Vetex += "\\n' + self.Lip_Jaw_Vetex[i] + '"')
        mel.eval('$fileData_JawVetex += "--JawVetex--\\n"')

        for i in range(len(self.JawVetex)):
            if i == 0:
                mel.eval('$fileData_JawVetex += "' + self.JawVetex[i] + '"')
            else:
                mel.eval('$fileData_JawVetex += "\\n' + self.JawVetex[i] + '"')
        mel.eval('fprint $fileId $fileData_Lip_Jaw_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_JawVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_Eye_L_blink_Vetex = ""')
        mel.eval('string $fileData_Eye_R_blink_Vetex = ""')
        mel.eval('string $fileData_Eye_L_lower_Vetex = ""')
        mel.eval('string $fileData_Eye_R_lower_Vetex = ""')
        mel.eval('string $fileData_Eye_L_lacrimal_Vetex = ""')
        mel.eval('string $fileData_Eye_L_lacrimal_upper_Vetex = ""')
        mel.eval('string $fileData_Eye_L_lacrimal_lower_Vetex = ""')
        mel.eval('string $fileData_Eye_R_lacrimal_Vetex = ""')
        mel.eval('string $fileData_Eye_R_lacrimal_upper_Vetex = ""')
        mel.eval('string $fileData_Eye_R_lacrimal_lower_Vetex = ""')
        mel.eval('string $fileData_Eye_L_back_Vetex = ""')
        mel.eval('string $fileData_Eye_L_back_upper_Vetex = ""')
        mel.eval('string $fileData_Eye_L_back_lower_Vetex = ""')
        mel.eval('string $fileData_Eye_L_double_Vetex = ""')
        mel.eval('string $fileData_Eye_R_back_Vetex = ""')
        mel.eval('string $fileData_Eye_R_back_upper_Vetex = ""')
        mel.eval('string $fileData_Eye_R_back_lower_Vetex = ""')
        mel.eval('string $fileData_Eye_R_double_Vetex = ""')
        mel.eval('string $fileData_EyeLVetex = ""')
        mel.eval('string $fileData_EyeRVetex = ""')
        mel.eval('$fileData_Eye_L_blink_Vetex += "--Eye_L_blink_Vetex--\\n"')
        for i in range(len(self.Eye_L_blink_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_blink_Vetex += "' + self.Eye_L_blink_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_blink_Vetex += "\\n' + self.Eye_L_blink_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_blink_Vetex += "--Eye_R_blink_Vetex--\\n"')

        for i in range(len(self.Eye_R_blink_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_blink_Vetex += "' + self.Eye_R_blink_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_blink_Vetex += "\\n' + self.Eye_R_blink_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_lower_Vetex += "--Eye_L_lower_Vetex--\\n"')

        for i in range(len(self.Eye_L_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_lower_Vetex += "' + self.Eye_L_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_lower_Vetex += "\\n' + self.Eye_L_lower_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_lower_Vetex += "--Eye_R_lower_Vetex--\\n"')

        for i in range(len(self.Eye_R_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_lower_Vetex += "' + self.Eye_R_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_lower_Vetex += "\\n' + self.Eye_R_lower_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_lacrimal_Vetex += "--Eye_L_lacrimal_Vetex--\\n"')

        for i in range(len(self.Eye_L_lacrimal_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_lacrimal_Vetex += "' + self.Eye_L_lacrimal_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_lacrimal_Vetex += "\\n' + self.Eye_L_lacrimal_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_lacrimal_upper_Vetex += "--Eye_L_lacrimal_upper_Vetex--\\n"')

        for i in range(len(self.Eye_L_lacrimal_upper_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_lacrimal_upper_Vetex += "' + self.Eye_L_lacrimal_upper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_lacrimal_upper_Vetex += "\\n' + self.Eye_L_lacrimal_upper_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_lacrimal_lower_Vetex += "--Eye_L_lacrimal_lower_Vetex--\\n"')

        for i in range(len(self.Eye_L_lacrimal_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_lacrimal_lower_Vetex += "' + self.Eye_L_lacrimal_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_lacrimal_lower_Vetex += "\\n' + self.Eye_L_lacrimal_lower_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_lacrimal_Vetex += "--Eye_R_lacrimal_Vetex--\\n"')

        for i in range(len(self.Eye_R_lacrimal_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_lacrimal_Vetex += "' + self.Eye_R_lacrimal_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_lacrimal_Vetex += "\\n' + self.Eye_R_lacrimal_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_lacrimal_upper_Vetex += "--Eye_R_lacrimal_upper_Vetex--\\n"')

        for i in range(len(self.Eye_R_lacrimal_upper_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_lacrimal_upper_Vetex += "' + self.Eye_R_lacrimal_upper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_lacrimal_upper_Vetex += "\\n' + self.Eye_R_lacrimal_upper_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_lacrimal_lower_Vetex += "--Eye_R_lacrimal_lower_Vetex--\\n"')

        for i in range(len(self.Eye_R_lacrimal_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_lacrimal_lower_Vetex += "' + self.Eye_R_lacrimal_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_lacrimal_lower_Vetex += "\\n' + self.Eye_R_lacrimal_lower_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_back_Vetex += "--Eye_L_back_Vetex--\\n"')

        for i in range(len(self.Eye_L_back_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_back_Vetex += "' + self.Eye_L_back_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_back_Vetex += "\\n' + self.Eye_L_back_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_back_upper_Vetex += "--Eye_L_back_upper_Vetex--\\n"')

        for i in range(len(self.Eye_L_back_upper_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_back_upper_Vetex += "' + self.Eye_L_back_upper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_back_upper_Vetex += "\\n' + self.Eye_L_back_upper_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_back_lower_Vetex += "--Eye_L_back_lower_Vetex--\\n"')

        for i in range(len(self.Eye_L_back_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_back_lower_Vetex += "' + self.Eye_L_back_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_back_lower_Vetex += "\\n' + self.Eye_L_back_lower_Vetex[i] + '"')
        mel.eval('$fileData_Eye_L_double_Vetex += "--Eye_L_double_Vetex--\\n"')

        for i in range(len(self.Eye_L_double_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_L_double_Vetex += "' + self.Eye_L_double_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_L_double_Vetex += "\\n' + self.Eye_L_double_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_back_Vetex += "--Eye_R_back_Vetex--\\n"')

        for i in range(len(self.Eye_R_back_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_back_Vetex += "' + self.Eye_R_back_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_back_Vetex += "\\n' + self.Eye_R_back_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_back_upper_Vetex += "--Eye_R_back_upper_Vetex--\\n"')

        for i in range(len(self.Eye_R_back_upper_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_back_upper_Vetex += "' + self.Eye_R_back_upper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_back_upper_Vetex += "\\n' + self.Eye_R_back_upper_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_back_lower_Vetex += "--Eye_R_back_lower_Vetex--\\n"')

        for i in range(len(self.Eye_R_back_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_back_lower_Vetex += "' + self.Eye_R_back_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_back_lower_Vetex += "\\n' + self.Eye_R_back_lower_Vetex[i] + '"')
        mel.eval('$fileData_Eye_R_double_Vetex += "--Eye_R_double_Vetex--\\n"')

        for i in range(len(self.Eye_R_double_Vetex)):
            if i == 0:
                mel.eval('$fileData_Eye_R_double_Vetex += "' + self.Eye_R_double_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Eye_R_double_Vetex += "\\n' + self.Eye_R_double_Vetex[i] + '"')
        mel.eval('$fileData_EyeLVetex += "--EyeLVetex--\\n"')

        for i in range(len(self.EyeLVetex)):
            if i == 0:
                mel.eval('$fileData_EyeLVetex += "' + self.EyeLVetex[i] + '"')
            else:
                mel.eval('$fileData_EyeLVetex += "\\n' + self.EyeLVetex[i] + '"')
        mel.eval('$fileData_EyeRVetex += "--EyeRVetex--\\n"')

        for i in range(len(self.EyeRVetex)):
            if i == 0:
                mel.eval('$fileData_EyeRVetex += "' + self.EyeRVetex[i] + '"')
            else:
                mel.eval('$fileData_EyeRVetex += "\\n' + self.EyeRVetex[i] + '"')
        mel.eval('fprint $fileId $fileData_Eye_L_blink_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_blink_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_lacrimal_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_lacrimal_upper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_lacrimal_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_lacrimal_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_lacrimal_upper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_lacrimal_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_back_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_back_upper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_back_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_L_double_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_back_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_back_upper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_back_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Eye_R_double_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_EyeLVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_EyeRVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_Cheek_L_Vetex = ""')
        mel.eval('string $fileData_Cheek_L_upper_Vetex = ""')
        mel.eval('string $fileData_Cheek_L_outer_orbicularis_Vetex = ""')
        mel.eval('string $fileData_Cheek_L_inner_orbicularis_Vetex = ""')
        mel.eval('string $fileData_Cheek_L_lower_Vetex = ""')
        mel.eval('string $fileData_Cheek_L_lip_lid_Vetex = ""')
        mel.eval('string $fileData_Cheek_R_Vetex = ""')
        mel.eval('string $fileData_Cheek_R_upper_Vetex = ""')
        mel.eval('string $fileData_Cheek_R_outer_orbicularis_Vetex = ""')
        mel.eval('string $fileData_Cheek_R_inner_orbicularis_Vetex = ""')
        mel.eval('string $fileData_Cheek_R_lower_Vetex = ""')
        mel.eval('string $fileData_Cheek_R_lip_lid_Vetex = ""')
        mel.eval('string $fileData_CheekLVetex = ""')
        mel.eval('string $fileData_CheekRVetex = ""')
        mel.eval('$fileData_Cheek_L_Vetex += "--Cheek_L_Vetex--\\n"')

        for i in range(len(self.Cheek_L_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_L_Vetex += "' + self.Cheek_L_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_L_Vetex += "\\n' + self.Cheek_L_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_L_upper_Vetex += "--Cheek_L_upper_Vetex--\\n"')

        for i in range(len(self.Cheek_L_upper_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_L_upper_Vetex += "' + self.Cheek_L_upper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_L_upper_Vetex += "\\n' + self.Cheek_L_upper_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_L_outer_orbicularis_Vetex += "--Cheek_L_outer_orbicularis_Vetex--\\n"')

        for i in range(len(self.Cheek_L_outer_orbicularis_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_L_outer_orbicularis_Vetex += "' + self.Cheek_L_outer_orbicularis_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_L_outer_orbicularis_Vetex += "\\n' + self.Cheek_L_outer_orbicularis_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_L_inner_orbicularis_Vetex += "--Cheek_L_inner_orbicularis_Vetex--\\n"')

        for i in range(len(self.Cheek_L_inner_orbicularis_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_L_inner_orbicularis_Vetex += "' + self.Cheek_L_inner_orbicularis_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_L_inner_orbicularis_Vetex += "\\n' + self.Cheek_L_inner_orbicularis_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_L_lower_Vetex += "--Cheek_L_lower_Vetex--\\n"')

        for i in range(len(self.Cheek_L_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_L_lower_Vetex += "' + self.Cheek_L_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_L_lower_Vetex += "\\n' + self.Cheek_L_lower_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_L_lip_lid_Vetex += "--Cheek_L_lip_lid_Vetex--\\n"')

        for i in range(len(self.Cheek_L_lip_lid_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_L_lip_lid_Vetex += "' + self.Cheek_L_lip_lid_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_L_lip_lid_Vetex += "\\n' + self.Cheek_L_lip_lid_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_R_Vetex += "--Cheek_R_Vetex--\\n"')

        for i in range(len(self.Cheek_R_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_R_Vetex += "' + self.Cheek_R_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_R_Vetex += "\\n' + self.Cheek_R_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_R_upper_Vetex += "--Cheek_R_upper_Vetex--\\n"')

        for i in range(len(self.Cheek_R_upper_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_R_upper_Vetex += "' + self.Cheek_R_upper_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_R_upper_Vetex += "\\n' + self.Cheek_R_upper_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_R_outer_orbicularis_Vetex += "--Cheek_R_outer_orbicularis_Vetex--\\n"')

        for i in range(len(self.Cheek_R_outer_orbicularis_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_R_outer_orbicularis_Vetex += "' + self.Cheek_R_outer_orbicularis_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_R_outer_orbicularis_Vetex += "\\n' + self.Cheek_R_outer_orbicularis_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_R_inner_orbicularis_Vetex += "--Cheek_R_inner_orbicularis_Vetex--\\n"')

        for i in range(len(self.Cheek_R_inner_orbicularis_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_R_inner_orbicularis_Vetex += "' + self.Cheek_R_inner_orbicularis_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_R_inner_orbicularis_Vetex += "\\n' + self.Cheek_R_inner_orbicularis_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_R_lower_Vetex += "--Cheek_R_lower_Vetex--\\n"')

        for i in range(len(self.Cheek_R_lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_R_lower_Vetex += "' + self.Cheek_R_lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_R_lower_Vetex += "\\n' + self.Cheek_R_lower_Vetex[i] + '"')
        mel.eval('$fileData_Cheek_R_lip_lid_Vetex += "--Cheek_R_lip_lid_Vetex--\\n"')

        for i in range(len(self.Cheek_R_lip_lid_Vetex)):
            if i == 0:
                mel.eval('$fileData_Cheek_R_lip_lid_Vetex += "' + self.Cheek_R_lip_lid_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Cheek_R_lip_lid_Vetex += "\\n' + self.Cheek_R_lip_lid_Vetex[i] + '"')
        mel.eval('$fileData_CheekLVetex += "--CheekLVetex--\\n"')

        for i in range(len(self.CheekLVetex)):
            if i == 0:
                mel.eval('$fileData_CheekLVetex += "' + self.CheekLVetex[i] + '"')
            else:
                mel.eval('$fileData_CheekLVetex += "\\n' + self.CheekLVetex[i] + '"')
        mel.eval('$fileData_CheekRVetex += "--CheekRVetex--\\n"')

        for i in range(len(self.CheekRVetex)):
            if i == 0:
                mel.eval('$fileData_CheekRVetex += "' + self.CheekRVetex[i] + '"')
            else:
                mel.eval('$fileData_CheekRVetex += "\\n' + self.CheekRVetex[i] + '"')
        mel.eval('fprint $fileId $fileData_Cheek_L_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_L_upper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_L_outer_orbicularis_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_L_inner_orbicularis_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_L_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_L_lip_lid_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_R_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_R_upper_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_R_outer_orbicularis_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_R_inner_orbicularis_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_R_lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Cheek_R_lip_lid_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_CheekLVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_CheekRVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_Nose_L_Vetex = ""')
        mel.eval('string $fileData_Nose_L_nasalis_transverse_Vetex = ""')
        mel.eval('string $fileData_Nose_L_procerus_Vetex = ""')
        mel.eval('string $fileData_Nose_L_nasolabial_fold_Vetex = ""')
        mel.eval('string $fileData_Nose_R_Vetex = ""')
        mel.eval('string $fileData_Nose_R_nasalis_transverse_Vetex = ""')
        mel.eval('string $fileData_Nose_R_procerus_Vetex = ""')
        mel.eval('string $fileData_Nose_R_nasolabial_fold_Vetex = ""')
        mel.eval('string $fileData_Nose_Center_Vetex = ""')
        mel.eval('string $fileData_Nose_Lower_Vetex = ""')
        mel.eval('string $fileData_Nose_depressor_septi_Vetex = ""')
        mel.eval('string $fileData_NoseVetex = ""')
        mel.eval('$fileData_Nose_L_Vetex += "--Nose_L_Vetex--\\n"')
        for i in range(len(self.Nose_L_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_L_Vetex += "' + self.Nose_L_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_L_Vetex += "\\n' + self.Nose_L_Vetex[i] + '"')
        mel.eval('$fileData_Nose_L_nasalis_transverse_Vetex += "--Nose_L_nasalis_transverse_Vetex--\\n"')

        for i in range(len(self.Nose_L_nasalis_transverse_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_L_nasalis_transverse_Vetex += "' + self.Nose_L_nasalis_transverse_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_L_nasalis_transverse_Vetex += "\\n' + self.Nose_L_nasalis_transverse_Vetex[i] + '"')
        mel.eval('$fileData_Nose_L_procerus_Vetex += "--Nose_L_procerus_Vetex--\\n"')

        for i in range(len(self.Nose_L_procerus_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_L_procerus_Vetex += "' + self.Nose_L_procerus_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_L_procerus_Vetex += "\\n' + self.Nose_L_procerus_Vetex[i] + '"')
        mel.eval('$fileData_Nose_L_nasolabial_fold_Vetex += "--Nose_L_nasolabial_fold_Vetex--\\n"')

        for i in range(len(self.Nose_L_nasolabial_fold_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_L_nasolabial_fold_Vetex += "' + self.Nose_L_nasolabial_fold_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_L_nasolabial_fold_Vetex += "\\n' + self.Nose_L_nasolabial_fold_Vetex[i] + '"')
        mel.eval('$fileData_Nose_R_Vetex += "--Nose_R_Vetex--\\n"')

        for i in range(len(self.Nose_R_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_R_Vetex += "' + self.Nose_R_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_R_Vetex += "\\n' + self.Nose_R_Vetex[i] + '"')
        mel.eval('$fileData_Nose_R_nasalis_transverse_Vetex += "--Nose_R_nasalis_transverse_Vetex--\\n"')

        for i in range(len(self.Nose_R_nasalis_transverse_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_R_nasalis_transverse_Vetex += "' + self.Nose_R_nasalis_transverse_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_R_nasalis_transverse_Vetex += "\\n' + self.Nose_R_nasalis_transverse_Vetex[i] + '"')
        mel.eval('$fileData_Nose_R_procerus_Vetex += "--Nose_R_procerus_Vetex--\\n"')

        for i in range(len(self.Nose_R_procerus_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_R_procerus_Vetex += "' + self.Nose_R_procerus_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_R_procerus_Vetex += "\\n' + self.Nose_R_procerus_Vetex[i] + '"')
        mel.eval('$fileData_Nose_R_nasolabial_fold_Vetex += "--Nose_R_nasolabial_fold_Vetex--\\n"')

        for i in range(len(self.Nose_R_nasolabial_fold_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_R_nasolabial_fold_Vetex += "' + self.Nose_R_nasolabial_fold_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_R_nasolabial_fold_Vetex += "\\n' + self.Nose_R_nasolabial_fold_Vetex[i] + '"')
        mel.eval('$fileData_Nose_Center_Vetex += "--Nose_Center_Vetex--\\n"')

        for i in range(len(self.Nose_Center_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_Center_Vetex += "' + self.Nose_Center_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_Center_Vetex += "\\n' + self.Nose_Center_Vetex[i] + '"')
        mel.eval('$fileData_Nose_Lower_Vetex += "--Nose_Lower_Vetex--\\n"')

        for i in range(len(self.Nose_Lower_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_Lower_Vetex += "' + self.Nose_Lower_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_Lower_Vetex += "\\n' + self.Nose_Lower_Vetex[i] + '"')
        mel.eval('$fileData_Nose_depressor_septi_Vetex += "--Nose_depressor_septi_Vetex--\\n"')

        for i in range(len(self.Nose_depressor_septi_Vetex)):
            if i == 0:
                mel.eval('$fileData_Nose_depressor_septi_Vetex += "' + self.Nose_depressor_septi_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Nose_depressor_septi_Vetex += "\\n' + self.Nose_depressor_septi_Vetex[i] + '"')
        mel.eval('$fileData_NoseVetex += "--NoseVetex--\\n"')

        for i in range(len(self.NoseVetex)):
            if i == 0:
                mel.eval('$fileData_NoseVetex += "' + self.NoseVetex[i] + '"')
            else:
                mel.eval('$fileData_NoseVetex += "\\n' + self.NoseVetex[i] + '"')
        mel.eval('fprint $fileId $fileData_Nose_L_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_L_nasalis_transverse_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_L_procerus_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_L_nasolabial_fold_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_R_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_R_nasalis_transverse_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_R_procerus_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_R_nasolabial_fold_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_Center_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_Lower_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Nose_depressor_septi_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_NoseVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_Brow_L_Vetex = ""')
        mel.eval('string $fileData_Brow_L_medial_fibers_Vetex = ""')
        mel.eval('string $fileData_Brow_L_lateral_fibers_Vetex = ""')
        mel.eval('string $fileData_Brow_L_procerus_Vetex = ""')
        mel.eval('string $fileData_Brow_R_Vetex = ""')
        mel.eval('string $fileData_Brow_R_medial_fibers_Vetex = ""')
        mel.eval('string $fileData_Brow_R_lateral_fibers_Vetex = ""')
        mel.eval('string $fileData_Brow_R_procerus_Vetex = ""')
        mel.eval('string $fileData_Brow_L_02_Vetex = ""')
        mel.eval('string $fileData_Brow_R_02_Vetex = ""')
        mel.eval('string $fileData_Brow_L_03_Vetex = ""')
        mel.eval('string $fileData_Brow_R_03_Vetex = ""')
        mel.eval('string $fileData_Brow_Center_Vetex = ""')
        mel.eval('string $fileData_BrowLVetex = ""')
        mel.eval('string $fileData_BrowRVetex = ""')
        mel.eval('$fileData_Brow_L_Vetex += "--Brow_L_Vetex--\\n"')

        for i in range(len(self.Brow_L_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_L_Vetex += "' + self.Brow_L_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_L_Vetex += "\\n' + self.Brow_L_Vetex[i] + '"')
        mel.eval('$fileData_Brow_L_medial_fibers_Vetex += "--Brow_L_medial_fibers_Vetex--\\n"')

        for i in range(len(self.Brow_L_medial_fibers_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_L_medial_fibers_Vetex += "' + self.Brow_L_medial_fibers_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_L_medial_fibers_Vetex += "\\n' + self.Brow_L_medial_fibers_Vetex[i] + '"')
        mel.eval('$fileData_Brow_L_lateral_fibers_Vetex += "--Brow_L_lateral_fibers_Vetex--\\n"')

        for i in range(len(self.Brow_L_lateral_fibers_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_L_lateral_fibers_Vetex += "' + self.Brow_L_lateral_fibers_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_L_lateral_fibers_Vetex += "\\n' + self.Brow_L_lateral_fibers_Vetex[i] + '"')
        mel.eval('$fileData_Brow_L_procerus_Vetex += "--Brow_L_procerus_Vetex--\\n"')

        for i in range(len(self.Brow_L_procerus_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_L_procerus_Vetex += "' + self.Brow_L_procerus_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_L_procerus_Vetex += "\\n' + self.Brow_L_procerus_Vetex[i] + '"')
        mel.eval('$fileData_Brow_R_Vetex += "--Brow_R_Vetex--\\n"')

        for i in range(len(self.Brow_R_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_R_Vetex += "' + self.Brow_R_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_R_Vetex += "\\n' + self.Brow_R_Vetex[i] + '"')
        mel.eval('$fileData_Brow_R_medial_fibers_Vetex += "--Brow_R_medial_fibers_Vetex--\\n"')

        for i in range(len(self.Brow_R_medial_fibers_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_R_medial_fibers_Vetex += "' + self.Brow_R_medial_fibers_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_R_medial_fibers_Vetex += "\\n' + self.Brow_R_medial_fibers_Vetex[i] + '"')
        mel.eval('$fileData_Brow_R_lateral_fibers_Vetex += "--Brow_R_lateral_fibers_Vetex--\\n"')

        for i in range(len(self.Brow_R_lateral_fibers_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_R_lateral_fibers_Vetex += "' + self.Brow_R_lateral_fibers_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_R_lateral_fibers_Vetex += "\\n' + self.Brow_R_lateral_fibers_Vetex[i] + '"')
        mel.eval('$fileData_Brow_R_procerus_Vetex += "--Brow_R_procerus_Vetex--\\n"')

        for i in range(len(self.Brow_R_procerus_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_R_procerus_Vetex += "' + self.Brow_R_procerus_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_R_procerus_Vetex += "\\n' + self.Brow_R_procerus_Vetex[i] + '"')
        mel.eval('$fileData_Brow_L_02_Vetex += "--Brow_L_02_Vetex--\\n"')

        for i in range(len(self.Brow_L_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_L_02_Vetex += "' + self.Brow_L_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_L_02_Vetex += "\\n' + self.Brow_L_02_Vetex[i] + '"')
        mel.eval('$fileData_Brow_R_02_Vetex += "--Brow_R_02_Vetex--\\n"')

        for i in range(len(self.Brow_R_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_R_02_Vetex += "' + self.Brow_R_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_R_02_Vetex += "\\n' + self.Brow_R_02_Vetex[i] + '"')
        mel.eval('$fileData_Brow_L_03_Vetex += "--Brow_L_03_Vetex--\\n"')

        for i in range(len(self.Brow_L_03_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_L_03_Vetex += "' + self.Brow_L_03_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_L_03_Vetex += "\\n' + self.Brow_L_03_Vetex[i] + '"')
        mel.eval('$fileData_Brow_R_03_Vetex += "--Brow_R_03_Vetex--\\n"')

        for i in range(len(self.Brow_R_03_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_R_03_Vetex += "' + self.Brow_R_03_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_R_03_Vetex += "\\n' + self.Brow_R_03_Vetex[i] + '"')
        mel.eval('$fileData_Brow_Center_Vetex += "--Brow_Center_Vetex--\\n"')

        for i in range(len(self.Brow_Center_Vetex)):
            if i == 0:
                mel.eval('$fileData_Brow_Center_Vetex += "' + self.Brow_Center_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Brow_Center_Vetex += "\\n' + self.Brow_Center_Vetex[i] + '"')
        mel.eval('$fileData_BrowLVetex += "--BrowLVetex--\\n"')

        for i in range(len(self.BrowLVetex)):
            if i == 0:
                mel.eval('$fileData_BrowLVetex += "' + self.BrowLVetex[i] + '"')
            else:
                mel.eval('$fileData_BrowLVetex += "\\n' + self.BrowLVetex[i] + '"')
        mel.eval('$fileData_BrowRVetex += "--BrowRVetex--\\n"')

        for i in range(len(self.BrowRVetex)):
            if i == 0:
                mel.eval('$fileData_BrowRVetex += "' + self.BrowRVetex[i] + '"')
            else:
                mel.eval('$fileData_BrowRVetex += "\\n' + self.BrowRVetex[i] + '"')
        mel.eval('fprint $fileId $fileData_Brow_L_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_L_medial_fibers_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_L_lateral_fibers_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_L_procerus_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_R_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_R_medial_fibers_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_R_lateral_fibers_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_R_procerus_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_L_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_R_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_L_03_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_R_03_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Brow_Center_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_BrowLVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_BrowRVetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_Oral_Upper_teeth_Vetex = ""')
        mel.eval('string $fileData_Oral_Lower_teeth_Vetex = ""')
        mel.eval('string $fileData_Oral_Tongue_Vetex = ""')
        mel.eval('string $fileData_Oral_Tongue_02_Vetex = ""')
        mel.eval('string $fileData_Oral_Tongue_03_Vetex = ""')
        mel.eval('$fileData_Oral_Upper_teeth_Vetex += "--Oral_Upper_teeth_Vetex--\\n"')
        for i in range(len(self.Oral_Upper_teeth_Vetex)):
            if i == 0:
                mel.eval('$fileData_Oral_Upper_teeth_Vetex += "' + self.Oral_Upper_teeth_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Oral_Upper_teeth_Vetex += "\\n' + self.Oral_Upper_teeth_Vetex[i] + '"')
        mel.eval('$fileData_Oral_Lower_teeth_Vetex += "--Oral_Lower_teeth_Vetex--\\n"')

        for i in range(len(self.Oral_Lower_teeth_Vetex)):
            if i == 0:
                mel.eval('$fileData_Oral_Lower_teeth_Vetex += "' + self.Oral_Lower_teeth_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Oral_Lower_teeth_Vetex += "\\n' + self.Oral_Lower_teeth_Vetex[i] + '"')
        mel.eval('$fileData_Oral_Tongue_Vetex += "--Oral_Tongue_Vetex--\\n"')

        for i in range(len(self.Oral_Tongue_Vetex)):
            if i == 0:
                mel.eval('$fileData_Oral_Tongue_Vetex += "' + self.Oral_Tongue_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Oral_Tongue_Vetex += "\\n' + self.Oral_Tongue_Vetex[i] + '"')
        mel.eval('$fileData_Oral_Tongue_02_Vetex += "--Oral_Tongue_02_Vetex--\\n"')

        for i in range(len(self.Oral_Tongue_02_Vetex)):
            if i == 0:
                mel.eval('$fileData_Oral_Tongue_02_Vetex += "' + self.Oral_Tongue_02_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Oral_Tongue_02_Vetex += "\\n' + self.Oral_Tongue_02_Vetex[i] + '"')
        mel.eval('$fileData_Oral_Tongue_03_Vetex += "--Oral_Tongue_03_Vetex--\\n"')

        for i in range(len(self.Oral_Tongue_03_Vetex)):
            if i == 0:
                mel.eval('$fileData_Oral_Tongue_03_Vetex += "' + self.Oral_Tongue_03_Vetex[i] + '"')
            else:
                mel.eval('$fileData_Oral_Tongue_03_Vetex += "\\n' + self.Oral_Tongue_03_Vetex[i] + '"')
        mel.eval('fprint $fileId $fileData_Oral_Upper_teeth_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Oral_Lower_teeth_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Oral_Tongue_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Oral_Tongue_02_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_Oral_Tongue_03_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('string $fileData_EyeBall_L_Vetex = ""')
        mel.eval('string $fileData_EyeBall_R_Vetex = ""')
        for i in range(len(self.EyeBall_L_Vetex)):
            if i == 0:
                mel.eval('$fileData_EyeBall_L_Vetex += "--EyeBall_L_Vetex--\\n"')
                mel.eval('$fileData_EyeBall_L_Vetex += "' + self.EyeBall_L_Vetex[i] + '"')
            else:
                mel.eval('$fileData_EyeBall_L_Vetex += "\\n' + self.EyeBall_L_Vetex[i] + '"')

        for i in range(len(self.EyeBall_R_Vetex)):
            if i == 0:
                mel.eval('$fileData_EyeBall_R_Vetex += "--EyeBall_R_Vetex--\\n"')
                mel.eval('$fileData_EyeBall_R_Vetex += "' + self.EyeBall_R_Vetex[i] + '"')
            else:
                mel.eval('$fileData_EyeBall_R_Vetex += "\\n' + self.EyeBall_R_Vetex[i] + '"')

        mel.eval('fprint $fileId $fileData_EyeBall_L_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fprint $fileId $fileData_EyeBall_R_Vetex')
        mel.eval('fprint $fileId "\\n\\n"')
        mel.eval('fclose $fileId')

    def edit_menu_load_command(self, *args):
        mel.eval('$currentDir = `workspace -q -fn`')
        mel.eval('$dir = `workspace -dir $currentDir`')
        mel.eval('string $scnName = `file -q -ns`')
        mel.eval('$filePath=`fileDialog2 -fileMode 1 -startingDirectory $dir -caption "Facial set file path" -okCaption "Select"`')
        mel.eval('$exampleFileName = $filePath[0]')
        mel.eval('string $sub=""')
        mel.eval('$fileId=`fopen $exampleFileName "r"`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        self.topology_define_command()
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipCorner_L_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipCorner_L_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_corner_left_command()
        else:
            self.LipCorner_L_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipCorner_lower_L_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipCorner_lower_L_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_corner_lower_left_command()
        else:
            self.LipCorner_lower_L_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipCorner_R_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipCorner_R_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_corner_right_command()
        else:
            self.LipCorner_R_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipCorner_lower_R_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipCorner_lower_R_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_corner_lower_right_command()
        else:
            self.LipCorner_lower_R_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipUpper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipUpper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_upper_command()
        else:
            self.LipUpper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipLower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipLower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_lower_command()
        else:
            self.LipLower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipLower_Outer_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipLower_Outer_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_lower_outer_command()
        else:
            self.LipLower_Outer_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_L_UpperSide_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_L_UpperSide_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_left_upper_side_command()
        else:
            self.Lip_L_UpperSide_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_L_UpperSide_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_L_UpperSide_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_left_upper_side_02_command()
        else:
            self.Lip_L_UpperSide_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_L_UpperOuter_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_L_UpperOuter_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_left_upper_outer_command()
        else:
            self.Lip_L_UpperOuter_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_L_LowerSide_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_L_LowerSide_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_left_lower_side_command()
        else:
            self.Lip_L_LowerSide_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_L_LowerSide_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_L_LowerSide_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_left_lower_side_02_command()
        else:
            self.Lip_L_LowerSide_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_L_LowerOuter_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_L_LowerOuter_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_left_lower_outer_command()
        else:
            self.Lip_L_LowerOuter_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_R_UpperSide_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_R_UpperSide_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_right_upper_side_command()
        else:
            self.Lip_R_UpperSide_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_R_UpperSide_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_R_UpperSide_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_right_upper_side_02_command()
        else:
            self.Lip_R_UpperSide_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_R_UpperOuter_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_R_UpperOuter_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_right_upper_outer_command()
        else:
            self.Lip_R_UpperOuter_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_R_LowerSide_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_R_LowerSide_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_right_lower_side_command()
        else:
            self.Lip_R_LowerSide_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_R_LowerSide_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_R_LowerSide_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_right_lower_side_02_command()
        else:
            self.Lip_R_LowerSide_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_R_LowerOuter_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_R_LowerOuter_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_right_lower_outer_command()
        else:
            self.Lip_R_LowerOuter_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipUpVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipUpVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_topology_up_command()
        else:
            self.LipUpVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--LipDownVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "LipDownVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_topology_down_command()
        else:
            self.LipDownVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Lip_Jaw_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Lip_Jaw_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.lip_jaw_command()
        else:
            self.Lip_Jaw_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--JawVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "JawVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.jaw_topology_command()
        else:
            self.JawVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_blink_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_blink_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_blink_command()
        else:
            self.Eye_L_blink_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_blink_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_blink_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_blink_command()
        else:
            self.Eye_R_blink_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_lower_command()
        else:
            self.Eye_L_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_lower_command()
        else:
            self.Eye_R_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_lacrimal_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_lacrimal_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_lacrimal_command()
        else:
            self.Eye_L_lacrimal_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_lacrimal_upper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_lacrimal_upper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_lacrimal_upper_command()
        else:
            self.Eye_L_lacrimal_upper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_lacrimal_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_lacrimal_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_lacrimal_lower_command()
        else:
            self.Eye_L_lacrimal_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_lacrimal_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_lacrimal_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_lacrimal_command()
        else:
            self.Eye_R_lacrimal_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_lacrimal_upper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_lacrimal_upper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_lacrimal_upper_command()
        else:
            self.Eye_R_lacrimal_upper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_lacrimal_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_lacrimal_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_lacrimal_lower_command()
        else:
            self.Eye_R_lacrimal_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_back_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_back_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_back_command()
        else:
            self.Eye_L_back_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_back_upper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_back_upper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_back_upper_command()
        else:
            self.Eye_L_back_upper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_back_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_back_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_back_lower_command()
        else:
            self.Eye_L_back_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_L_double_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_L_double_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_left_double_command()
        else:
            self.Eye_L_double_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_back_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_back_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_back_command()
        else:
            self.Eye_R_back_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_back_upper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_back_upper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_back_upper_command()
        else:
            self.Eye_R_back_upper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_back_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_back_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_back_lower_command()
        else:
            self.Eye_R_back_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Eye_R_double_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Eye_R_double_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_right_double_command()
        else:
            self.Eye_R_double_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--EyeLVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "EyeLVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_topology_left_command()
        else:
            self.EyeLVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--EyeRVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "EyeRVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_topology_right_command()
        else:
            self.EyeRVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_L_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_L_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_left_command()
        else:
            self.Cheek_L_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_L_upper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_L_upper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_left_upper_command()
        else:
            self.Cheek_L_upper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_L_outer_orbicularis_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_L_outer_orbicularis_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_left_outer_orbicularis_command()
        else:
            self.Cheek_L_outer_orbicularis_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_L_inner_orbicularis_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_L_inner_orbicularis_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_left_inner_orbicularis_command()
        else:
            self.Cheek_L_inner_orbicularis_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_L_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_L_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_left_lower_command()
        else:
            self.Cheek_L_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_L_lip_lid_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_L_lip_lid_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_left_lip_lid_command()
        else:
            self.Cheek_L_lip_lid_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_R_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_R_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_right_command()
        else:
            self.Cheek_R_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_R_upper_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_R_upper_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_right_upper_command()
        else:
            self.Cheek_R_upper_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_R_outer_orbicularis_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_R_outer_orbicularis_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_right_outer_orbicularis_command()
        else:
            self.Cheek_R_outer_orbicularis_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_R_inner_orbicularis_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_R_inner_orbicularis_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_right_inner_orbicularis_command()
        else:
            self.Cheek_R_inner_orbicularis_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_R_lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_R_lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_right_lower_command()
        else:
            self.Cheek_R_lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Cheek_R_lip_lid_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Cheek_R_lip_lid_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_right_lip_lid_command()
        else:
            self.Cheek_R_lip_lid_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--CheekLVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "CheekLVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_topology_left_command()
        else:
            self.CheekLVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--CheekRVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "CheekRVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.cheek_topology_right_command()
        else:
            self.CheekRVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_L_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_L_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_left_command()
        else:
            self.Nose_L_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_L_nasalis_transverse_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_L_nasalis_transverse_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_left_nasalis_transverse_command()
        else:
            self.Nose_L_nasalis_transverse_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_L_procerus_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_L_procerus_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_left_procerus_command()
        else:
            self.Nose_L_procerus_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_L_nasolabial_fold_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_L_nasolabial_fold_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_left_nasolabial_fold_command()
        else:
            self.Nose_L_nasolabial_fold_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_R_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_R_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_right_command()
        else:
            self.Nose_R_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_R_nasalis_transverse_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_R_nasalis_transverse_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_right_nasalis_transverse_command()
        else:
            self.Nose_R_nasalis_transverse_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_R_procerus_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_R_procerus_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_right_procerus_command()
        else:
            self.Nose_R_procerus_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_R_nasolabial_fold_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_R_nasolabial_fold_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_right_nasolabial_fold_command()
        else:
            self.Nose_R_nasolabial_fold_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_Center_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_Center_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_center_command()
        else:
            self.Nose_Center_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_Lower_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_Lower_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_lower_command()
        else:
            self.Nose_Lower_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Nose_depressor_septi_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Nose_depressor_septi_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_depressor_septi_command()
        else:
            self.Nose_depressor_septi_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--NoseVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "NoseVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.nose_topology_command()
        else:
            self.NoseVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_L_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_L_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_left_command()
        else:
            self.Brow_L_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_L_medial_fibers_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_L_medial_fibers_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_left_medial_fibers_command()
        else:
            self.Brow_L_medial_fibers_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_L_lateral_fibers_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_L_lateral_fibers_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_left_lateral_fibers_command()
        else:
            self.Brow_L_lateral_fibers_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_L_procerus_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_L_procerus_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_left_procerus_command()
        else:
            self.Brow_L_procerus_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_R_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_R_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_right_command()
        else:
            self.Brow_R_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_R_medial_fibers_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_R_medial_fibers_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_right_medial_fibers_command()
        else:
            self.Brow_R_medial_fibers_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_R_lateral_fibers_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_R_lateral_fibers_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_right_lateral_fibers_command()
        else:
            self.Brow_R_lateral_fibers_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_R_procerus_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_R_procerus_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_right_procerus_command()
        else:
            self.Brow_R_procerus_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_L_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_L_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_left_02_command()
        else:
            self.Brow_L_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_R_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_R_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_right_02_command()
        else:
            self.Brow_R_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_L_03_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_L_03_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_left_03_command()
        else:
            self.Brow_L_03_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_R_03_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_R_03_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_right_03_command()
        else:
            self.Brow_R_03_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Brow_Center_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Brow_Center_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_center_command()
        else:
            self.Brow_Center_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--BrowLVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "BrowLVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_topology_left_command()
        else:
            self.BrowLVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--BrowRVetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "BrowRVetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.brow_topology_right_command()
        else:
            self.BrowRVetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Oral_Upper_teeth_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Oral_Upper_teeth_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.oral_upper_teeth_command()
        else:
            self.Oral_Upper_teeth_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Oral_Lower_teeth_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Oral_Lower_teeth_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.oral_lower_teeth_command()
        else:
            self.Oral_Lower_teeth_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Oral_Tongue_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Oral_Tongue_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.oral_tongue_command()
        else:
            self.Oral_Tongue_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Oral_Tongue_02_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Oral_Tongue_02_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.oral_tongue_02_command()
        else:
            self.Oral_Tongue_02_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--Oral_Tongue_03_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "Oral_Tongue_03_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.oral_tongue_03_command()
        else:
            self.Oral_Tongue_03_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--EyeBall_L_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "EyeBall_L_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_ball_left_command()
        else:
            self.EyeBall_L_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        cmds.select(cl=True)
        mel.eval(
            'if ($nextLine == "--EyeBall_R_Vetex--\\n"){' + '$nextLine = `fgetline $fileId`;' + 'while ( size( $nextLine ) > 0 ) {' + 'if ($nextLine != "\\n"){' + 'select -add $nextLine;\n}' + 'else {print "EyeBall_R_Vetex EndValue\\n"; break;}' + '$nextLine = `fgetline $fileId`;' + '}}')
        if len(cmds.ls(sl=True)) != 0:
            self.eye_ball_right_command()
        else:
            self.EyeBall_R_Vetex = ''
            mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('string $nextLine = `fgetline $fileId`')
        mel.eval('fclose $fileId')

    def picker_command(self, *args):
        import Facial_Picker
        importlib.reload(Facial_Picker)
        from Facial_Picker import Facial_Picker_window
        Facial_Picker_window.main()
        print('call Picker')

    def attach_neck_command(self, *args):
        cmds.select(cl=True)
        self.Neck_pathTemp = self.ui.Neck_pathText.text()
        if cmds.objExists('Root_Skin_Neck_Bone'):
            if cmds.objExists('Root_Skin_Neck_Bone_parentConstraint1'):
                cmds.delete('Root_Skin_Neck_Bone_parentConstraint1')
            if cmds.objExists('Facial_Master_Ctrl_grp_parentConstraint1'):
                cmds.delete('Facial_Master_Ctrl_grp_parentConstraint1')
        else:
            cmds.duplicate(self.Neck_pathTemp, n='Root_Skin_Neck_Bone')
            cmds.select('Root_Skin_Neck_Bone', hi=True)
            cmds.select('Root_Skin_Neck_Bone', d=True)
            cmds.delete()
            if cmds.listRelatives('Root_Skin_Neck_Bone', p=True) is not None:
                cmds.parent('Root_Skin_Neck_Bone', w=True)
            skin_neck_parent = cmds.listRelatives('Root_Skin_Neck_Bone', parent=True)
            if skin_neck_parent is not None:
                cmds.select(skin_neck_parent[0])
                cmds.makeIdentity(apply=True, t=True, r=False, s=True, pn=True)
                cmds.parent('Root_Skin_Neck_Bone', w=True)
                cmds.delete(skin_neck_parent[0])
            cmds.makeIdentity('Root_Skin_Neck_Bone', apply=True, s=True, pn=True)
        if [u'Root_Skin_Neck_Bone'] == cmds.listRelatives('Facial_Master_Ctrl_grp', parent=True):
            pass
        else:
            cmds.parent('Facial_Master_Ctrl_grp', 'Root_Skin_Neck_Bone')
        Head_child = cmds.listRelatives(self.Neck_pathTemp, c=True, pa=True)
        cmds.select('Facial_Master_Ctrl_grp', Head_child, add=True)
        sel = cmds.ls(sl=True)
        position = cmds.xform(sel[1], q=True, ws=True, rp=True)
        cmds.xform(sel[0], ws=True, rp=position, piv=position)
        cmds.select(cl=True)
        cmds.select('Facial_Master_Ctrl', Head_child, add=True)
        sel = cmds.ls(sl=True)
        position = cmds.xform(sel[1], q=True, ws=True, rp=True)
        cmds.xform(sel[0], ws=True, rp=position, piv=position)
        cmds.select(cl=True)
        clusters = cmds.ls(type='skinCluster')
        for c in clusters:
            mel.eval('skinCluster -e -moveJointsMode 1 ' + c)

        cmds.select(cl=True)
        cmds.select('Root_Skin_Neck_Bone', self.Neck_pathTemp, add=True)
        sel = cmds.ls(sl=True)
        rotation = cmds.xform(sel[1], q=True, ro=True)
        cmds.xform(sel[0], ro=rotation)
        cmds.select(cl=True)
        if cmds.objExists(SKIN_HEAD_MASTER_JOINT_NAME + '_parentConstraint1'):
            cmds.delete(SKIN_HEAD_MASTER_JOINT_NAME + '_parentConstraint1')
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, Head_child, add=True)
        sel = cmds.ls(sl=True)
        Position = cmds.xform(sel[1], ws=True, q=True, t=True)
        cmds.xform(sel[0], ws=True, t=Position)
        cmds.select(cl=True)
        for c in clusters:
            mel.eval('skinCluster -e -moveJointsMode 0 ' + c)

        if cmds.objExists('Root_Skin_Neck_Bone_parentConstraint1'):
            pass
        else:
            cmds.parentConstraint(self.Neck_pathTemp, 'Root_Skin_Neck_Bone', mo=True)
        if cmds.objExists('Facial_Master_Ctrl_grp_parentConstraint1'):
            pass
        else:
            cmds.parentConstraint(Head_child, 'Facial_Master_Ctrl_grp', mo=True)
        if cmds.objExists('Neck_value') is False:
            cmds.duplicate('Root_Skin_Neck_Bone', po=True, n='Neck_value')
        if cmds.objExists('Head_value') is False:
            cmds.duplicate('Facial_Master_Ctrl_grp', po=True, n='Head_value')
        if cmds.objExists('Facial_Initial_Pose_Val_grp') is False:
            cmds.group(em=True, n='Facial_Initial_Pose_Val_grp')
            cmds.parent('Facial_Initial_Pose_Val_grp', 'Facial_Master_Ctrl_grp')
        neck_parent = cmds.listRelatives('Neck_value', p=True)
        if neck_parent is None:
            cmds.parent('Neck_value', 'Facial_Initial_Pose_Val_grp')
        head_parent = cmds.listRelatives('Head_value', p=True)
        if head_parent[0] != 'Neck_value':
            cmds.parent('Head_value', 'Neck_value')
        return

    def copy_neck_skin_command(self, *args):
        self.Neck_pathTemp = self.ui.Neck_pathText.text()
        MeshSel = cmds.ls(sl=True)
        cmds.select(cl=True)
        if cmds.objExists('Root_Skin_Neck_Bone'):
            Update_Skin = mel.eval('findRelatedSkinCluster ' + MeshSel[1])
            cmds.skinCluster(Update_Skin, edit=True, dr=0.1, ps=0, ns=1, lw=True, wt=0, ai='Root_Skin_Neck_Bone')
            cmds.setAttr('Root_Skin_Neck_Bone.liw', 0)
            cmds.select(cl=True)
            OG_Skin = mel.eval('findRelatedSkinCluster ' + MeshSel[0])
            cmds.skinCluster(OG_Skin, edit=True, siv=self.Neck_pathTemp)
            important_var = cmds.ls(sl=True)
            cmds.select(cl=True)
            for each in important_var:
                vertex_weight = cmds.skinPercent(OG_Skin, each, transform=self.Neck_pathTemp, query=True)
                if vertex_weight > 0.4:
                    cmds.select(each, add=True)
                else:
                    cmds.select(each, d=True)

            cmds.sets(n='OG_Set')
            count = len(MeshSel[0])
            cmds.select('OG_Set', hi=True)
            vertex_sel = cmds.ls(sl=True)
            cmds.select(cl=True)
            for each in vertex_sel:
                vertex_num = each[count:]
                cmds.select(MeshSel[1] + vertex_num, add=True)

            cmds.sets(n='New_Set')
            cmds.select(cl=True)
            cmds.copySkinWeights('OG_Set', 'New_Set', nm=True)
            if cmds.objExists(SKIN_JAW_MASTER_JOINT_NAME):
                cmds.skinCluster(Update_Skin, edit=True, siv=SKIN_JAW_MASTER_JOINT_NAME)
            else:
                cmds.skinCluster(Update_Skin, edit=True, siv='Root_Skin_Neck_Bone')
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            currOp = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=1, selectedattroper=1)
            currValue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=1, value=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1)
            mel.eval('artSkinInflListChanging "Root_Skin_Neck_Bone" 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            if cmds.objExists(SKIN_JAW_MASTER_JOINT_NAME):
                cmds.skinCluster(Update_Skin, edit=True, siv='Root_Skin_Neck_Bone')
                mel.eval('artSkinInflListChanging "Skin_Jaw_master_jnt" 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)
            cmds.skinCluster(Update_Skin, edit=True, siv=SKIN_HEAD_MASTER_JOINT_NAME)
            mel.eval('artSkinInflListChanging "Root_Skin_Neck_Bone" 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Root_Skin_Neck_Bone', clear=1)
            cmds.skinCluster(Update_Skin, edit=True, siv='Root_Skin_Neck_Bone')
            mel.eval('artSkinInflListChanging ' + SKIN_HEAD_MASTER_JOINT_NAME + ' 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, selectedattroper=currOp)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, value=currValue)
            cmds.delete('New_Set', 'OG_Set')
        else:
            print("Please click the 'Attach Neck Hierarchy' Button first!")

    def set_to_bind_command(self, *args):
        MeshSel = cmds.ls(sl=True)
        if len(MeshSel) != 0:
            for each in MeshSel:
                OG_Name = each
                OG_Skin = mel.eval('findRelatedSkinCluster ' + each)
                max_inf = cmds.skinCluster(OG_Skin, q=True, mi=True)
                if OG_Skin == '':
                    QtWidgets.QMessageBox.warning(None, 'Warning', 'Please select the Skin mesh!')
                    cmds.error('Please select the Skin mesh!')
                cmds.duplicate(each, n='CopyMesh')
                Skin_joint = cmds.skinCluster(OG_Skin, q=True, inf=True)
                cmds.select(Skin_joint)
                cmds.select('CopyMesh', add=True)
                cmds.skinCluster(tsb=True, dr=4, mi=max_inf, omi=True)
                cmds.select(cl=True)
                New_Skin = mel.eval('findRelatedSkinCluster CopyMesh')
                cmds.copySkinWeights(ss=OG_Skin, ds=New_Skin, nm=True)
                cmds.delete(each)
                cmds.rename('CopyMesh', OG_Name)
                cmds.select(each)
                mel.eval('removeUnusedInfluences')
                cmds.rename(New_Skin, OG_Skin)
                print(each + ' current position is set to Bind Pose')

        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select the Mesh which you want to Reset BindPose!')
            cmds.error('Please Select the Mesh which you want to Reset BindPose!')
        return

    # Issue
    def ready_to_export_command(self, *args):
        with UndoContext():
            TimeStart_before = self.ui.TimeStart_pathText.text()
            TimeStart_pathTemp = self.ui.TimeStart_pathText.text()
            TimeEnd_pathTemp = self.ui.TimeEnd_pathText.text()
            Export_Sel = cmds.ls(sl=True)
            if 0 < len(Export_Sel) < 2:
                if Export_Sel[0] == 'Root_Skin_Neck_Bone' or cmds.ls('*:Root_Skin_Neck_Bone', sl=True) or Export_Sel[0] == 'Facial_Master_Ctrl_grp' or cmds.ls('*:Facial_Master_Ctrl_grp', sl=True):
                    cmds.currentTime(TimeStart_pathTemp, edit=True)
                    if cmds.objExists('Facial_Set_Ctrl'):
                        cmds.setAttr('Facial_Set_Ctrl.Joint_Visible', 1)
                    if cmds.ls('*:Root_Skin_Neck_Bone', sl=True) or cmds.ls('*:Facial_Master_Ctrl_grp', sl=True):
                        cmds.select(Export_Sel[0])
                        cmds.duplicate(rr=True, ic=True)
                        if cmds.objExists('Root_Skin_Neck_Bone'):
                            mel.eval('source channelBoxCommand; CBdeleteConnection "Root_Skin_Neck_Bone.tx";')
                            mel.eval('CBdeleteConnection "Root_Skin_Neck_Bone.ty";')
                            mel.eval('CBdeleteConnection "Root_Skin_Neck_Bone.tz";')
                            mel.eval('CBdeleteConnection "Root_Skin_Neck_Bone.rx";')
                            mel.eval('CBdeleteConnection "Root_Skin_Neck_Bone.ry";')
                            mel.eval('CBdeleteConnection "Root_Skin_Neck_Bone.rz";')
                            mel.eval('CBdeleteConnection "Facial_Master_Ctrl_grp.tx";')
                            mel.eval('CBdeleteConnection "Facial_Master_Ctrl_grp.ty";')
                            mel.eval('CBdeleteConnection "Facial_Master_Ctrl_grp.tz";')
                            mel.eval('CBdeleteConnection "Facial_Master_Ctrl_grp.rx";')
                            mel.eval('CBdeleteConnection "Facial_Master_Ctrl_grp.ry";')
                            mel.eval('CBdeleteConnection "Facial_Master_Ctrl_grp.rz";')
                        name_space = Export_Sel[0].split(':')[0]
                        if cmds.objExists(name_space + ':Facial_Set_Ctrl'):
                            cmds.setAttr(name_space + ':Facial_Set_Ctrl.Joint_Visible', 1)
                        facial_mesh_grp_name = name_space + FACIAL_MESH_GROUP_NAME
                        cmds.duplicate(facial_mesh_grp_name)
                        cmds.select(facial_mesh_grp_name, hi=True)
                        cmds.select(facial_mesh_grp_name, '*Shape*', d=True)
                        name_space_mesh = cmds.ls(sl=True)
                        Facial_Mesh_grp_parent = cmds.listRelatives(FACIAL_MESH_GROUP_NAME, p=True)
                        if Facial_Mesh_grp_parent is not None:
                            cmds.parent(FACIAL_MESH_GROUP_NAME, w=True)
                        cmds.select(cl=True)
                        cmds.select(FACIAL_MESH_GROUP_NAME, hi=True)
                        cmds.select(FACIAL_MESH_GROUP_NAME, '*Shape*', d=True)
                        Facial_geo_mesh = cmds.ls(sl=True)
                        cmds.select(cl=True)
                        if cmds.objExists('Root_Skin_Neck_Bone'):
                            for each in name_space_mesh:
                                for a in Facial_geo_mesh:
                                    each_mesh = each.split(':')[1]
                                    if a == each_mesh:
                                        OG_Skin = mel.eval('findRelatedSkinCluster ' + each)
                                        max_inf = cmds.skinCluster(OG_Skin, q=True, mi=True)
                                        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True)
                                        cmds.select('*parentConstraint*', d=True)
                                        cmds.select('Root_Skin_Neck_Bone', add=True)
                                        cmds.select(a, add=True)
                                        cmds.skinCluster(tsb=True, dr=4, mi=max_inf, omi=True)

                        else:
                            for each in name_space_mesh:
                                for a in Facial_geo_mesh:
                                    each_mesh = each.split(':')[1]
                                    if a == each_mesh:
                                        OG_Skin = mel.eval('findRelatedSkinCluster ' + each)
                                        max_inf = cmds.skinCluster(OG_Skin, q=True, mi=True)
                                        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True)
                                        cmds.select('*parentConstraint*', d=True)
                                        cmds.select(a, add=True)
                                        cmds.skinCluster(tsb=True, dr=4, mi=max_inf, omi=True)

                        for each in name_space_mesh:
                            for a in Facial_geo_mesh:
                                each_mesh = each.split(':')[1]
                                if a == each_mesh:
                                    OG_Skin = mel.eval('findRelatedSkinCluster ' + each)
                                    New_Skin = mel.eval('findRelatedSkinCluster ' + a)
                                    cmds.copySkinWeights(ss=OG_Skin, ds=New_Skin, nm=True)
                                    cmds.select(a)
                                    mel.eval('removeUnusedInfluences')

                    cmds.setAttr('Facial_Set_Ctrl.Joint_Visible', 1)
                    cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True)
                    cmds.select('*parentConstraint*', d=True)
                    head_joint_all = cmds.ls(sl=True)
                    if self.ui.UnrealCheckBox.isChecked() is True:
                        if cmds.objExists('Root_Skin_Neck_Bone'):
                            cmds.bakeResults(head_joint_all, t=(TimeStart_before, TimeEnd_pathTemp), simulation=True)
                        else:
                            cmds.bakeResults(head_joint_all, t=(TimeStart_pathTemp, TimeEnd_pathTemp), simulation=True)
                    else:
                        cmds.bakeResults(head_joint_all, t=(TimeStart_pathTemp, TimeEnd_pathTemp), simulation=True)
                    self.find_mult_matix_delete()
                    cmds.select(head_joint_all)
                    cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True, tgl=True)
                    cmds.delete()
                    cmds.parent('Skin_*_jnt', w=True)
                    if cmds.objExists('Brow*_expression'):
                        cmds.delete('Brow*_expression')
                    if cmds.objExists('Cheek*_expression'):
                        cmds.delete('Cheek*_expression')
                    if cmds.objExists('Eye*_expression'):
                        cmds.delete('Eye*_expression')
                    if cmds.objExists('Jaw*_expression'):
                        cmds.delete('Jaw*_expression')
                    if cmds.objExists('L_R_U*_expression'):
                        cmds.delete('L_R_U*_expression')
                    if cmds.objExists('Lip*_expression'):
                        cmds.delete('Lip*_expression')
                    if cmds.objExists('Nose*_expression'):
                        cmds.delete('Nose*_expression')
                    if cmds.objExists('Oral*_expression'):
                        cmds.delete('Oral*_expression')
                    if cmds.objExists('Upper*_expression'):
                        cmds.delete('Upper*_expression')
                    if cmds.objExists('Lower*_expression'):
                        cmds.delete('Lower*_expression')
                    if cmds.objExists('Side*_expression'):
                        cmds.delete('Side*_expression')
                    if cmds.objExists('Facial_Master_Ctrl_grp_parentConstraint1'):
                        cmds.delete('Facial_Master_Ctrl_grp_parentConstraint1')
                    if cmds.objExists('Root_Skin_Neck_Bone_parentConstraint1'):
                        cmds.delete('Root_Skin_Neck_Bone_parentConstraint1')
                    if [u'Facial_Master_Ctrl_grp'] == cmds.listRelatives('Facial_Skin_joint_grp', parent=True):
                        pass
                    else:
                        cmds.parent('Facial_Skin_joint_grp', 'Facial_Master_Ctrl_grp')
                    cmds.delete('Facial_Master_Ctrl')
                    if cmds.objExists('Eye_World_point_Loc_grp'):
                        cmds.delete('Eye_World_point_Loc_grp')
                    cmds.parent('Skin_*_jnt', 'Facial_Skin_joint_grp')
                    cmds.select('Skin_*_jnt')
                    cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, d=True)
                    cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, add=True)
                    cmds.parent()
                    if cmds.objExists('Root_Skin_Neck_Bone'):
                        cmds.parent(SKIN_HEAD_MASTER_JOINT_NAME, 'Root_Skin_Neck_Bone')
                    else:
                        head_parent = cmds.listRelatives('Facial_Master_Ctrl_grp', p=True)
                        if head_parent is not None:
                            cmds.parent(SKIN_HEAD_MASTER_JOINT_NAME, head_parent[0])
                            child_parent = cmds.listRelatives(SKIN_HEAD_MASTER_JOINT_NAME, p=True)
                            if child_parent[0] != head_parent[0]:
                                cmds.rename(child_parent[0], 'Facial_joint_grp')
                        else:
                            cmds.parent(SKIN_HEAD_MASTER_JOINT_NAME, w=True)
                    cmds.delete('Facial_Master_Ctrl_grp')
                    cmds.select(cl=True)
                    if cmds.objExists('Root_Skin_Neck_Bone'):
                        cmds.select('Root_Skin_Neck_Bone', hi=True)
                    else:
                        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True)
                    if self.ui.NameCheckBox.isChecked():
                        if cmds.objExists('Root_Skin_Neck_Bone'):
                            cmds.select('Root_Skin_Neck_Bone')
                        else:
                            cmds.select(SKIN_HEAD_MASTER_JOINT_NAME)
                        mel.eval('searchReplaceNames "Skin_" "" "hierarchy"')
                        mel.eval('searchReplaceNames "Root_" "" "hierarchy"')
                        cmds.select('L_*jnt')
                        mel.eval('searchReplaceNames "_jnt" "_jnt_l" "hierarchy"')
                        mel.eval('searchReplaceNames "L_" "" "hierarchy"')
                        cmds.select('R_*jnt')
                        mel.eval('searchReplaceNames "_jnt" "_jnt_r" "hierarchy"')
                        mel.eval('searchReplaceNames "R_" "" "hierarchy"')
                        cmds.select('*_jnt')
                        mel.eval('searchReplaceNames "_jnt" "" "hierarchy"')
                        cmds.rename('Head_master', 'head')
                        if cmds.objExists('Neck_Bone'):
                            cmds.rename('Neck_Bone', 'neck_01')
                else:
                    QtWidgets.QMessageBox.warning(None, 'Warning', "Please select the 'Root_Skin_Neck_Bone' Object! not the other one")
                    cmds.error("Please select the 'Root_Skin_Neck_Bone' Object! not the other one")
            elif 1 < len(Export_Sel):
                QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Only One Object!')
                cmds.error('Please Select Only One Object!')
            elif len(Export_Sel) < 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Please Select 'Root_Skin_Neck_Bone' or NameSpace:'Root_Skin_Neck_Bone'. You can choose one and select the 'Root_Skin_Neck_Bone' or 'Facial_Master_Ctrl_grp' object and click the button")
                cmds.error("Please Select 'Root_Skin_Neck_Bone' or NameSpace:'Root_Skin_Neck_Bone'. You can choose one and select the 'Root_Skin_Neck_Bone' or 'Facial_Master_Ctrl_grp' object and click the button")
        return

    def find_mult_matix_delete(self, *args):
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True)
        all_jnt = cmds.ls(sl=True)
        for each in all_jnt:
            multMat_node = cmds.listConnections(each, type='multMatrix')
            if multMat_node:
                cmds.delete(multMat_node)

    def create_joint_command(self, *args):
        self.create_joint()

    def connect_joint_command(self, *args):
        if len(self.head_joint) != 0:
            cmds.select('*_jnt')
            Label_sel = cmds.ls(selection=True)
            for each in Label_sel:
                print(each)
                cmds.parent(each, self.head_joint)
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Head Jointを選択してください!')
            return

    def create_rig_command(self, *args):
        self.create_controller()

    def label_command(self, *args):
        if cmds.objExists('FitScale_ctrl_grp'):
            if cmds.objExists('Facial_System_joint_grp'):
                print('you already generated Rig System')
            else:
                self.label_check()
        elif cmds.objExists('Facial_System_joint_grp'):
            print('you already generated Rig System')
        else:
            print('please Create Joint first!')

    def label_all_command(self, *args):
        if cmds.objExists('FitScale_ctrl_grp'):
            if cmds.objExists('Facial_System_joint_grp'):
                print('you already generated Rig System')
            else:
                cmds.select('*_jnt')
                self.label_check()
        elif cmds.objExists('Facial_System_joint_grp'):
            print('you already generated Rig System')
        else:
            print('please Create Joint first!')

    # lip left setup
    def lip_corner_left_first_popup_command(self, *args):
        if self.LipCorner_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_L_Vetex is not define!')
            cmds.error('self.LipCorner_L_Vetex is not define!')
        cmds.select(self.LipCorner_L_Vetex[0])
        return

    def lip_corner_left_all_popup_command(self, *args):
        if self.LipCorner_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_L_Vetex is not define!')
            cmds.error('self.LipCorner_L_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipCorner_L_Vetex)
        cmds.select(self.LipCorner_L_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipCorner_L_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipCorner_L_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_corner_left_reset_popup_command(self, *args):
        self.LipCorner_L_Vetex = ''
        self.TopolDefine_window.LipCorner_L_Btn.setStyleSheet(self.red_color)

    def lip_corner_lower_left_first_popup_command(self, *args):
        if self.LipCorner_lower_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_lower_L_Vetex is not define!')
            cmds.error('self.LipCorner_lower_L_Vetex is not define!')
        cmds.select(self.LipCorner_lower_L_Vetex[0])
        return

    def lip_corner_lower_left_all_popup_command(self, *args):
        if self.LipCorner_lower_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_lower_L_Vetex is not define!')
            cmds.error('self.LipCorner_lower_L_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipCorner_lower_L_Vetex)
        cmds.select(self.LipCorner_lower_L_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipCorner_lower_L_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipCorner_lower_L_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_corner_lower_left_reset_popup_command(self, *args):
        self.LipCorner_lower_L_Vetex = ''
        self.TopolDefine_window.LipCorner_lower_L_Btn.setStyleSheet(self.red_color)

    # lip right setup
    def lip_corner_right_first_popup_command(self, *args):
        if self.LipCorner_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_R_Vetex is not define!')
            cmds.error('self.LipCorner_R_Vetex is not define!')
        cmds.select(self.LipCorner_R_Vetex[0])
        return

    def lip_corner_right_all_popup_command(self, *args):
        if self.LipCorner_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_R_Vetex is not define!')
            cmds.error('self.LipCorner_R_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipCorner_R_Vetex)
        cmds.select(self.LipCorner_R_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipCorner_R_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipCorner_R_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_corner_right_reset_popup_command(self, *args):
        self.LipCorner_R_Vetex = ''
        self.TopolDefine_window.LipCorner_R_Btn.setStyleSheet(self.red_color)

    def lip_corner_lower_right_first_popup_command(self, *args):
        if self.LipCorner_lower_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_lower_R_Vetex is not define!')
            cmds.error('self.LipCorner_lower_R_Vetex is not define!')
        cmds.select(self.LipCorner_lower_R_Vetex[0])
        return

    def lip_corner_lower_right_all_popup_command(self, *args):
        if self.LipCorner_lower_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipCorner_lower_R_Vetex is not define!')
            cmds.error('self.LipCorner_lower_R_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipCorner_lower_R_Vetex)
        cmds.select(self.LipCorner_lower_R_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipCorner_lower_R_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipCorner_lower_R_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_corner_lower_right_reset_popup_command(self, *args):
        self.LipCorner_lower_R_Vetex = ''
        self.TopolDefine_window.LipCorner_lower_R_Btn.setStyleSheet(self.red_color)

    # lip first setup
    def lip_upper_first_popup_command(self, *args):
        if self.LipUpper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipUpper_Vetex is not define!')
            cmds.error('self.LipUpper_Vetex is not define!')
        cmds.select(self.LipUpper_Vetex[0])
        return

    def lip_upper_all_popup_command(self, *args):
        if self.LipUpper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipUpper_Vetex is not define!')
            cmds.error('self.LipUpper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipUpper_Vetex)
        cmds.select(self.LipUpper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipUpper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipUpper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_upper_reset_popup_command(self, *args):
        self.LipUpper_Vetex = ''
        self.TopolDefine_window.LipUpper_Btn.setStyleSheet(self.red_color)

    def lip_lower_first_popup_command(self, *args):
        if self.LipLower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipLower_Vetex is not define!')
            cmds.error('self.LipLower_Vetex is not define!')
        cmds.select(self.LipLower_Vetex[0])
        return

    def lip_lower_all_popup_command(self, *args):
        if self.LipLower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipLower_Vetex is not define!')
            cmds.error('self.LipLower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipLower_Vetex)
        cmds.select(self.LipLower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipLower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipLower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_lower_reset_popup_command(self, *args):
        self.LipLower_Vetex = ''
        self.TopolDefine_window.LipLower_Btn.setStyleSheet(self.red_color)

    def lip_lower_outer_first_popup_command(self, *args):
        if self.LipLower_Outer_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipLower_Outer_Vetex is not define!')
            cmds.error('self.LipLower_Outer_Vetex is not define!')
        cmds.select(self.LipLower_Outer_Vetex[0])
        return

    def lip_lower_outer_all_popup_command(self, *args):
        if self.LipLower_Outer_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipLower_Outer_Vetex is not define!')
            cmds.error('self.LipLower_Outer_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipLower_Outer_Vetex)
        cmds.select(self.LipLower_Outer_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipLower_Outer_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipLower_Outer_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_lower_outer_reset_popup_command(self, *args):
        self.LipLower_Outer_Vetex = ''
        self.TopolDefine_window.LipLower_Outer_Btn.setStyleSheet(self.red_color)

    def lip_left_upper_side_first_popup_command(self, *args):
        if self.Lip_L_UpperSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_UpperSide_Vetex is not define!')
            cmds.error('self.Lip_L_UpperSide_Vetex is not define!')
        cmds.select(self.Lip_L_UpperSide_Vetex[0])
        return

    def lip_left_upper_side_all_popup_command(self, *args):
        if self.Lip_L_UpperSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_UpperSide_Vetex is not define!')
            cmds.error('self.Lip_L_UpperSide_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_L_UpperSide_Vetex)
        cmds.select(self.Lip_L_UpperSide_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_L_UpperSide_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_L_UpperSide_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_left_upper_side_reset_popup_command(self, *args):
        self.Lip_L_UpperSide_Vetex = ''
        self.TopolDefine_window.Lip_L_UpperSide_Btn.setStyleSheet(self.red_color)

    def lip_left_upper_side_02_first_popup_command(self, *args):
        if self.Lip_L_UpperSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_UpperSide_02_Vetex is not define!')
            cmds.error('self.Lip_L_UpperSide_02_Vetex is not define!')
        cmds.select(self.Lip_L_UpperSide_02_Vetex[0])
        return

    def lip_left_upper_side_02_all_popup_command(self, *args):
        if self.Lip_L_UpperSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_UpperSide_02_Vetex is not define!')
            cmds.error('self.Lip_L_UpperSide_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_L_UpperSide_02_Vetex)
        cmds.select(self.Lip_L_UpperSide_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_L_UpperSide_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_L_UpperSide_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_left_upper_side_02_reset_popup_command(self, *args):
        self.Lip_L_UpperSide_02_Vetex = ''
        self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setStyleSheet(self.red_color)

    def lip_left_upper_outer_first_popup_command(self, *args):
        if self.Lip_L_UpperOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_UpperOuter_Vetex is not define!')
            cmds.error('self.Lip_L_UpperOuter_Vetex is not define!')
        cmds.select(self.Lip_L_UpperOuter_Vetex[0])
        return

    def lip_left_upper_outer_all_popup_command(self, *args):
        if self.Lip_L_UpperOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_UpperOuter_Vetex is not define!')
            cmds.error('self.Lip_L_UpperOuter_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_L_UpperOuter_Vetex)
        cmds.select(self.Lip_L_UpperOuter_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_L_UpperOuter_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_L_UpperOuter_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_left_upper_outer_reset_popup_command(self, *args):
        self.Lip_L_UpperOuter_Vetex = ''
        self.TopolDefine_window.Lip_L_UpperOuter_Btn.setStyleSheet(self.red_color)

    def lip_left_lower_side_first_popup_command(self, *args):
        if self.Lip_L_LowerSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_LowerSide_Vetex is not define!')
            cmds.error('self.Lip_L_LowerSide_Vetex is not define!')
        cmds.select(self.Lip_L_LowerSide_Vetex[0])
        return

    def lip_left_lower_side_all_popup_command(self, *args):
        if self.Lip_L_LowerSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_LowerSide_Vetex is not define!')
            cmds.error('self.Lip_L_LowerSide_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_L_LowerSide_Vetex)
        cmds.select(self.Lip_L_LowerSide_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_L_LowerSide_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_L_LowerSide_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_left_lower_side_reset_popup_command(self, *args):
        self.Lip_L_LowerSide_Vetex = ''
        self.TopolDefine_window.Lip_L_LowerSide_Btn.setStyleSheet(self.red_color)

    def lip_left_lower_side_02_first_popup_command(self, *args):
        if self.Lip_L_LowerSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_LowerSide_02_Vetex is not define!')
            cmds.error('self.Lip_L_LowerSide_02_Vetex is not define!')
        cmds.select(self.Lip_L_LowerSide_02_Vetex[0])
        return

    def lip_left_lower_side_02_all_popup_command(self, *args):
        if self.Lip_L_LowerSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_LowerSide_02_Vetex is not define!')
            cmds.error('self.Lip_L_LowerSide_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_L_LowerSide_02_Vetex)
        cmds.select(self.Lip_L_LowerSide_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_L_LowerSide_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_L_LowerSide_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_left_lower_side_02_reset_popup_command(self, *args):
        self.Lip_L_LowerSide_02_Vetex = ''
        self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setStyleSheet(self.red_color)

    def lip_left_lower_outer_first_popup_command(self, *args):
        if self.Lip_L_LowerOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_LowerOuter_Vetex is not define!')
            cmds.error('self.Lip_L_LowerOuter_Vetex is not define!')
        cmds.select(self.Lip_L_LowerOuter_Vetex[0])
        return

    def lip_left_lower_outer_all_popup_command(self, *args):
        if self.Lip_L_LowerOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_L_LowerOuter_Vetex is not define!')
            cmds.error('self.Lip_L_LowerOuter_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_L_LowerOuter_Vetex)
        cmds.select(self.Lip_L_LowerOuter_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_L_LowerOuter_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_L_LowerOuter_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_left_lower_outer_reset_popup_command(self, *args):
        self.Lip_L_LowerOuter_Vetex = ''
        self.TopolDefine_window.Lip_L_LowerOuter_Btn.setStyleSheet(self.red_color)

    def lip_right_upper_side_first_popup_command(self, *args):
        if self.Lip_R_UpperSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_UpperSide_Vetex is not define!')
            cmds.error('self.Lip_R_UpperSide_Vetex is not define!')
        cmds.select(self.Lip_R_UpperSide_Vetex[0])
        return

    def lip_right_upper_side_all_popup_command(self, *args):
        if self.Lip_R_UpperSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_UpperSide_Vetex is not define!')
            cmds.error('self.Lip_R_UpperSide_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_R_UpperSide_Vetex)
        cmds.select(self.Lip_R_UpperSide_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_R_UpperSide_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_R_UpperSide_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_right_upper_side_reset_popup_command(self, *args):
        self.Lip_R_UpperSide_Vetex = ''
        self.TopolDefine_window.Lip_R_UpperSide_Btn.setStyleSheet(self.red_color)

    def lip_right_upper_side_02_first_popup_command(self, *args):
        if self.Lip_R_UpperSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_UpperSide_02_Vetex is not define!')
            cmds.error('self.Lip_R_UpperSide_02_Vetex is not define!')
        cmds.select(self.Lip_R_UpperSide_02_Vetex[0])
        return

    def lip_right_upper_side_02_all_popup_command(self, *args):
        if self.Lip_R_UpperSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_UpperSide_02_Vetex is not define!')
            cmds.error('self.Lip_R_UpperSide_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_R_UpperSide_02_Vetex)
        cmds.select(self.Lip_R_UpperSide_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_R_UpperSide_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_R_UpperSide_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_right_upper_side_02_reset_popup_command(self, *args):
        self.Lip_R_UpperSide_02_Vetex = ''
        self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setStyleSheet(self.red_color)

    def lip_right_upper_outer_first_popup_command(self, *args):
        if self.Lip_R_UpperOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_UpperOuter_Vetex is not define!')
            cmds.error('self.Lip_R_UpperOuter_Vetex is not define!')
        cmds.select(self.Lip_R_UpperOuter_Vetex[0])
        return

    def lip_right_upper_outer_all_popup_command(self, *args):
        if self.Lip_R_UpperOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_UpperOuter_Vetex is not define!')
            cmds.error('self.Lip_R_UpperOuter_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_R_UpperOuter_Vetex)
        cmds.select(self.Lip_R_UpperOuter_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_R_UpperOuter_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_R_UpperOuter_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_right_upper_outer_reset_popup_command(self, *args):
        self.Lip_R_UpperOuter_Vetex = ''
        self.TopolDefine_window.Lip_R_UpperOuter_Btn.setStyleSheet(self.red_color)

    def lip_right_lower_side_first_popup_command(self, *args):
        if self.Lip_R_LowerSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_LowerSide_Vetex is not define!')
            cmds.error('self.Lip_R_LowerSide_Vetex is not define!')
        cmds.select(self.Lip_R_LowerSide_Vetex[0])
        return

    def lip_right_lower_side_all_popup_command(self, *args):
        if self.Lip_R_LowerSide_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_LowerSide_Vetex is not define!')
            cmds.error('self.Lip_R_LowerSide_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_R_LowerSide_Vetex)
        cmds.select(self.Lip_R_LowerSide_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_R_LowerSide_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_R_LowerSide_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_right_lower_side_reset_popup_command(self, *args):
        self.Lip_R_LowerSide_Vetex = ''
        self.TopolDefine_window.Lip_R_LowerSide_Btn.setStyleSheet(self.red_color)

    def lip_right_lower_side_02_first_popup_command(self, *args):
        if self.Lip_R_LowerSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_LowerSide_02_Vetex is not define!')
            cmds.error('self.Lip_R_LowerSide_02_Vetex is not define!')
        cmds.select(self.Lip_R_LowerSide_02_Vetex[0])
        return

    def lip_right_lower_side_02_all_popup_command(self, *args):
        if self.Lip_R_LowerSide_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_LowerSide_02_Vetex is not define!')
            cmds.error('self.Lip_R_LowerSide_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_R_LowerSide_02_Vetex)
        cmds.select(self.Lip_R_LowerSide_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_R_LowerSide_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_R_LowerSide_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_right_lower_side_02_reset_popup_command(self, *args):
        self.Lip_R_LowerSide_02_Vetex = ''
        self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setStyleSheet(self.red_color)

    def lip_right_lower_outer_first_popup_command(self, *args):
        if self.Lip_R_LowerOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_LowerOuter_Vetex is not define!')
            cmds.error('self.Lip_R_LowerOuter_Vetex is not define!')
        cmds.select(self.Lip_R_LowerOuter_Vetex[0])
        return

    def lip_right_lower_outer_all_popup_command(self, *args):
        if self.Lip_R_LowerOuter_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_R_LowerOuter_Vetex is not define!')
            cmds.error('self.Lip_R_LowerOuter_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_R_LowerOuter_Vetex)
        cmds.select(self.Lip_R_LowerOuter_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_R_LowerOuter_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_R_LowerOuter_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_right_lower_outer_reset_popup_command(self, *args):
        self.Lip_R_LowerOuter_Vetex = ''
        self.TopolDefine_window.Lip_R_LowerOuter_Btn.setStyleSheet(self.red_color)

    # todo jaw setup
    def lip_jaw_first_popup_command(self, *args):
        if self.Lip_Jaw_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_Jaw_Vetex is not define!')
            cmds.error('self.Lip_Jaw_Vetex is not define!')
        cmds.select(self.Lip_Jaw_Vetex[0])
        return

    def lip_jaw_all_popup_command(self, *args):
        if self.Lip_Jaw_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Lip_Jaw_Vetex is not define!')
            cmds.error('self.Lip_Jaw_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Lip_Jaw_Vetex)
        cmds.select(self.Lip_Jaw_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Lip_Jaw_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Lip_Jaw_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def lip_jaw_reset_popup_command(self, *args):
        self.Lip_Jaw_Vetex = ''
        self.TopolDefine_window.Lip_Jaw_Btn.setStyleSheet(self.red_color)

    # todo eye setup
    def eye_left_blink_first_popup_command(self, *args):
        if self.Eye_L_blink_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_blink_Vetex is not define!')
            cmds.error('self.Eye_L_blink_Vetex is not define!')
        cmds.select(self.Eye_L_blink_Vetex[0])
        return

    def eye_left_blink_all_popup_command(self, *args):
        if self.Eye_L_blink_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_blink_Vetex is not define!')
            cmds.error('self.Eye_L_blink_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_blink_Vetex)
        cmds.select(self.Eye_L_blink_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_blink_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_blink_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_blink_reset_popup_command(self, *args):
        self.Eye_L_blink_Vetex = ''
        self.TopolDefine_window.Eye_L_blink_Btn.setStyleSheet(self.red_color)

    def eye_left_lower_first_popup_command(self, *args):
        if self.Eye_L_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lower_Vetex is not define!')
            cmds.error('self.Eye_L_lower_Vetex is not define!')
        cmds.select(self.Eye_L_lower_Vetex[0])
        return

    def eye_left_lower_all_popup_command(self, *args):
        if self.Eye_L_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lower_Vetex is not define!')
            cmds.error('self.Eye_L_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_lower_Vetex)
        cmds.select(self.Eye_L_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_lower_reset_popup_command(self, *args):
        self.Eye_L_lower_Vetex = ''
        self.TopolDefine_window.Eye_L_lower_Btn.setStyleSheet(self.red_color)

    def eye_left_lacrimal_first_popup_command(self, *args):
        if self.Eye_L_lacrimal_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lacrimal_Vetex is not define!')
            cmds.error('self.Eye_L_lacrimal_Vetex is not define!')
        cmds.select(self.Eye_L_lacrimal_Vetex[0])
        return

    def eye_left_lacrimal_all_popup_command(self, *args):
        if self.Eye_L_lacrimal_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lacrimal_Vetex is not define!')
            cmds.error('self.Eye_L_lacrimal_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_lacrimal_Vetex)
        cmds.select(self.Eye_L_lacrimal_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_lacrimal_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_lacrimal_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_lacrimal_reset_popup_command(self, *args):
        self.Eye_L_lacrimal_Vetex = ''
        self.TopolDefine_window.Eye_L_lacrimal_Btn.setStyleSheet(self.red_color)

    def eye_left_lacrimal_upper_first_popup_command(self, *args):
        if self.Eye_L_lacrimal_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lacrimal_upper_Vetex is not define!')
            cmds.error('self.Eye_L_lacrimal_upper_Vetex is not define!')
        cmds.select(self.Eye_L_lacrimal_upper_Vetex[0])
        return

    def eye_left_lacrimal_upper_all_popup_command(self, *args):
        if self.Eye_L_lacrimal_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lacrimal_upper_Vetex is not define!')
            cmds.error('self.Eye_L_lacrimal_upper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_lacrimal_upper_Vetex)
        cmds.select(self.Eye_L_lacrimal_upper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_lacrimal_upper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_lacrimal_upper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_lacrimal_upper_reset_popup_command(self, *args):
        self.Eye_L_lacrimal_upper_Vetex = ''
        self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setStyleSheet(self.red_color)

    def eye_left_lacrimal_lower_first_popup_command(self, *args):
        if self.Eye_L_lacrimal_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lacrimal_lower_Vetex is not define!')
            cmds.error('self.Eye_L_lacrimal_lower_Vetex is not define!')
        cmds.select(self.Eye_L_lacrimal_lower_Vetex[0])
        return

    def eye_left_lacrimal_lower_all_popup_command(self, *args):
        if self.Eye_L_lacrimal_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_lacrimal_lower_Vetex is not define!')
            cmds.error('self.Eye_L_lacrimal_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_lacrimal_lower_Vetex)
        cmds.select(self.Eye_L_lacrimal_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_lacrimal_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_lacrimal_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_lacrimal_lower_reset_popup_command(self, *args):
        self.Eye_L_lacrimal_lower_Vetex = ''
        self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setStyleSheet(self.red_color)

    def eye_left_back_first_popup_command(self, *args):
        if self.Eye_L_back_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_back_Vetex is not define!')
            cmds.error('self.Eye_L_back_Vetex is not define!')
        cmds.select(self.Eye_L_back_Vetex[0])
        return

    def eye_left_back_all_popup_command(self, *args):
        if self.Eye_L_back_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_back_Vetex is not define!')
            cmds.error('self.Eye_L_back_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_back_Vetex)
        cmds.select(self.Eye_L_back_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_back_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_back_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_back_reset_popup_command(self, *args):
        self.Eye_L_back_Vetex = ''
        self.TopolDefine_window.Eye_L_back_Btn.setStyleSheet(self.red_color)

    def eye_left_back_upper_first_popup_command(self, *args):
        if self.Eye_L_back_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_back_upper_Vetex is not define!')
            cmds.error('self.Eye_L_back_upper_Vetex is not define!')
        cmds.select(self.Eye_L_back_upper_Vetex[0])
        return

    def eye_left_back_upper_all_popup_command(self, *args):
        if self.Eye_L_back_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_back_upper_Vetex is not define!')
            cmds.error('self.Eye_L_back_upper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_back_upper_Vetex)
        cmds.select(self.Eye_L_back_upper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_back_upper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_back_upper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_back_upper_reset_popup_command(self, *args):
        self.Eye_L_back_upper_Vetex = ''
        self.TopolDefine_window.Eye_L_back_upper_Btn.setStyleSheet(self.red_color)

    def eye_left_back_lower_first_popup_command(self, *args):
        if self.Eye_L_back_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_back_lower_Vetex is not define!')
            cmds.error('self.Eye_L_back_lower_Vetex is not define!')
        cmds.select(self.Eye_L_back_lower_Vetex[0])
        return

    def eye_left_back_lower_all_popup_command(self, *args):
        if self.Eye_L_back_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_back_lower_Vetex is not define!')
            cmds.error('self.Eye_L_back_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_back_lower_Vetex)
        cmds.select(self.Eye_L_back_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_back_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_back_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_back_lower_reset_popup_command(self, *args):
        self.Eye_L_back_lower_Vetex = ''
        self.TopolDefine_window.Eye_L_back_lower_Btn.setStyleSheet(self.red_color)

    def eye_left_double_first_popup_command(self, *args):
        if self.Eye_L_double_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_double_Vetex is not define!')
            cmds.error('self.Eye_L_double_Vetex is not define!')
        cmds.select(self.Eye_L_double_Vetex[0])
        return

    def eye_left_double_all_popup_command(self, *args):
        if self.Eye_L_double_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_L_double_Vetex is not define!')
            cmds.error('self.Eye_L_double_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_L_double_Vetex)
        cmds.select(self.Eye_L_double_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_L_double_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_L_double_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_left_double_reset_popup_command(self, *args):
        self.Eye_L_double_Vetex = ''
        self.TopolDefine_window.Eye_L_double_Btn.setStyleSheet(self.red_color)

    # todo eye right popup command
    def eye_right_blink_first_popup_command(self, *args):
        if self.Eye_R_blink_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_blink_Vetex is not define!')
            cmds.error('self.Eye_R_blink_Vetex is not define!')
        cmds.select(self.Eye_R_blink_Vetex[0])
        return

    def eye_right_blink_all_popup_command(self, *args):
        if self.Eye_R_blink_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_blink_Vetex is not define!')
            cmds.error('self.Eye_R_blink_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_blink_Vetex)
        cmds.select(self.Eye_R_blink_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_blink_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_blink_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_blink_reset_popup_command(self, *args):
        self.Eye_R_blink_Vetex = ''
        self.TopolDefine_window.Eye_R_blink_Btn.setStyleSheet(self.red_color)

    def eye_right_lower_first_popup_command(self, *args):
        if self.Eye_R_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lower_Vetex is not define!')
            cmds.error('self.Eye_R_lower_Vetex is not define!')
        cmds.select(self.Eye_R_lower_Vetex[0])
        return

    def eye_right_lower_all_popup_command(self, *args):
        if self.Eye_R_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lower_Vetex is not define!')
            cmds.error('self.Eye_R_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_lower_Vetex)
        cmds.select(self.Eye_R_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_lower_reset_popup_command(self, *args):
        self.Eye_R_lower_Vetex = ''
        self.TopolDefine_window.Eye_R_lower_Btn.setStyleSheet(self.red_color)

    def eye_right_lacrimal_first_popup_command(self, *args):
        if self.Eye_R_lacrimal_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lacrimal_Vetex is not define!')
            cmds.error('self.Eye_R_lacrimal_Vetex is not define!')
        cmds.select(self.Eye_R_lacrimal_Vetex[0])
        return

    def eye_right_lacrimal_all_popup_command(self, *args):
        if self.Eye_R_lacrimal_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lacrimal_Vetex is not define!')
            cmds.error('self.Eye_R_lacrimal_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_lacrimal_Vetex)
        cmds.select(self.Eye_R_lacrimal_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_lacrimal_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_lacrimal_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_lacrimal_reset_popup_command(self, *args):
        self.Eye_R_lacrimal_Vetex = ''
        self.TopolDefine_window.Eye_R_lacrimal_Btn.setStyleSheet(self.red_color)

    def eye_right_lacrimal_upper_first_popup_command(self, *args):
        if self.Eye_R_lacrimal_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lacrimal_upper_Vetex is not define!')
            cmds.error('self.Eye_R_lacrimal_upper_Vetex is not define!')
        cmds.select(self.Eye_R_lacrimal_upper_Vetex[0])
        return

    def eye_right_lacrimal_upper_all_popup_command(self, *args):
        if self.Eye_R_lacrimal_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lacrimal_upper_Vetex is not define!')
            cmds.error('self.Eye_R_lacrimal_upper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_lacrimal_upper_Vetex)
        cmds.select(self.Eye_R_lacrimal_upper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_lacrimal_upper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_lacrimal_upper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_lacrimal_upper_reset_popup_command(self, *args):
        self.Eye_R_lacrimal_upper_Vetex = ''
        self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setStyleSheet(self.red_color)

    def eye_right_lacrimal_lower_first_popup_command(self, *args):
        if self.Eye_R_lacrimal_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lacrimal_lower_Vetex is not define!')
            cmds.error('self.Eye_R_lacrimal_lower_Vetex is not define!')
        cmds.select(self.Eye_R_lacrimal_lower_Vetex[0])
        return

    def eye_right_lacrimal_lower_all_popup_command(self, *args):
        if self.Eye_R_lacrimal_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_lacrimal_lower_Vetex is not define!')
            cmds.error('self.Eye_R_lacrimal_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_lacrimal_lower_Vetex)
        cmds.select(self.Eye_R_lacrimal_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_lacrimal_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_lacrimal_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_lacrimal_lower_reset_popup_command(self, *args):
        self.Eye_R_lacrimal_lower_Vetex = ''
        self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setStyleSheet(self.red_color)

    def eye_right_back_first_popup_command(self, *args):
        if self.Eye_R_back_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_back_Vetex is not define!')
            cmds.error('self.Eye_R_back_Vetex is not define!')
        cmds.select(self.Eye_R_back_Vetex[0])
        return

    def eye_right_back_all_popup_command(self, *args):
        if self.Eye_R_back_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_back_Vetex is not define!')
            cmds.error('self.Eye_R_back_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_back_Vetex)
        cmds.select(self.Eye_R_back_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_back_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_back_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_back_reset_popup_command(self, *args):
        self.Eye_R_back_Vetex = ''
        self.TopolDefine_window.Eye_R_back_Btn.setStyleSheet(self.red_color)

    def eye_right_back_upper_first_popup_command(self, *args):
        if self.Eye_R_back_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_back_upper_Vetex is not define!')
            cmds.error('self.Eye_R_back_upper_Vetex is not define!')
        cmds.select(self.Eye_R_back_upper_Vetex[0])
        return

    def eye_right_back_upper_all_popup_command(self, *args):
        if self.Eye_R_back_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_back_upper_Vetex is not define!')
            cmds.error('self.Eye_R_back_upper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_back_upper_Vetex)
        cmds.select(self.Eye_R_back_upper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_back_upper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_back_upper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_back_upper_reset_popup_command(self, *args):
        self.Eye_R_back_upper_Vetex = ''
        self.TopolDefine_window.Eye_R_back_upper_Btn.setStyleSheet(self.red_color)

    def eye_right_back_lower_first_popup_command(self, *args):
        if self.Eye_R_back_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_back_lower_Vetex is not define!')
            cmds.error('self.Eye_R_back_lower_Vetex is not define!')
        cmds.select(self.Eye_R_back_lower_Vetex[0])
        return

    def eye_right_back_lower_all_popup_command(self, *args):
        if self.Eye_R_back_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_back_lower_Vetex is not define!')
            cmds.error('self.Eye_R_back_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_back_lower_Vetex)
        cmds.select(self.Eye_R_back_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_back_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_back_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_back_lower_reset_popup_command(self, *args):
        self.Eye_R_back_lower_Vetex = ''
        self.TopolDefine_window.Eye_R_back_lower_Btn.setStyleSheet(self.red_color)

    def eye_right_double_first_popup_command(self, *args):
        if self.Eye_R_double_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_double_Vetex is not define!')
            cmds.error('self.Eye_R_double_Vetex is not define!')
        cmds.select(self.Eye_R_double_Vetex[0])
        return

    def eye_right_double_all_popup_command(self, *args):
        if self.Eye_R_double_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Eye_R_double_Vetex is not define!')
            cmds.error('self.Eye_R_double_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Eye_R_double_Vetex)
        cmds.select(self.Eye_R_double_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Eye_R_double_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Eye_R_double_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def eye_right_double_reset_popup_command(self, *args):
        self.Eye_R_double_Vetex = ''
        self.TopolDefine_window.Eye_R_double_Btn.setStyleSheet(self.red_color)

    # todo cheek setup
    def cheek_left_first_popup_command(self, *args):
        if self.Cheek_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_Vetex is not define!')
            cmds.error('self.Cheek_L_Vetex is not define!')
        cmds.select(self.Cheek_L_Vetex[0])
        return

    def cheek_left_all_popup_command(self, *args):
        if self.Cheek_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_Vetex is not define!')
            cmds.error('self.Cheek_L_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_L_Vetex)
        cmds.select(self.Cheek_L_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_L_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_L_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_left_reset_popup_command(self, *args):
        self.Cheek_L_Vetex = ''
        self.TopolDefine_window.Cheek_L_Btn.setStyleSheet(self.red_color)

    def cheek_left_upper_first_popup_command(self, *args):
        if self.Cheek_L_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_upper_Vetex is not define!')
            cmds.error('self.Cheek_L_upper_Vetex is not define!')
        cmds.select(self.Cheek_L_upper_Vetex[0])
        return

    def cheek_left_upper_all_popup_command(self, *args):
        if self.Cheek_L_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_upper_Vetex is not define!')
            cmds.error('self.Cheek_L_upper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_L_upper_Vetex)
        cmds.select(self.Cheek_L_upper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_L_upper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_L_upper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_left_upper_reset_popup_command(self, *args):
        self.Cheek_L_upper_Vetex = ''
        self.TopolDefine_window.Cheek_L_upper_Btn.setStyleSheet(self.red_color)

    def cheek_left_outer_orbicularis_first_popup_command(self, *args):
        if self.Cheek_L_outer_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_outer_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_L_outer_orbicularis_Vetex is not define!')
        cmds.select(self.Cheek_L_outer_orbicularis_Vetex[0])
        return

    def cheek_left_outer_orbicularis_all_popup_command(self, *args):
        if self.Cheek_L_outer_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_outer_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_L_outer_orbicularis_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_L_outer_orbicularis_Vetex)
        cmds.select(self.Cheek_L_outer_orbicularis_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_L_outer_orbicularis_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_L_outer_orbicularis_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_left_outer_orbicularis_reset_popup_command(self, *args):
        self.Cheek_L_outer_orbicularis_Vetex = ''
        self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setStyleSheet(self.red_color)

    def cheek_left_inner_orbicularis_first_popup_command(self, *args):
        if self.Cheek_L_inner_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_inner_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_L_inner_orbicularis_Vetex is not define!')
        cmds.select(self.Cheek_L_inner_orbicularis_Vetex[0])
        return

    def cheek_left_inner_orbicularis_all_popup_command(self, *args):
        if self.Cheek_L_inner_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_inner_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_L_inner_orbicularis_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_L_inner_orbicularis_Vetex)
        cmds.select(self.Cheek_L_inner_orbicularis_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_L_inner_orbicularis_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_L_inner_orbicularis_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_left_inner_orbicularis_reset_popup_command(self, *args):
        self.Cheek_L_inner_orbicularis_Vetex = ''
        self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setStyleSheet(self.red_color)

    def cheek_left_lower_first_popup_command(self, *args):
        if self.Cheek_L_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_lower_Vetex is not define!')
            cmds.error('self.Cheek_L_lower_Vetex is not define!')
        cmds.select(self.Cheek_L_lower_Vetex[0])
        return

    def cheek_left_lower_all_popup_command(self, *args):
        if self.Cheek_L_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_lower_Vetex is not define!')
            cmds.error('self.Cheek_L_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_L_lower_Vetex)
        cmds.select(self.Cheek_L_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_L_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_L_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_left_lower_reset_popup_command(self, *args):
        self.Cheek_L_lower_Vetex = ''
        self.TopolDefine_window.Cheek_L_lower_Btn.setStyleSheet(self.red_color)

    def cheek_left_lip_lid_first_popup_command(self, *args):
        if self.Cheek_L_lip_lid_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_lip_lid_Vetex is not define!')
            cmds.error('self.Cheek_L_lip_lid_Vetex is not define!')
        cmds.select(self.Cheek_L_lip_lid_Vetex[0])
        return

    def cheek_left_lip_lid_all_popup_command(self, *args):
        if self.Cheek_L_lip_lid_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_L_lip_lid_Vetex is not define!')
            cmds.error('self.Cheek_L_lip_lid_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_L_lip_lid_Vetex)
        cmds.select(self.Cheek_L_lip_lid_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_L_lip_lid_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_L_lip_lid_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_left_lip_lid_reset_popup_command(self, *args):
        self.Cheek_L_lip_lid_Vetex = ''
        self.TopolDefine_window.Cheek_L_lip_lid_Btn.setStyleSheet(self.red_color)

    def cheek_right_first_popup_command(self, *args):
        if self.Cheek_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_Vetex is not define!')
            cmds.error('self.Cheek_R_Vetex is not define!')
        cmds.select(self.Cheek_R_Vetex[0])
        return

    def cheek_right_all_popup_command(self, *args):
        if self.Cheek_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_Vetex is not define!')
            cmds.error('self.Cheek_R_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_R_Vetex)
        cmds.select(self.Cheek_R_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_R_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_R_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_right_reset_popup_command(self, *args):
        self.Cheek_R_Vetex = ''
        self.TopolDefine_window.Cheek_R_Btn.setStyleSheet(self.red_color)

    def cheek_right_upper_first_popup_command(self, *args):
        if self.Cheek_R_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_upper_Vetex is not define!')
            cmds.error('self.Cheek_R_upper_Vetex is not define!')
        cmds.select(self.Cheek_R_upper_Vetex[0])
        return

    def cheek_right_upper_all_popup_command(self, *args):
        if self.Cheek_R_upper_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_upper_Vetex is not define!')
            cmds.error('self.Cheek_R_upper_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_R_upper_Vetex)
        cmds.select(self.Cheek_R_upper_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_R_upper_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_R_upper_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_right_upper_reset_popup_command(self, *args):
        self.Cheek_R_upper_Vetex = ''
        self.TopolDefine_window.Cheek_R_upper_Btn.setStyleSheet(self.red_color)

    def cheek_right_outer_orbicularis_first_popup_command(self, *args):
        if self.Cheek_R_outer_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_outer_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_R_outer_orbicularis_Vetex is not define!')
        cmds.select(self.Cheek_R_outer_orbicularis_Vetex[0])
        return

    def cheek_right_outer_orbicularis_all_popup_command(self, *args):
        if self.Cheek_R_outer_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_outer_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_R_outer_orbicularis_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_R_outer_orbicularis_Vetex)
        cmds.select(self.Cheek_R_outer_orbicularis_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_R_outer_orbicularis_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_R_outer_orbicularis_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_right_outer_orbicularis_reset_popup_command(self, *args):
        self.Cheek_R_outer_orbicularis_Vetex = ''
        self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setStyleSheet(self.red_color)

    def cheek_right_inner_orbicularis_first_popup_command(self, *args):
        if self.Cheek_R_inner_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_inner_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_R_inner_orbicularis_Vetex is not define!')
        cmds.select(self.Cheek_R_inner_orbicularis_Vetex[0])
        return

    def cheek_right_inner_orbicularis_all_popup_command(self, *args):
        if self.Cheek_R_inner_orbicularis_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_inner_orbicularis_Vetex is not define!')
            cmds.error('self.Cheek_R_inner_orbicularis_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_R_inner_orbicularis_Vetex)
        cmds.select(self.Cheek_R_inner_orbicularis_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_R_inner_orbicularis_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_R_inner_orbicularis_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_right_inner_orbicularis_reset_popup_command(self, *args):
        self.Cheek_R_inner_orbicularis_Vetex = ''
        self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setStyleSheet(self.red_color)

    def cheek_right_lower_first_popup_command(self, *args):
        if self.Cheek_R_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_lower_Vetex is not define!')
            cmds.error('self.Cheek_R_lower_Vetex is not define!')
        cmds.select(self.Cheek_R_lower_Vetex[0])
        return

    def cheek_right_lower_all_popup_command(self, *args):
        if self.Cheek_R_lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_lower_Vetex is not define!')
            cmds.error('self.Cheek_R_lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_R_lower_Vetex)
        cmds.select(self.Cheek_R_lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_R_lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_R_lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_right_lower_reset_popup_command(self, *args):
        self.Cheek_R_lower_Vetex = ''
        self.TopolDefine_window.Cheek_R_lower_Btn.setStyleSheet(self.red_color)

    def cheek_right_lip_lid_first_popup_command(self, *args):
        if self.Cheek_R_lip_lid_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_lip_lid_Vetex is not define!')
            cmds.error('self.Cheek_R_lip_lid_Vetex is not define!')
        cmds.select(self.Cheek_R_lip_lid_Vetex[0])
        return

    def cheek_right_lip_lid_all_popup_command(self, *args):
        if self.Cheek_R_lip_lid_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Cheek_R_lip_lid_Vetex is not define!')
            cmds.error('self.Cheek_R_lip_lid_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Cheek_R_lip_lid_Vetex)
        cmds.select(self.Cheek_R_lip_lid_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Cheek_R_lip_lid_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Cheek_R_lip_lid_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def cheek_right_lip_lid_reset_popup_command(self, *args):
        self.Cheek_R_lip_lid_Vetex = ''
        self.TopolDefine_window.Cheek_R_lip_lid_Btn.setStyleSheet(self.red_color)

    # todo nose setup
    def nose_left_first_popup_command(self, *args):
        if self.Nose_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_Vetex is not define!')
            cmds.error('self.Nose_L_Vetex is not define!')
        cmds.select(self.Nose_L_Vetex[0])
        return

    def nose_left_all_popup_command(self, *args):
        if self.Nose_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_Vetex is not define!')
            cmds.error('self.Nose_L_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_L_Vetex)
        cmds.select(self.Nose_L_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_L_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_L_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_left_reset_popup_command(self, *args):
        self.Nose_L_Vetex = ''
        self.TopolDefine_window.Nose_L_Btn.setStyleSheet(self.red_color)

    def nose_left_nasalis_transverse_first_popup_command(self, *args):
        if self.Nose_L_nasalis_transverse_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_nasalis_transverse_Vetex is not define!')
            cmds.error('self.Nose_L_nasalis_transverse_Vetex is not define!')
        cmds.select(self.Nose_L_nasalis_transverse_Vetex[0])
        return

    def nose_left_nasalis_transverse_all_popup_command(self, *args):
        if self.Nose_L_nasalis_transverse_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_nasalis_transverse_Vetex is not define!')
            cmds.error('self.Nose_L_nasalis_transverse_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_L_nasalis_transverse_Vetex)
        cmds.select(self.Nose_L_nasalis_transverse_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_L_nasalis_transverse_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_L_nasalis_transverse_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_left_nasalis_transverse_reset_popup_command(self, *args):
        self.Nose_L_nasalis_transverse_Vetex = ''
        self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setStyleSheet(self.red_color)

    def nose_left_procerus_first_popup_command(self, *args):
        if self.Nose_L_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_procerus_Vetex is not define!')
            cmds.error('self.Nose_L_procerus_Vetex is not define!')
        cmds.select(self.Nose_L_procerus_Vetex[0])
        return

    def nose_left_procerus_all_popup_command(self, *args):
        if self.Nose_L_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_procerus_Vetex is not define!')
            cmds.error('self.Nose_L_procerus_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_L_procerus_Vetex)
        cmds.select(self.Nose_L_procerus_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_L_procerus_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_L_procerus_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_left_procerus_reset_popup_command(self, *args):
        self.Nose_L_procerus_Vetex = ''
        self.TopolDefine_window.Nose_L_procerus_Btn.setStyleSheet(self.red_color)

    def nose_left_nasolabial_fold_first_popup_command(self, *args):
        if self.Nose_L_nasolabial_fold_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_nasolabial_fold_Vetex is not define!')
            cmds.error('self.Nose_L_nasolabial_fold_Vetex is not define!')
        cmds.select(self.Nose_L_nasolabial_fold_Vetex[0])
        return

    def nose_left_nasolabial_fold_all_popup_command(self, *args):
        if self.Nose_L_nasolabial_fold_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_L_nasolabial_fold_Vetex is not define!')
            cmds.error('self.Nose_L_nasolabial_fold_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_L_nasolabial_fold_Vetex)
        cmds.select(self.Nose_L_nasolabial_fold_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_L_nasolabial_fold_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_L_nasolabial_fold_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_left_nasolabial_fold_reset_popup_command(self, *args):
        self.Nose_L_nasolabial_fold_Vetex = ''
        self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setStyleSheet(self.red_color)

    def nose_right_first_popup_command(self, *args):
        if self.Nose_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_Vetex is not define!')
            cmds.error('self.Nose_R_Vetex is not define!')
        cmds.select(self.Nose_R_Vetex[0])
        return

    def nose_right_all_popup_command(self, *args):
        if self.Nose_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_Vetex is not define!')
            cmds.error('self.Nose_R_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_R_Vetex)
        cmds.select(self.Nose_R_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_R_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_R_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_right_reset_popup_command(self, *args):
        self.Nose_R_Vetex = ''
        self.TopolDefine_window.Nose_R_Btn.setStyleSheet(self.red_color)

    def nose_right_nasalis_transverse_first_popup_command(self, *args):
        if self.Nose_R_nasalis_transverse_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_nasalis_transverse_Vetex is not define!')
            cmds.error('self.Nose_R_nasalis_transverse_Vetex is not define!')
        cmds.select(self.Nose_R_nasalis_transverse_Vetex[0])
        return

    def nose_right_nasalis_transverse_all_popup_command(self, *args):
        if self.Nose_R_nasalis_transverse_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_nasalis_transverse_Vetex is not define!')
            cmds.error('self.Nose_R_nasalis_transverse_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_R_nasalis_transverse_Vetex)
        cmds.select(self.Nose_R_nasalis_transverse_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_R_nasalis_transverse_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_R_nasalis_transverse_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_right_nasalis_transverse_reset_popup_command(self, *args):
        self.Nose_R_nasalis_transverse_Vetex = ''
        self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setStyleSheet(self.red_color)

    def nose_right_procerus_first_popup_command(self, *args):
        if self.Nose_R_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_procerus_Vetex is not define!')
            cmds.error('self.Nose_R_procerus_Vetex is not define!')
        cmds.select(self.Nose_R_procerus_Vetex[0])
        return

    def nose_right_procerus_all_popup_command(self, *args):
        if self.Nose_R_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_procerus_Vetex is not define!')
            cmds.error('self.Nose_R_procerus_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_R_procerus_Vetex)
        cmds.select(self.Nose_R_procerus_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_R_procerus_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_R_procerus_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def nose_right_procerus_reset_popup_command(self, *args):
        self.Nose_R_procerus_Vetex = ''
        self.TopolDefine_window.Nose_R_procerus_Btn.setStyleSheet(self.red_color)

    def nose_right_nasolabial_fold_first_popup_command(self, *args):
        if self.Nose_R_nasolabial_fold_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_nasolabial_fold_Vetex is not define!')
            cmds.error('self.Nose_R_nasolabial_fold_Vetex is not define!')
        cmds.select(self.Nose_R_nasolabial_fold_Vetex[0])
        return

    # todo start
    def Nose_R_nasolabial_fold_All_PopupCmd(self, *args):
        if self.Nose_R_nasolabial_fold_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_R_nasolabial_fold_Vetex is not define!')
            cmds.error('self.Nose_R_nasolabial_fold_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_R_nasolabial_fold_Vetex)
        cmds.select(self.Nose_R_nasolabial_fold_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_R_nasolabial_fold_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_R_nasolabial_fold_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Nose_R_nasolabial_fold_Reset_PopupCmd(self, *args):
        self.Nose_R_nasolabial_fold_Vetex = ''
        self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setStyleSheet(self.red_color)

    def Nose_Center_First_PopupCmd(self, *args):
        if self.Nose_Center_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_Center_Vetex is not define!')
            cmds.error('self.Nose_Center_Vetex is not define!')
        cmds.select(self.Nose_Center_Vetex[0])
        return

    def Nose_Center_All_PopupCmd(self, *args):
        if self.Nose_Center_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_Center_Vetex is not define!')
            cmds.error('self.Nose_Center_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_Center_Vetex)
        cmds.select(self.Nose_Center_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_Center_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_Center_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Nose_Center_Reset_PopupCmd(self, *args):
        self.Nose_Center_Vetex = ''
        self.TopolDefine_window.Nose_Center_Btn.setStyleSheet(self.red_color)

    def Nose_Lower_First_PopupCmd(self, *args):
        if self.Nose_Lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_Lower_Vetex is not define!')
            cmds.error('self.Nose_Lower_Vetex is not define!')
        cmds.select(self.Nose_Lower_Vetex[0])
        return

    def Nose_Lower_All_PopupCmd(self, *args):
        if self.Nose_Lower_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_Lower_Vetex is not define!')
            cmds.error('self.Nose_Lower_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_Lower_Vetex)
        cmds.select(self.Nose_Lower_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_Lower_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_Lower_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Nose_Lower_Reset_PopupCmd(self, *args):
        self.Nose_Lower_Vetex = ''
        self.TopolDefine_window.Nose_Lower_Btn.setStyleSheet(self.red_color)

    def Nose_depressor_septi_First_PopupCmd(self, *args):
        if self.Nose_depressor_septi_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_depressor_septi_Vetex is not define!')
            cmds.error('self.Nose_depressor_septi_Vetex is not define!')
        cmds.select(self.Nose_depressor_septi_Vetex[0])
        return

    def Nose_depressor_septi_All_PopupCmd(self, *args):
        if self.Nose_depressor_septi_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Nose_depressor_septi_Vetex is not define!')
            cmds.error('self.Nose_depressor_septi_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Nose_depressor_septi_Vetex)
        cmds.select(self.Nose_depressor_septi_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Nose_depressor_septi_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Nose_depressor_septi_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Nose_depressor_septi_Reset_PopupCmd(self, *args):
        self.Nose_depressor_septi_Vetex = ''
        self.TopolDefine_window.Nose_depressor_septi_Btn.setStyleSheet(self.red_color)

    def Brow_L_First_PopupCmd(self, *args):
        if self.Brow_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_Vetex is not define!')
            cmds.error('self.Brow_L_Vetex is not define!')
        cmds.select(self.Brow_L_Vetex[0])
        return

    def Brow_L_All_PopupCmd(self, *args):
        if self.Brow_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_Vetex is not define!')
            cmds.error('self.Brow_L_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_L_Vetex)
        cmds.select(self.Brow_L_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_L_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_L_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_L_Reset_PopupCmd(self, *args):
        self.Brow_L_Vetex = ''
        self.TopolDefine_window.Brow_L_Btn.setStyleSheet(self.red_color)

    def Brow_L_02_First_PopupCmd(self, *args):
        if self.Brow_L_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_02_Vetex is not define!')
            cmds.error('self.Brow_L_02_Vetex is not define!')
        cmds.select(self.Brow_L_02_Vetex[0])
        return

    def Brow_L_02_All_PopupCmd(self, *args):
        if self.Brow_L_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_02_Vetex is not define!')
            cmds.error('self.Brow_L_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_L_02_Vetex)
        cmds.select(self.Brow_L_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_L_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_L_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_L_02_Reset_PopupCmd(self, *args):
        self.Brow_L_02_Vetex = ''
        self.TopolDefine_window.Brow_L_02_Btn.setStyleSheet(self.red_color)

    def Brow_L_03_First_PopupCmd(self, *args):
        if self.Brow_L_03_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_03_Vetex is not define!')
            cmds.error('self.Brow_L_03_Vetex is not define!')
        cmds.select(self.Brow_L_03_Vetex[0])
        return

    def Brow_L_03_All_PopupCmd(self, *args):
        if self.Brow_L_03_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_03_Vetex is not define!')
            cmds.error('self.Brow_L_03_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_L_03_Vetex)
        cmds.select(self.Brow_L_03_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_L_03_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_L_03_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_L_03_Reset_PopupCmd(self, *args):
        self.Brow_L_03_Vetex = ''
        self.TopolDefine_window.Brow_L_03_Btn.setStyleSheet(self.red_color)

    def Brow_L_medial_fibers_First_PopupCmd(self, *args):
        if self.Brow_L_medial_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_medial_fibers_Vetex is not define!')
            cmds.error('self.Brow_L_medial_fibers_Vetex is not define!')
        cmds.select(self.Brow_L_medial_fibers_Vetex[0])
        return

    def Brow_L_medial_fibers_All_PopupCmd(self, *args):
        if self.Brow_L_medial_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_medial_fibers_Vetex is not define!')
            cmds.error('self.Brow_L_medial_fibers_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_L_medial_fibers_Vetex)
        cmds.select(self.Brow_L_medial_fibers_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_L_medial_fibers_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_L_medial_fibers_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_L_medial_fibers_Reset_PopupCmd(self, *args):
        self.Brow_L_medial_fibers_Vetex = ''
        self.TopolDefine_window.Brow_L_medial_fibers_Btn.setStyleSheet(self.red_color)

    def Brow_L_lateral_fibers_First_PopupCmd(self, *args):
        if self.Brow_L_lateral_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_lateral_fibers_Vetex is not define!')
            cmds.error('self.Brow_L_lateral_fibers_Vetex is not define!')
        cmds.select(self.Brow_L_lateral_fibers_Vetex[0])
        return

    def Brow_L_lateral_fibers_All_PopupCmd(self, *args):
        if self.Brow_L_lateral_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_lateral_fibers_Vetex is not define!')
            cmds.error('self.Brow_L_lateral_fibers_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_L_lateral_fibers_Vetex)
        cmds.select(self.Brow_L_lateral_fibers_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_L_lateral_fibers_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_L_lateral_fibers_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_L_lateral_fibers_Reset_PopupCmd(self, *args):
        self.Brow_L_lateral_fibers_Vetex = ''
        self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setStyleSheet(self.red_color)

    def Brow_L_procerus_First_PopupCmd(self, *args):
        if self.Brow_L_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_procerus_Vetex is not define!')
            cmds.error('self.Brow_L_procerus_Vetex is not define!')
        cmds.select(self.Brow_L_procerus_Vetex[0])
        return

    def Brow_L_procerus_All_PopupCmd(self, *args):
        if self.Brow_L_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_L_procerus_Vetex is not define!')
            cmds.error('self.Brow_L_procerus_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_L_procerus_Vetex)
        cmds.select(self.Brow_L_procerus_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_L_procerus_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_L_procerus_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_L_procerus_Reset_PopupCmd(self, *args):
        self.Brow_L_procerus_Vetex = ''
        self.TopolDefine_window.Brow_L_procerus_Btn.setStyleSheet(self.red_color)

    def Brow_R_First_PopupCmd(self, *args):
        if self.Brow_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_Vetex is not define!')
            cmds.error('self.Brow_R_Vetex is not define!')
        cmds.select(self.Brow_R_Vetex[0])
        return

    def Brow_R_All_PopupCmd(self, *args):
        if self.Brow_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_Vetex is not define!')
            cmds.error('self.Brow_R_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_R_Vetex)
        cmds.select(self.Brow_R_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_R_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_R_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_R_Reset_PopupCmd(self, *args):
        self.Brow_R_Vetex = ''
        self.TopolDefine_window.Brow_R_Btn.setStyleSheet(self.red_color)

    def Brow_R_medial_fibers_First_PopupCmd(self, *args):
        if self.Brow_R_medial_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_medial_fibers_Vetex is not define!')
            cmds.error('self.Brow_R_medial_fibers_Vetex is not define!')
        cmds.select(self.Brow_R_medial_fibers_Vetex[0])
        return

    def Brow_R_medial_fibers_All_PopupCmd(self, *args):
        if self.Brow_R_medial_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_medial_fibers_Vetex is not define!')
            cmds.error('self.Brow_R_medial_fibers_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_R_medial_fibers_Vetex)
        cmds.select(self.Brow_R_medial_fibers_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_R_medial_fibers_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_R_medial_fibers_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_R_medial_fibers_Reset_PopupCmd(self, *args):
        self.Brow_R_medial_fibers_Vetex = ''
        self.TopolDefine_window.Brow_R_medial_fibers_Btn.setStyleSheet(self.red_color)

    def Brow_R_lateral_fibers_First_PopupCmd(self, *args):
        if self.Brow_R_lateral_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_lateral_fibers_Vetex is not define!')
            cmds.error('self.Brow_R_lateral_fibers_Vetex is not define!')
        cmds.select(self.Brow_R_lateral_fibers_Vetex[0])
        return

    def Brow_R_lateral_fibers_All_PopupCmd(self, *args):
        if self.Brow_R_lateral_fibers_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_lateral_fibers_Vetex is not define!')
            cmds.error('self.Brow_R_lateral_fibers_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_R_lateral_fibers_Vetex)
        cmds.select(self.Brow_R_lateral_fibers_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_R_lateral_fibers_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_R_lateral_fibers_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_R_lateral_fibers_Reset_PopupCmd(self, *args):
        self.Brow_R_lateral_fibers_Vetex = ''
        self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setStyleSheet(self.red_color)

    def Brow_R_procerus_First_PopupCmd(self, *args):
        if self.Brow_R_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_procerus_Vetex is not define!')
            cmds.error('self.Brow_R_procerus_Vetex is not define!')
        cmds.select(self.Brow_R_procerus_Vetex[0])
        return

    def Brow_R_procerus_All_PopupCmd(self, *args):
        if self.Brow_R_procerus_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_procerus_Vetex is not define!')
            cmds.error('self.Brow_R_procerus_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_R_procerus_Vetex)
        cmds.select(self.Brow_R_procerus_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_R_procerus_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_R_procerus_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_R_procerus_Reset_PopupCmd(self, *args):
        self.Brow_R_procerus_Vetex = ''
        self.TopolDefine_window.Brow_R_procerus_Btn.setStyleSheet(self.red_color)

    def Brow_R_02_First_PopupCmd(self, *args):
        if self.Brow_R_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_02_Vetex is not define!')
            cmds.error('self.Brow_R_02_Vetex is not define!')
        cmds.select(self.Brow_R_02_Vetex[0])
        return

    def Brow_R_02_All_PopupCmd(self, *args):
        if self.Brow_R_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_02_Vetex is not define!')
            cmds.error('self.Brow_R_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_R_02_Vetex)
        cmds.select(self.Brow_R_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_R_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_R_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_R_02_Reset_PopupCmd(self, *args):
        self.Brow_R_02_Vetex = ''
        self.TopolDefine_window.Brow_R_02_Btn.setStyleSheet(self.red_color)

    def Brow_R_03_First_PopupCmd(self, *args):
        if self.Brow_R_03_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_03_Vetex is not define!')
            cmds.error('self.Brow_R_03_Vetex is not define!')
        cmds.select(self.Brow_R_03_Vetex[0])
        return

    def Brow_R_03_All_PopupCmd(self, *args):
        if self.Brow_R_03_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_R_03_Vetex is not define!')
            cmds.error('self.Brow_R_03_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_R_03_Vetex)
        cmds.select(self.Brow_R_03_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_R_03_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_R_03_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_R_03_Reset_PopupCmd(self, *args):
        self.Brow_R_03_Vetex = ''
        self.TopolDefine_window.Brow_R_03_Btn.setStyleSheet(self.red_color)

    def Brow_Center_First_PopupCmd(self, *args):
        if self.Brow_Center_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_Center_Vetex is not define!')
            cmds.error('self.Brow_Center_Vetex is not define!')
        cmds.select(self.Brow_Center_Vetex[0])
        return

    def Brow_Center_All_PopupCmd(self, *args):
        if self.Brow_Center_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Brow_Center_Vetex is not define!')
            cmds.error('self.Brow_Center_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Brow_Center_Vetex)
        cmds.select(self.Brow_Center_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Brow_Center_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Brow_Center_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Brow_Center_Reset_PopupCmd(self, *args):
        self.Brow_Center_Vetex = ''
        self.TopolDefine_window.Brow_Center_Btn.setStyleSheet(self.red_color)

    def Oral_Upper_teeth_First_PopupCmd(self, *args):
        if self.Oral_Upper_teeth_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Upper_teeth_Vetex is not define!')
            cmds.error('self.Oral_Upper_teeth_Vetex is not define!')
        cmds.select(self.Oral_Upper_teeth_Vetex[0])
        return

    def Oral_Upper_teeth_All_PopupCmd(self, *args):
        if self.Oral_Upper_teeth_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Upper_teeth_Vetex is not define!')
            cmds.error('self.Oral_Upper_teeth_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Oral_Upper_teeth_Vetex)
        cmds.select(self.Oral_Upper_teeth_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Oral_Upper_teeth_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Oral_Upper_teeth_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Oral_Upper_teeth_Reset_PopupCmd(self, *args):
        self.Oral_Upper_teeth_Vetex = ''
        self.TopolDefine_window.Oral_Upper_teeth_Btn.setStyleSheet(self.red_color)

    def Oral_Lower_teeth_First_PopupCmd(self, *args):
        if self.Oral_Lower_teeth_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Lower_teeth_Vetex is not define!')
            cmds.error('self.Oral_Lower_teeth_Vetex is not define!')
        cmds.select(self.Oral_Lower_teeth_Vetex[0])
        return

    def Oral_Lower_teeth_All_PopupCmd(self, *args):
        if self.Oral_Lower_teeth_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Lower_teeth_Vetex is not define!')
            cmds.error('self.Oral_Lower_teeth_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Oral_Lower_teeth_Vetex)
        cmds.select(self.Oral_Lower_teeth_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Oral_Lower_teeth_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Oral_Lower_teeth_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Oral_Lower_teeth_Reset_PopupCmd(self, *args):
        self.Oral_Lower_teeth_Vetex = ''
        self.TopolDefine_window.Oral_Lower_teeth_Btn.setStyleSheet(self.red_color)

    def Oral_Tongue_First_PopupCmd(self, *args):
        if self.Oral_Tongue_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Tongue_Vetex is not define!')
            cmds.error('self.Oral_Tongue_Vetex is not define!')
        cmds.select(self.Oral_Tongue_Vetex[0])
        return

    def Oral_Tongue_All_PopupCmd(self, *args):
        if self.Oral_Tongue_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Tongue_Vetex is not define!')
            cmds.error('self.Oral_Tongue_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Oral_Tongue_Vetex)
        cmds.select(self.Oral_Tongue_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Oral_Tongue_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Oral_Tongue_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Oral_Tongue_Reset_PopupCmd(self, *args):
        self.Oral_Tongue_Vetex = ''
        self.TopolDefine_window.Oral_Tongue_Btn.setStyleSheet(self.red_color)

    def Oral_Tongue_02_First_PopupCmd(self, *args):
        if self.Oral_Tongue_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Tongue_02_Vetex is not define!')
            cmds.error('self.Oral_Tongue_02_Vetex is not define!')
        cmds.select(self.Oral_Tongue_02_Vetex[0])
        return

    def Oral_Tongue_02_All_PopupCmd(self, *args):
        if self.Oral_Tongue_02_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Tongue_02_Vetex is not define!')
            cmds.error('self.Oral_Tongue_02_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Oral_Tongue_02_Vetex)
        cmds.select(self.Oral_Tongue_02_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Oral_Tongue_02_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Oral_Tongue_02_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Oral_Tongue_02_Reset_PopupCmd(self, *args):
        self.Oral_Tongue_02_Vetex = ''
        self.TopolDefine_window.Oral_Tongue_02_Btn.setStyleSheet(self.red_color)

    def Oral_Tongue_03_First_PopupCmd(self, *args):
        if self.Oral_Tongue_03_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Tongue_03_Vetex is not define!')
            cmds.error('self.Oral_Tongue_03_Vetex is not define!')
        cmds.select(self.Oral_Tongue_03_Vetex[0])
        return

    def Oral_Tongue_03_All_PopupCmd(self, *args):
        if self.Oral_Tongue_03_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.Oral_Tongue_03_Vetex is not define!')
            cmds.error('self.Oral_Tongue_03_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.Oral_Tongue_03_Vetex)
        cmds.select(self.Oral_Tongue_03_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.Oral_Tongue_03_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.Oral_Tongue_03_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def Oral_Tongue_03_Reset_PopupCmd(self, *args):
        self.Oral_Tongue_03_Vetex = ''
        self.TopolDefine_window.Oral_Tongue_03_Btn.setStyleSheet(self.red_color)

    def EyeBall_L_First_PopupCmd(self, *args):
        if self.EyeBall_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.EyeBall_L_Vetex is not define!')
            cmds.error('self.EyeBall_L_Vetex is not define!')
        cmds.select(self.EyeBall_L_Vetex[0])
        return

    def EyeBall_L_All_PopupCmd(self, *args):
        if self.EyeBall_L_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.EyeBall_L_Vetex is not define!')
            cmds.error('self.EyeBall_L_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.EyeBall_L_Vetex)
        cmds.select(self.EyeBall_L_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.EyeBall_L_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.EyeBall_L_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def EyeBall_L_Reset_PopupCmd(self, *args):
        self.EyeBall_L_Vetex = ''
        self.TopolDefine_window.EyeBall_L_Btn.setStyleSheet(self.red_color)

    def EyeBall_R_First_PopupCmd(self, *args):
        if self.EyeBall_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.EyeBall_R_Vetex is not define!')
            cmds.error('self.EyeBall_R_Vetex is not define!')
        cmds.select(self.EyeBall_R_Vetex[0])
        return

    def EyeBall_R_All_PopupCmd(self, *args):
        if self.EyeBall_R_Vetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.EyeBall_R_Vetex is not define!')
            cmds.error('self.EyeBall_R_Vetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.EyeBall_R_Vetex)
        cmds.select(self.EyeBall_R_Vetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.EyeBall_R_Vetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.EyeBall_R_Vetex[0])
            cmds.select(last_sel, add=True)
        return

    def EyeBall_R_Reset_PopupCmd(self, *args):
        self.EyeBall_R_Vetex = ''
        self.TopolDefine_window.EyeBall_R_Btn.setStyleSheet(self.red_color)

    def BrowL_All_PopupCmd(self, *args):
        if self.BrowLVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.BrowLVetex is not define!')
            cmds.error('self.BrowLVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.BrowLVetex)
        cmds.select(self.BrowLVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.BrowLVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.BrowLVetex[0])
            cmds.select(last_sel, add=True)
        return

    def BrowL_Reset_PopupCmd(self, *args):
        self.BrowLVetex = ''
        self.ui.BrowTopolLBtn.setStyleSheet(None)
        return

    def BrowR_All_PopupCmd(self, *args):
        if self.BrowRVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.BrowRVetex is not define!')
            cmds.error('self.BrowRVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.BrowRVetex)
        cmds.select(self.BrowRVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.BrowRVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.BrowRVetex[0])
            cmds.select(last_sel, add=True)
        return

    def BrowR_Reset_PopupCmd(self, *args):
        self.BrowRVetex = ''
        self.ui.BrowTopolRBtn.setStyleSheet(None)
        return

    def EyeL_All_PopupCmd(self, *args):
        if self.EyeLVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.EyeLVetex is not define!')
            cmds.error('self.EyeLVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.EyeLVetex)
        cmds.select(self.EyeLVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.EyeLVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.EyeLVetex[0])
            cmds.select(last_sel, add=True)
        return

    def EyeL_Reset_PopupCmd(self, *args):
        self.EyeLVetex = ''
        self.ui.EyeTopolLBtn.setStyleSheet(None)
        return

    def EyeR_All_PopupCmd(self, *args):
        if self.EyeRVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.EyeRVetex is not define!')
            cmds.error('self.EyeRVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.EyeRVetex)
        cmds.select(self.EyeRVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.EyeRVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.EyeRVetex[0])
            cmds.select(last_sel, add=True)
        return

    def EyeR_Reset_PopupCmd(self, *args):
        self.EyeRVetex = ''
        self.ui.EyeTopolRBtn.setStyleSheet(None)
        return

    def Nose_All_PopupCmd(self, *args):
        if self.NoseVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.NoseVetex is not define!')
            cmds.error('self.NoseVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.NoseVetex)
        cmds.select(self.NoseVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.NoseVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.NoseVetex[0])
            cmds.select(last_sel, add=True)
        return

    def Nose_Reset_PopupCmd(self, *args):
        self.NoseVetex = ''
        self.ui.NoseTopolBtn.setStyleSheet(None)
        return

    def CheekL_All_PopupCmd(self, *args):
        if self.CheekLVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.CheekLVetex is not define!')
            cmds.error('self.CheekLVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.CheekLVetex)
        cmds.select(self.CheekLVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.CheekLVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.CheekLVetex[0])
            cmds.select(last_sel, add=True)
        return

    def CheekL_Reset_PopupCmd(self, *args):
        self.CheekLVetex = ''
        self.ui.CheekTopolLBtn.setStyleSheet(None)
        return

    def CheekR_All_PopupCmd(self, *args):
        if self.CheekRVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.CheekRVetex is not define!')
            cmds.error('self.CheekRVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.CheekRVetex)
        cmds.select(self.CheekRVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.CheekRVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.CheekRVetex[0])
            cmds.select(last_sel, add=True)
        return

    def CheekR_Reset_PopupCmd(self, *args):
        self.CheekRVetex = ''
        self.ui.CheekTopolRBtn.setStyleSheet(None)
        return

    def LipUp_All_PopupCmd(self, *args):
        if self.LipUpVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipUpVetex is not define!')
            cmds.error('self.LipUpVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipUpVetex)
        cmds.select(self.LipUpVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipUpVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipUpVetex[0])
            cmds.select(last_sel, add=True)
        return

    def LipUp_Reset_PopupCmd(self, *args):
        self.LipUpVetex = ''
        self.ui.LipTopolUpBtn.setStyleSheet(None)
        return

    def LipDown_All_PopupCmd(self, *args):
        if self.LipDownVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.LipDownVetex is not define!')
            cmds.error('self.LipDownVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.LipDownVetex)
        cmds.select(self.LipDownVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.LipDownVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.LipDownVetex[0])
            cmds.select(last_sel, add=True)
        return

    def LipDown_Reset_PopupCmd(self, *args):
        self.LipDownVetex = ''
        self.ui.LipTopolDownBtn.setStyleSheet(None)
        return

    def Jaw_First_PopupCmd(self, *args):
        if self.JawVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.JawVetex is not define!')
            cmds.error('self.JawVetex is not define!')
        cmds.select(self.JawVetex[0])
        return

    def Jaw_All_PopupCmd(self, *args):
        if self.JawVetex == '':
            QtWidgets.QMessageBox.warning(None, 'Warning', 'self.JawVetex is not define!')
            cmds.error('self.JawVetex is not define!')
        user_sel = cmds.ls(os=True, fl=True)
        cmds.select(self.JawVetex)
        cmds.select(self.JawVetex[0], d=True)
        last_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        mods = cmds.getModifiers()
        if mods & 1 > 0 or mods & 4 > 0:
            cmds.select(user_sel)
            cmds.select(self.JawVetex[0], tgl=True)
            cmds.select(last_sel, add=True)
        else:
            cmds.select(self.JawVetex[0])
            cmds.select(last_sel, add=True)
        return

    def jaw_reset_popup_command(self, *args):
        self.JawVetex = ''
        self.ui.JawTopolBtn.setStyleSheet(None)
        return

    def rebuild_symmetry_command(self, *args):
        source_jnt = cmds.ls(sl=True)
        if len(source_jnt) != 0:
            for each in source_jnt:
                if each[:2] == 'L_':
                    right_name = 'R_' + each[2:]
                    if cmds.objExists(right_name):
                        eachX = cmds.getAttr(each + '.translateX')
                        eachY = cmds.getAttr(each + '.translateY')
                        eachZ = cmds.getAttr(each + '.translateZ')
                        cmds.setAttr(right_name + '.translateX', -eachX)
                        cmds.setAttr(right_name + '.translateY', eachY)
                        cmds.setAttr(right_name + '.translateZ', eachZ)
                        print(each + "'s position is set to " + right_name)
                elif each[:2] == 'R_':
                    left_name = 'L_' + each[2:]
                    if cmds.objExists(left_name):
                        eachX = cmds.getAttr(each + '.translateX')
                        eachY = cmds.getAttr(each + '.translateY')
                        eachZ = cmds.getAttr(each + '.translateZ')
                        cmds.setAttr(left_name + '.translateX', -eachX)
                        cmds.setAttr(left_name + '.translateY', eachY)
                        cmds.setAttr(left_name + '.translateZ', eachZ)
                        print(each + "'s position is set to " + left_name)

    def rebuild_skin_command(self, *args):
        self.rebuild_skin()

    def rebuild_control_command(self, *args):
        scaleX = cmds.getAttr('scale_check_grp.scaleX')
        scaleY = cmds.getAttr('scale_check_grp.scaleY')
        scaleZ = cmds.getAttr('scale_check_grp.scaleZ')
        cmds.select(clear=True)
        if len(self.head_joint) != 0:
            pass
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Define your head joint!')
            cmds.error('Please Define your head joint!')
        self.RebuildCheck = 1
        if cmds.objExists('System_jnt_layer') is True:
            cmds.delete('System_jnt_layer')
        if cmds.objExists('Skin_jnt_layer') is True:
            cmds.delete('Skin_jnt_layer')
        cmds.setAttr('Facial_Set_Ctrl.Joint_Visible', 1)
        cmds.select('Skin_*_jnt')
        sel_jnt_list = cmds.ls(sl=True)
        for each in sel_jnt_list:
            mel.eval('CBdeleteConnection ' + each + '.tx;')
            mel.eval('CBdeleteConnection ' + each + '.ty;')
            mel.eval('CBdeleteConnection ' + each + '.tz;')
            mel.eval('CBdeleteConnection ' + each + '.rx;')
            mel.eval('CBdeleteConnection ' + each + '.ry;')
            mel.eval('CBdeleteConnection ' + each + '.rz;')
            mel.eval('CBdeleteConnection ' + each + '.sx;')
            mel.eval('CBdeleteConnection ' + each + '.sy;')
            mel.eval('CBdeleteConnection ' + each + '.sz;')

        if cmds.objExists('Brow*_expression'):
            cmds.delete('Brow*_expression')
        if cmds.objExists('Cheek*_expression'):
            cmds.delete('Cheek*_expression')
        if cmds.objExists('Eye*_expression'):
            cmds.delete('Eye*_expression')
        if cmds.objExists('Jaw*_expression'):
            cmds.delete('Jaw*_expression')
        if cmds.objExists('L_R_U*_expression'):
            cmds.delete('L_R_U*_expression')
        if cmds.objExists('Lip*_expression'):
            cmds.delete('Lip*_expression')
        if cmds.objExists('Nose*_expression'):
            cmds.delete('Nose*_expression')
        if cmds.objExists('Oral*_expression'):
            cmds.delete('Oral*_expression')
        if cmds.objExists('Upper*_expression'):
            cmds.delete('Upper*_expression')
        if cmds.objExists('Lower*_expression'):
            cmds.delete('Lower*_expression')
        if cmds.objExists('Side*_expression'):
            cmds.delete('Side*_expression')
        if [u'Facial_Master_Ctrl_grp'] == cmds.listRelatives('Facial_Skin_joint_grp', parent=True):
            pass
        else:
            cmds.parent('Facial_Skin_joint_grp', 'Facial_Master_Ctrl_grp')
        cmds.delete('Facial_Master_Ctrl')
        if cmds.objExists('Eye_World_point_Loc_grp'):
            cmds.delete('Eye_World_point_Loc_grp')
        cmds.parent('Skin_*_jnt', 'Facial_Skin_joint_grp')
        cmds.select('Skin_*_jnt')
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, d=True)
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, add=True)
        cmds.parent()
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, hi=True)
        cmds.select('Skin_*_jnt', tgl=True)
        None_facial = cmds.ls(sl=True)
        if len(None_facial) != 0:
            cmds.select(cl=True)
            for each in None_facial:
                None_parent = cmds.listRelatives(each, p=True)
                if None_parent[0] == SKIN_HEAD_MASTER_JOINT_NAME:
                    cmds.select(each, add=True)

            None_facial = cmds.ls(sl=True)
            cmds.parent(None_facial, w=True)
        cmds.select('Facial_Master_Ctrl_grp', hi=True)
        Rename_sel = cmds.ls(selection=True)
        for each in Rename_sel:
            new_name = 'Rebuild_' + each + '_Rebuild'
            cmds.rename(each, new_name)

        self.create_joint_command()
        cmds.setAttr('FitScale_ctrl.scaleX', scaleX)
        cmds.setAttr('FitScale_ctrl.scaleY', scaleY)
        cmds.setAttr('FitScale_ctrl.scaleZ', scaleZ)
        self.symmetry_command()
        cmds.select('*_jnt')
        jnt_sel = cmds.ls(selection=True)
        for each in jnt_sel:
            match = 'Rebuild_Skin_' + each + '_Rebuild'
            if cmds.objExists(match):
                if each == JAW_MASTER_JOINT_NAME:
                    cmds.setAttr('Jaw_master_jnt.tx', lock=False)
                    cmds.pointConstraint(match, each)
                    cmds.setAttr('Jaw_master_jnt.tx', lock=True)
                else:
                    cmds.pointConstraint(match, each)
                cmds.delete('*_jnt_pointConstraint1')

        cmds.hide('Rebuild_Facial_Master_Ctrl_grp_Rebuild')
        cmds.cutKey('Rebuild_Skin_*_jnt_Rebuild', s=True)
        return

    def lip_checkbox_function(self, *args):
        if self.ui.LipCheckBox.isChecked() is True:
            self.lip_checkbox_on()
        elif self.ui.LipCheckBox.isChecked() is False:
            self.lip_checkbox_off()

    def lip_checkbox_off(self, *args):
        self.ui.CheekCheckBox.setEnabled(False)
        self.ui.CheekCheckBox.setChecked(False)
        self.ui.CheekOption.setEnabled(False)
        self.ui.OralCavityCheckBox.setEnabled(False)
        self.ui.OralCavityCheckBox.setChecked(False)
        self.ui.OralOption.setEnabled(False)

    def lip_checkbox_on(self, *args):
        self.ui.CheekOption.setEnabled(True)
        self.ui.OralCavityCheckBox.setEnabled(True)
        self.ui.OralOption.setEnabled(True)
        if 'Jaw joint Only' == self.ui.LipOption.currentText():
            self.ui.CheekCheckBox.setEnabled(False)
            self.ui.CheekCheckBox.setChecked(False)
        else:
            self.ui.CheekCheckBox.setEnabled(True)

    def lip_option_command(self, *args):
        if 'Jaw joint Only' == self.ui.LipOption.currentText():
            self.ui.CheekCheckBox.setEnabled(False)
            self.ui.CheekCheckBox.setChecked(False)
            self.ui.CheekOption.setEnabled(False)
        else:
            self.ui.CheekCheckBox.setEnabled(True)
            self.ui.CheekOption.setEnabled(True)

    def create_topology(self):
        try:
            self.TopolDefine_window.close()
            self.TopolDefine_window.deleteLater()
        except:
            pass

        self.TopolDefine_window = QtUiTools.QUiLoader().load(self.current_dir + '/ui/Topology_Define.ui', parentWidget=self)
        self.TopolDefine_window.setWindowTitle('TopolDefine_window')
        self.TopolDefine_window.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)
        self.TopolDefine_window.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowMaximizeButtonHint)
        self.TopolDefine_window.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowMinimizeButtonHint)
        image_path = self.current_dir + '/icon/Facial_image.png'
        self.TopolDefine_window.Label_image.setPixmap(image_path)
        self.TopolDefine_window.Match_joint_Btn.setStyle(QtWidgets.QStyleFactory.create(self.styles))
        if len(self.LipCorner_L_Vetex) != 0:
            self.TopolDefine_window.LipCorner_L_Btn.setStyleSheet(self.green_color)
        if len(self.LipCorner_lower_L_Vetex) != 0:
            self.TopolDefine_window.LipCorner_lower_L_Btn.setStyleSheet(self.green_color)
        if len(self.LipCorner_R_Vetex) != 0:
            self.TopolDefine_window.LipCorner_R_Btn.setStyleSheet(self.green_color)
        if len(self.LipCorner_lower_R_Vetex) != 0:
            self.TopolDefine_window.LipCorner_lower_R_Btn.setStyleSheet(self.green_color)
        if len(self.LipUpper_Vetex) != 0:
            self.TopolDefine_window.LipUpper_Btn.setStyleSheet(self.green_color)
        if len(self.LipLower_Vetex) != 0:
            self.TopolDefine_window.LipLower_Btn.setStyleSheet(self.green_color)
        if len(self.LipLower_Outer_Vetex) != 0:
            self.TopolDefine_window.LipLower_Outer_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_L_UpperSide_Vetex) != 0:
            self.TopolDefine_window.Lip_L_UpperSide_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_L_UpperSide_02_Vetex) != 0:
            self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_L_UpperOuter_Vetex) != 0:
            self.TopolDefine_window.Lip_L_UpperOuter_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_L_LowerSide_Vetex) != 0:
            self.TopolDefine_window.Lip_L_LowerSide_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_L_LowerSide_02_Vetex) != 0:
            self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_L_LowerOuter_Vetex) != 0:
            self.TopolDefine_window.Lip_L_LowerOuter_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_R_UpperSide_Vetex) != 0:
            self.TopolDefine_window.Lip_R_UpperSide_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_R_UpperSide_02_Vetex) != 0:
            self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_R_UpperOuter_Vetex) != 0:
            self.TopolDefine_window.Lip_R_UpperOuter_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_R_LowerSide_Vetex) != 0:
            self.TopolDefine_window.Lip_R_LowerSide_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_R_LowerSide_02_Vetex) != 0:
            self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_R_LowerOuter_Vetex) != 0:
            self.TopolDefine_window.Lip_R_LowerOuter_Btn.setStyleSheet(self.green_color)
        if len(self.Lip_Jaw_Vetex) != 0:
            self.TopolDefine_window.Lip_Jaw_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_blink_Vetex) != 0:
            self.TopolDefine_window.Eye_L_blink_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_blink_Vetex) != 0:
            self.TopolDefine_window.Eye_R_blink_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_lower_Vetex) != 0:
            self.TopolDefine_window.Eye_L_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_lower_Vetex) != 0:
            self.TopolDefine_window.Eye_R_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_lacrimal_Vetex) != 0:
            self.TopolDefine_window.Eye_L_lacrimal_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_lacrimal_upper_Vetex) != 0:
            self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_lacrimal_lower_Vetex) != 0:
            self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_back_Vetex) != 0:
            self.TopolDefine_window.Eye_L_back_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_back_upper_Vetex) != 0:
            self.TopolDefine_window.Eye_L_back_upper_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_back_lower_Vetex) != 0:
            self.TopolDefine_window.Eye_L_back_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_L_double_Vetex) != 0:
            self.TopolDefine_window.Eye_L_double_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_lacrimal_Vetex) != 0:
            self.TopolDefine_window.Eye_R_lacrimal_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_lacrimal_upper_Vetex) != 0:
            self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_lacrimal_lower_Vetex) != 0:
            self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_back_Vetex) != 0:
            self.TopolDefine_window.Eye_R_back_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_back_upper_Vetex) != 0:
            self.TopolDefine_window.Eye_R_back_upper_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_back_lower_Vetex) != 0:
            self.TopolDefine_window.Eye_R_back_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Eye_R_double_Vetex) != 0:
            self.TopolDefine_window.Eye_R_double_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_L_Vetex) != 0:
            self.TopolDefine_window.Cheek_L_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_L_upper_Vetex) != 0:
            self.TopolDefine_window.Cheek_L_upper_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_L_outer_orbicularis_Vetex) != 0:
            self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_L_inner_orbicularis_Vetex) != 0:
            self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_L_lower_Vetex) != 0:
            self.TopolDefine_window.Cheek_L_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_L_lip_lid_Vetex) != 0:
            self.TopolDefine_window.Cheek_L_lip_lid_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_R_Vetex) != 0:
            self.TopolDefine_window.Cheek_R_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_R_upper_Vetex) != 0:
            self.TopolDefine_window.Cheek_R_upper_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_R_outer_orbicularis_Vetex) != 0:
            self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_R_inner_orbicularis_Vetex) != 0:
            self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_R_lower_Vetex) != 0:
            self.TopolDefine_window.Cheek_R_lower_Btn.setStyleSheet(self.green_color)
        if len(self.Cheek_R_lip_lid_Vetex) != 0:
            self.TopolDefine_window.Cheek_R_lip_lid_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_L_Vetex) != 0:
            self.TopolDefine_window.Nose_L_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_L_nasalis_transverse_Vetex) != 0:
            self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_L_procerus_Vetex) != 0:
            self.TopolDefine_window.Nose_L_procerus_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_L_nasolabial_fold_Vetex) != 0:
            self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_R_Vetex) != 0:
            self.TopolDefine_window.Nose_R_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_R_nasalis_transverse_Vetex) != 0:
            self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_R_procerus_Vetex) != 0:
            self.TopolDefine_window.Nose_R_procerus_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_R_nasolabial_fold_Vetex) != 0:
            self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_Center_Vetex) != 0:
            self.TopolDefine_window.Nose_Center_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_Lower_Vetex) != 0:
            self.TopolDefine_window.Nose_Lower_Btn.setStyleSheet(self.green_color)
        if len(self.Nose_depressor_septi_Vetex) != 0:
            self.TopolDefine_window.Nose_depressor_septi_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_L_Vetex) != 0:
            self.TopolDefine_window.Brow_L_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_L_medial_fibers_Vetex) != 0:
            self.TopolDefine_window.Brow_L_medial_fibers_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_L_lateral_fibers_Vetex) != 0:
            self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_L_procerus_Vetex) != 0:
            self.TopolDefine_window.Brow_L_procerus_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_R_Vetex) != 0:
            self.TopolDefine_window.Brow_R_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_R_medial_fibers_Vetex) != 0:
            self.TopolDefine_window.Brow_R_medial_fibers_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_R_lateral_fibers_Vetex) != 0:
            self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_R_procerus_Vetex) != 0:
            self.TopolDefine_window.Brow_R_procerus_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_L_02_Vetex) != 0:
            self.TopolDefine_window.Brow_L_02_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_R_02_Vetex) != 0:
            self.TopolDefine_window.Brow_R_02_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_L_03_Vetex) != 0:
            self.TopolDefine_window.Brow_L_03_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_R_03_Vetex) != 0:
            self.TopolDefine_window.Brow_R_03_Btn.setStyleSheet(self.green_color)
        if len(self.Brow_Center_Vetex) != 0:
            self.TopolDefine_window.Brow_Center_Btn.setStyleSheet(self.green_color)
        if len(self.Oral_Upper_teeth_Vetex) != 0:
            self.TopolDefine_window.Oral_Upper_teeth_Btn.setStyleSheet(self.green_color)
        if len(self.Oral_Lower_teeth_Vetex) != 0:
            self.TopolDefine_window.Oral_Lower_teeth_Btn.setStyleSheet(self.green_color)
        if len(self.Oral_Tongue_Vetex) != 0:
            self.TopolDefine_window.Oral_Tongue_Btn.setStyleSheet(self.green_color)
        if len(self.Oral_Tongue_02_Vetex) != 0:
            self.TopolDefine_window.Oral_Tongue_02_Btn.setStyleSheet(self.green_color)
        if len(self.Oral_Tongue_03_Vetex) != 0:
            self.TopolDefine_window.Oral_Tongue_03_Btn.setStyleSheet(self.green_color)
        if len(self.EyeBall_L_Vetex) != 0:
            self.TopolDefine_window.EyeBall_L_Btn.setStyleSheet(self.green_color)
        if len(self.EyeBall_R_Vetex) != 0:
            self.TopolDefine_window.EyeBall_R_Btn.setStyleSheet(self.green_color)
        self.TopolDefine_window.Match_joint_Btn.clicked.connect(self.match_joint_command)
        self.TopolDefine_window.LipCorner_L_Btn.clicked.connect(self.lip_corner_left_command)
        self.TopolDefine_window.LipCorner_lower_L_Btn.clicked.connect(self.lip_corner_lower_left_command)
        self.TopolDefine_window.LipCorner_R_Btn.clicked.connect(self.lip_corner_right_command)
        self.TopolDefine_window.LipCorner_lower_R_Btn.clicked.connect(self.lip_corner_lower_right_command)
        self.TopolDefine_window.LipUpper_Btn.clicked.connect(self.lip_upper_command)
        self.TopolDefine_window.LipLower_Btn.clicked.connect(self.lip_lower_command)
        self.TopolDefine_window.LipLower_Outer_Btn.clicked.connect(self.lip_lower_outer_command)
        self.TopolDefine_window.Lip_L_UpperSide_Btn.clicked.connect(self.lip_left_upper_side_command)
        self.TopolDefine_window.Lip_L_UpperSide_02_Btn.clicked.connect(self.lip_left_upper_side_02_command)
        self.TopolDefine_window.Lip_L_UpperOuter_Btn.clicked.connect(self.lip_left_upper_outer_command)
        self.TopolDefine_window.Lip_L_LowerSide_Btn.clicked.connect(self.lip_left_lower_side_command)
        self.TopolDefine_window.Lip_L_LowerSide_02_Btn.clicked.connect(self.lip_left_lower_side_02_command)
        self.TopolDefine_window.Lip_L_LowerOuter_Btn.clicked.connect(self.lip_left_lower_outer_command)
        self.TopolDefine_window.Lip_R_UpperSide_Btn.clicked.connect(self.lip_right_upper_side_command)
        self.TopolDefine_window.Lip_R_UpperSide_02_Btn.clicked.connect(self.lip_right_upper_side_02_command)
        self.TopolDefine_window.Lip_R_UpperOuter_Btn.clicked.connect(self.lip_right_upper_outer_command)
        self.TopolDefine_window.Lip_R_LowerSide_Btn.clicked.connect(self.lip_right_lower_side_command)
        self.TopolDefine_window.Lip_R_LowerSide_02_Btn.clicked.connect(self.lip_right_lower_side_02_command)
        self.TopolDefine_window.Lip_R_LowerOuter_Btn.clicked.connect(self.lip_right_lower_outer_command)
        self.TopolDefine_window.Lip_Jaw_Btn.clicked.connect(self.lip_jaw_command)
        self.TopolDefine_window.Eye_L_blink_Btn.clicked.connect(self.eye_left_blink_command)
        self.TopolDefine_window.Eye_R_blink_Btn.clicked.connect(self.eye_right_blink_command)
        self.TopolDefine_window.Eye_L_lower_Btn.clicked.connect(self.eye_left_lower_command)
        self.TopolDefine_window.Eye_R_lower_Btn.clicked.connect(self.eye_right_lower_command)
        self.TopolDefine_window.Eye_L_lacrimal_Btn.clicked.connect(self.eye_left_lacrimal_command)
        self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.clicked.connect(self.eye_left_lacrimal_upper_command)
        self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.clicked.connect(self.eye_left_lacrimal_lower_command)
        self.TopolDefine_window.Eye_R_lacrimal_Btn.clicked.connect(self.eye_right_lacrimal_command)
        self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.clicked.connect(self.eye_right_lacrimal_upper_command)
        self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.clicked.connect(self.eye_right_lacrimal_lower_command)
        self.TopolDefine_window.Eye_L_back_Btn.clicked.connect(self.eye_left_back_command)
        self.TopolDefine_window.Eye_L_back_upper_Btn.clicked.connect(self.eye_left_back_upper_command)
        self.TopolDefine_window.Eye_L_back_lower_Btn.clicked.connect(self.eye_left_back_lower_command)
        self.TopolDefine_window.Eye_L_double_Btn.clicked.connect(self.eye_left_double_command)
        self.TopolDefine_window.Eye_R_back_Btn.clicked.connect(self.eye_right_back_command)
        self.TopolDefine_window.Eye_R_back_upper_Btn.clicked.connect(self.eye_right_back_upper_command)
        self.TopolDefine_window.Eye_R_back_lower_Btn.clicked.connect(self.eye_right_back_lower_command)
        self.TopolDefine_window.Eye_R_double_Btn.clicked.connect(self.eye_right_double_command)
        self.TopolDefine_window.Cheek_L_Btn.clicked.connect(self.cheek_left_command)
        self.TopolDefine_window.Cheek_L_upper_Btn.clicked.connect(self.cheek_left_upper_command)
        self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.clicked.connect(self.cheek_left_outer_orbicularis_command)
        self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.clicked.connect(self.cheek_left_inner_orbicularis_command)
        self.TopolDefine_window.Cheek_L_lower_Btn.clicked.connect(self.cheek_left_lower_command)
        self.TopolDefine_window.Cheek_L_lip_lid_Btn.clicked.connect(self.cheek_left_lip_lid_command)
        self.TopolDefine_window.Cheek_R_Btn.clicked.connect(self.cheek_right_command)
        self.TopolDefine_window.Cheek_R_upper_Btn.clicked.connect(self.cheek_right_upper_command)
        self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.clicked.connect(self.cheek_right_outer_orbicularis_command)
        self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.clicked.connect(self.cheek_right_inner_orbicularis_command)
        self.TopolDefine_window.Cheek_R_lower_Btn.clicked.connect(self.cheek_right_lower_command)
        self.TopolDefine_window.Cheek_R_lip_lid_Btn.clicked.connect(self.cheek_right_lip_lid_command)
        self.TopolDefine_window.Nose_L_Btn.clicked.connect(self.nose_left_command)
        self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.clicked.connect(self.nose_left_nasalis_transverse_command)
        self.TopolDefine_window.Nose_L_procerus_Btn.clicked.connect(self.nose_left_procerus_command)
        self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.clicked.connect(self.nose_left_nasolabial_fold_command)
        self.TopolDefine_window.Nose_R_Btn.clicked.connect(self.nose_right_command)
        self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.clicked.connect(self.nose_right_nasalis_transverse_command)
        self.TopolDefine_window.Nose_R_procerus_Btn.clicked.connect(self.nose_right_procerus_command)
        self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.clicked.connect(self.nose_right_nasolabial_fold_command)
        self.TopolDefine_window.Nose_Center_Btn.clicked.connect(self.nose_center_command)
        self.TopolDefine_window.Nose_Lower_Btn.clicked.connect(self.nose_lower_command)
        self.TopolDefine_window.Nose_depressor_septi_Btn.clicked.connect(self.nose_depressor_septi_command)
        self.TopolDefine_window.Brow_L_Btn.clicked.connect(self.brow_left_command)
        self.TopolDefine_window.Brow_L_medial_fibers_Btn.clicked.connect(self.brow_left_medial_fibers_command)
        self.TopolDefine_window.Brow_L_lateral_fibers_Btn.clicked.connect(self.brow_left_lateral_fibers_command)
        self.TopolDefine_window.Brow_L_procerus_Btn.clicked.connect(self.brow_left_procerus_command)
        self.TopolDefine_window.Brow_R_Btn.clicked.connect(self.brow_right_command)
        self.TopolDefine_window.Brow_R_medial_fibers_Btn.clicked.connect(self.brow_right_medial_fibers_command)
        self.TopolDefine_window.Brow_R_lateral_fibers_Btn.clicked.connect(self.brow_right_lateral_fibers_command)
        self.TopolDefine_window.Brow_R_procerus_Btn.clicked.connect(self.brow_right_procerus_command)
        self.TopolDefine_window.Brow_L_02_Btn.clicked.connect(self.brow_left_02_command)
        self.TopolDefine_window.Brow_R_02_Btn.clicked.connect(self.brow_right_02_command)
        self.TopolDefine_window.Brow_L_03_Btn.clicked.connect(self.brow_left_03_command)
        self.TopolDefine_window.Brow_R_03_Btn.clicked.connect(self.brow_right_03_command)
        self.TopolDefine_window.Brow_Center_Btn.clicked.connect(self.brow_center_command)
        self.TopolDefine_window.Oral_Upper_teeth_Btn.clicked.connect(self.oral_upper_teeth_command)
        self.TopolDefine_window.Oral_Lower_teeth_Btn.clicked.connect(self.oral_lower_teeth_command)
        self.TopolDefine_window.Oral_Tongue_Btn.clicked.connect(self.oral_tongue_command)
        self.TopolDefine_window.Oral_Tongue_02_Btn.clicked.connect(self.oral_tongue_02_command)
        self.TopolDefine_window.Oral_Tongue_03_Btn.clicked.connect(self.oral_tongue_03_command)
        self.TopolDefine_window.EyeBall_L_Btn.clicked.connect(self.eye_ball_left_command)
        self.TopolDefine_window.EyeBall_R_Btn.clicked.connect(self.eye_ball_right_command)
        self.TopolDefine_window.LipCorner_L_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipCorner_L_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipCorner_L_Btn)
        LipCorner_L_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipCorner_L_Btn)
        LipCorner_L_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipCorner_L_Btn)
        self.TopolDefine_window.LipCorner_L_Btn.addAction(LipCorner_L_Btn_first_action)
        self.TopolDefine_window.LipCorner_L_Btn.addAction(LipCorner_L_Btn_all_action)
        self.TopolDefine_window.LipCorner_L_Btn.addAction(LipCorner_L_Btn_reset_action)
        LipCorner_L_Btn_first_action.triggered.connect(self.lip_corner_left_first_popup_command)
        LipCorner_L_Btn_all_action.triggered.connect(self.lip_corner_left_all_popup_command)
        LipCorner_L_Btn_reset_action.triggered.connect(self.lip_corner_left_reset_popup_command)
        self.TopolDefine_window.LipCorner_lower_L_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipCorner_lower_L_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipCorner_lower_L_Btn)
        LipCorner_lower_L_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipCorner_lower_L_Btn)
        LipCorner_lower_L_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipCorner_lower_L_Btn)
        self.TopolDefine_window.LipCorner_lower_L_Btn.addAction(LipCorner_lower_L_Btn_first_action)
        self.TopolDefine_window.LipCorner_lower_L_Btn.addAction(LipCorner_lower_L_Btn_all_action)
        self.TopolDefine_window.LipCorner_lower_L_Btn.addAction(LipCorner_lower_L_Btn_reset_action)
        LipCorner_lower_L_Btn_first_action.triggered.connect(self.lip_corner_lower_left_first_popup_command)
        LipCorner_lower_L_Btn_all_action.triggered.connect(self.lip_corner_lower_left_all_popup_command)
        LipCorner_lower_L_Btn_reset_action.triggered.connect(self.lip_corner_lower_left_reset_popup_command)
        self.TopolDefine_window.LipCorner_R_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipCorner_R_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipCorner_R_Btn)
        LipCorner_R_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipCorner_R_Btn)
        LipCorner_R_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipCorner_R_Btn)
        self.TopolDefine_window.LipCorner_R_Btn.addAction(LipCorner_R_Btn_first_action)
        self.TopolDefine_window.LipCorner_R_Btn.addAction(LipCorner_R_Btn_all_action)
        self.TopolDefine_window.LipCorner_R_Btn.addAction(LipCorner_R_Btn_reset_action)
        LipCorner_R_Btn_first_action.triggered.connect(self.lip_corner_right_first_popup_command)
        LipCorner_R_Btn_all_action.triggered.connect(self.lip_corner_right_all_popup_command)
        LipCorner_R_Btn_reset_action.triggered.connect(self.lip_corner_right_reset_popup_command)
        self.TopolDefine_window.LipCorner_lower_R_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipCorner_lower_R_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipCorner_lower_R_Btn)
        LipCorner_lower_R_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipCorner_lower_R_Btn)
        LipCorner_lower_R_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipCorner_lower_R_Btn)
        self.TopolDefine_window.LipCorner_lower_R_Btn.addAction(LipCorner_lower_R_Btn_first_action)
        self.TopolDefine_window.LipCorner_lower_R_Btn.addAction(LipCorner_lower_R_Btn_all_action)
        self.TopolDefine_window.LipCorner_lower_R_Btn.addAction(LipCorner_lower_R_Btn_reset_action)
        LipCorner_lower_R_Btn_first_action.triggered.connect(self.lip_corner_lower_right_first_popup_command)
        LipCorner_lower_R_Btn_all_action.triggered.connect(self.lip_corner_lower_right_all_popup_command)
        LipCorner_lower_R_Btn_reset_action.triggered.connect(self.lip_corner_lower_right_reset_popup_command)
        self.TopolDefine_window.LipUpper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipUpper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipUpper_Btn)
        LipUpper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipUpper_Btn)
        LipUpper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipUpper_Btn)
        self.TopolDefine_window.LipUpper_Btn.addAction(LipUpper_Btn_first_action)
        self.TopolDefine_window.LipUpper_Btn.addAction(LipUpper_Btn_all_action)
        self.TopolDefine_window.LipUpper_Btn.addAction(LipUpper_Btn_reset_action)
        LipUpper_Btn_first_action.triggered.connect(self.lip_upper_first_popup_command)
        LipUpper_Btn_all_action.triggered.connect(self.lip_upper_all_popup_command)
        LipUpper_Btn_reset_action.triggered.connect(self.lip_upper_reset_popup_command)
        self.TopolDefine_window.LipLower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipLower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipLower_Btn)
        LipLower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipLower_Btn)
        LipLower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipLower_Btn)
        self.TopolDefine_window.LipLower_Btn.addAction(LipLower_Btn_first_action)
        self.TopolDefine_window.LipLower_Btn.addAction(LipLower_Btn_all_action)
        self.TopolDefine_window.LipLower_Btn.addAction(LipLower_Btn_reset_action)
        LipLower_Btn_first_action.triggered.connect(self.lip_lower_first_popup_command)
        LipLower_Btn_all_action.triggered.connect(self.lip_lower_all_popup_command)
        LipLower_Btn_reset_action.triggered.connect(self.lip_lower_reset_popup_command)
        self.TopolDefine_window.LipLower_Outer_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        LipLower_Outer_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.LipLower_Outer_Btn)
        LipLower_Outer_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.LipLower_Outer_Btn)
        LipLower_Outer_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.LipLower_Outer_Btn)
        self.TopolDefine_window.LipLower_Outer_Btn.addAction(LipLower_Outer_Btn_first_action)
        self.TopolDefine_window.LipLower_Outer_Btn.addAction(LipLower_Outer_Btn_all_action)
        self.TopolDefine_window.LipLower_Outer_Btn.addAction(LipLower_Outer_Btn_reset_action)
        LipLower_Outer_Btn_first_action.triggered.connect(self.lip_lower_outer_first_popup_command)
        LipLower_Outer_Btn_all_action.triggered.connect(self.lip_lower_outer_all_popup_command)
        LipLower_Outer_Btn_reset_action.triggered.connect(self.lip_lower_outer_reset_popup_command)
        self.TopolDefine_window.Lip_L_UpperSide_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_L_UpperSide_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_L_UpperSide_Btn)
        Lip_L_UpperSide_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_L_UpperSide_Btn)
        Lip_L_UpperSide_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_L_UpperSide_Btn)
        self.TopolDefine_window.Lip_L_UpperSide_Btn.addAction(Lip_L_UpperSide_Btn_first_action)
        self.TopolDefine_window.Lip_L_UpperSide_Btn.addAction(Lip_L_UpperSide_Btn_all_action)
        self.TopolDefine_window.Lip_L_UpperSide_Btn.addAction(Lip_L_UpperSide_Btn_reset_action)
        Lip_L_UpperSide_Btn_first_action.triggered.connect(self.lip_left_upper_side_first_popup_command)
        Lip_L_UpperSide_Btn_all_action.triggered.connect(self.lip_left_upper_side_all_popup_command)
        Lip_L_UpperSide_Btn_reset_action.triggered.connect(self.lip_left_upper_side_reset_popup_command)
        self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_L_UpperSide_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_L_UpperSide_02_Btn)
        Lip_L_UpperSide_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_L_UpperSide_02_Btn)
        Lip_L_UpperSide_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_L_UpperSide_02_Btn)
        self.TopolDefine_window.Lip_L_UpperSide_02_Btn.addAction(Lip_L_UpperSide_02_Btn_first_action)
        self.TopolDefine_window.Lip_L_UpperSide_02_Btn.addAction(Lip_L_UpperSide_02_Btn_all_action)
        self.TopolDefine_window.Lip_L_UpperSide_02_Btn.addAction(Lip_L_UpperSide_02_Btn_reset_action)
        Lip_L_UpperSide_02_Btn_first_action.triggered.connect(self.lip_left_upper_side_02_first_popup_command)
        Lip_L_UpperSide_02_Btn_all_action.triggered.connect(self.lip_left_upper_side_02_all_popup_command)
        Lip_L_UpperSide_02_Btn_reset_action.triggered.connect(self.lip_left_upper_side_02_reset_popup_command)
        self.TopolDefine_window.Lip_L_UpperOuter_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_L_UpperOuter_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_L_UpperOuter_Btn)
        Lip_L_UpperOuter_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_L_UpperOuter_Btn)
        Lip_L_UpperOuter_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_L_UpperOuter_Btn)
        self.TopolDefine_window.Lip_L_UpperOuter_Btn.addAction(Lip_L_UpperOuter_Btn_first_action)
        self.TopolDefine_window.Lip_L_UpperOuter_Btn.addAction(Lip_L_UpperOuter_Btn_all_action)
        self.TopolDefine_window.Lip_L_UpperOuter_Btn.addAction(Lip_L_UpperOuter_Btn_reset_action)
        Lip_L_UpperOuter_Btn_first_action.triggered.connect(self.lip_left_upper_outer_first_popup_command)
        Lip_L_UpperOuter_Btn_all_action.triggered.connect(self.lip_left_upper_outer_all_popup_command)
        Lip_L_UpperOuter_Btn_reset_action.triggered.connect(self.lip_left_upper_outer_reset_popup_command)
        self.TopolDefine_window.Lip_L_LowerSide_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_L_LowerSide_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_L_LowerSide_Btn)
        Lip_L_LowerSide_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_L_LowerSide_Btn)
        Lip_L_LowerSide_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_L_LowerSide_Btn)
        self.TopolDefine_window.Lip_L_LowerSide_Btn.addAction(Lip_L_LowerSide_Btn_first_action)
        self.TopolDefine_window.Lip_L_LowerSide_Btn.addAction(Lip_L_LowerSide_Btn_all_action)
        self.TopolDefine_window.Lip_L_LowerSide_Btn.addAction(Lip_L_LowerSide_Btn_reset_action)
        Lip_L_LowerSide_Btn_first_action.triggered.connect(self.lip_left_lower_side_first_popup_command)
        Lip_L_LowerSide_Btn_all_action.triggered.connect(self.lip_left_lower_side_all_popup_command)
        Lip_L_LowerSide_Btn_reset_action.triggered.connect(self.lip_left_lower_side_reset_popup_command)
        self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_L_LowerSide_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_L_LowerSide_02_Btn)
        Lip_L_LowerSide_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_L_LowerSide_02_Btn)
        Lip_L_LowerSide_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_L_LowerSide_02_Btn)
        self.TopolDefine_window.Lip_L_LowerSide_02_Btn.addAction(Lip_L_LowerSide_02_Btn_first_action)
        self.TopolDefine_window.Lip_L_LowerSide_02_Btn.addAction(Lip_L_LowerSide_02_Btn_all_action)
        self.TopolDefine_window.Lip_L_LowerSide_02_Btn.addAction(Lip_L_LowerSide_02_Btn_reset_action)
        Lip_L_LowerSide_02_Btn_first_action.triggered.connect(self.lip_left_lower_side_02_first_popup_command)
        Lip_L_LowerSide_02_Btn_all_action.triggered.connect(self.lip_left_lower_side_02_all_popup_command)
        Lip_L_LowerSide_02_Btn_reset_action.triggered.connect(self.lip_left_lower_side_02_reset_popup_command)
        self.TopolDefine_window.Lip_L_LowerOuter_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_L_LowerOuter_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_L_LowerOuter_Btn)
        Lip_L_LowerOuter_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_L_LowerOuter_Btn)
        Lip_L_LowerOuter_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_L_LowerOuter_Btn)
        self.TopolDefine_window.Lip_L_LowerOuter_Btn.addAction(Lip_L_LowerOuter_Btn_first_action)
        self.TopolDefine_window.Lip_L_LowerOuter_Btn.addAction(Lip_L_LowerOuter_Btn_all_action)
        self.TopolDefine_window.Lip_L_LowerOuter_Btn.addAction(Lip_L_LowerOuter_Btn_reset_action)
        Lip_L_LowerOuter_Btn_first_action.triggered.connect(self.lip_left_lower_outer_first_popup_command)
        Lip_L_LowerOuter_Btn_all_action.triggered.connect(self.lip_left_lower_outer_all_popup_command)
        Lip_L_LowerOuter_Btn_reset_action.triggered.connect(self.lip_left_lower_outer_reset_popup_command)
        self.TopolDefine_window.Lip_R_UpperSide_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_R_UpperSide_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_R_UpperSide_Btn)
        Lip_R_UpperSide_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_R_UpperSide_Btn)
        Lip_R_UpperSide_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_R_UpperSide_Btn)
        self.TopolDefine_window.Lip_R_UpperSide_Btn.addAction(Lip_R_UpperSide_Btn_first_action)
        self.TopolDefine_window.Lip_R_UpperSide_Btn.addAction(Lip_R_UpperSide_Btn_all_action)
        self.TopolDefine_window.Lip_R_UpperSide_Btn.addAction(Lip_R_UpperSide_Btn_reset_action)
        Lip_R_UpperSide_Btn_first_action.triggered.connect(self.lip_right_upper_side_first_popup_command)
        Lip_R_UpperSide_Btn_all_action.triggered.connect(self.lip_right_upper_side_all_popup_command)
        Lip_R_UpperSide_Btn_reset_action.triggered.connect(self.lip_right_upper_side_reset_popup_command)
        self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_R_UpperSide_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_R_UpperSide_02_Btn)
        Lip_R_UpperSide_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_R_UpperSide_02_Btn)
        Lip_R_UpperSide_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_R_UpperSide_02_Btn)
        self.TopolDefine_window.Lip_R_UpperSide_02_Btn.addAction(Lip_R_UpperSide_02_Btn_first_action)
        self.TopolDefine_window.Lip_R_UpperSide_02_Btn.addAction(Lip_R_UpperSide_02_Btn_all_action)
        self.TopolDefine_window.Lip_R_UpperSide_02_Btn.addAction(Lip_R_UpperSide_02_Btn_reset_action)
        Lip_R_UpperSide_02_Btn_first_action.triggered.connect(self.lip_right_upper_side_02_first_popup_command)
        Lip_R_UpperSide_02_Btn_all_action.triggered.connect(self.lip_right_upper_side_02_all_popup_command)
        Lip_R_UpperSide_02_Btn_reset_action.triggered.connect(self.lip_right_upper_side_02_reset_popup_command)
        self.TopolDefine_window.Lip_R_UpperOuter_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_R_UpperOuter_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_R_UpperOuter_Btn)
        Lip_R_UpperOuter_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_R_UpperOuter_Btn)
        Lip_R_UpperOuter_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_R_UpperOuter_Btn)
        self.TopolDefine_window.Lip_R_UpperOuter_Btn.addAction(Lip_R_UpperOuter_Btn_first_action)
        self.TopolDefine_window.Lip_R_UpperOuter_Btn.addAction(Lip_R_UpperOuter_Btn_all_action)
        self.TopolDefine_window.Lip_R_UpperOuter_Btn.addAction(Lip_R_UpperOuter_Btn_reset_action)
        Lip_R_UpperOuter_Btn_first_action.triggered.connect(self.lip_right_upper_outer_first_popup_command)
        Lip_R_UpperOuter_Btn_all_action.triggered.connect(self.lip_right_upper_outer_all_popup_command)
        Lip_R_UpperOuter_Btn_reset_action.triggered.connect(self.lip_right_upper_outer_reset_popup_command)
        self.TopolDefine_window.Lip_R_LowerSide_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_R_LowerSide_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_R_LowerSide_Btn)
        Lip_R_LowerSide_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_R_LowerSide_Btn)
        Lip_R_LowerSide_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_R_LowerSide_Btn)
        self.TopolDefine_window.Lip_R_LowerSide_Btn.addAction(Lip_R_LowerSide_Btn_first_action)
        self.TopolDefine_window.Lip_R_LowerSide_Btn.addAction(Lip_R_LowerSide_Btn_all_action)
        self.TopolDefine_window.Lip_R_LowerSide_Btn.addAction(Lip_R_LowerSide_Btn_reset_action)
        Lip_R_LowerSide_Btn_first_action.triggered.connect(self.lip_right_lower_side_first_popup_command)
        Lip_R_LowerSide_Btn_all_action.triggered.connect(self.lip_right_lower_side_all_popup_command)
        Lip_R_LowerSide_Btn_reset_action.triggered.connect(self.lip_right_lower_side_reset_popup_command)
        self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_R_LowerSide_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_R_LowerSide_02_Btn)
        Lip_R_LowerSide_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_R_LowerSide_02_Btn)
        Lip_R_LowerSide_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_R_LowerSide_02_Btn)
        self.TopolDefine_window.Lip_R_LowerSide_02_Btn.addAction(Lip_R_LowerSide_02_Btn_first_action)
        self.TopolDefine_window.Lip_R_LowerSide_02_Btn.addAction(Lip_R_LowerSide_02_Btn_all_action)
        self.TopolDefine_window.Lip_R_LowerSide_02_Btn.addAction(Lip_R_LowerSide_02_Btn_reset_action)
        Lip_R_LowerSide_02_Btn_first_action.triggered.connect(self.lip_right_lower_side_02_first_popup_command)
        Lip_R_LowerSide_02_Btn_all_action.triggered.connect(self.lip_right_lower_side_02_all_popup_command)
        Lip_R_LowerSide_02_Btn_reset_action.triggered.connect(self.lip_right_lower_side_02_reset_popup_command)
        self.TopolDefine_window.Lip_R_LowerOuter_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_R_LowerOuter_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_R_LowerOuter_Btn)
        Lip_R_LowerOuter_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_R_LowerOuter_Btn)
        Lip_R_LowerOuter_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_R_LowerOuter_Btn)
        self.TopolDefine_window.Lip_R_LowerOuter_Btn.addAction(Lip_R_LowerOuter_Btn_first_action)
        self.TopolDefine_window.Lip_R_LowerOuter_Btn.addAction(Lip_R_LowerOuter_Btn_all_action)
        self.TopolDefine_window.Lip_R_LowerOuter_Btn.addAction(Lip_R_LowerOuter_Btn_reset_action)
        Lip_R_LowerOuter_Btn_first_action.triggered.connect(self.lip_right_lower_outer_first_popup_command)
        Lip_R_LowerOuter_Btn_all_action.triggered.connect(self.lip_right_lower_outer_all_popup_command)
        Lip_R_LowerOuter_Btn_reset_action.triggered.connect(self.lip_right_lower_outer_reset_popup_command)
        self.TopolDefine_window.Lip_Jaw_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Lip_Jaw_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Lip_Jaw_Btn)
        Lip_Jaw_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Lip_Jaw_Btn)
        Lip_Jaw_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Lip_Jaw_Btn)
        self.TopolDefine_window.Lip_Jaw_Btn.addAction(Lip_Jaw_Btn_first_action)
        self.TopolDefine_window.Lip_Jaw_Btn.addAction(Lip_Jaw_Btn_all_action)
        self.TopolDefine_window.Lip_Jaw_Btn.addAction(Lip_Jaw_Btn_reset_action)
        Lip_Jaw_Btn_first_action.triggered.connect(self.lip_jaw_first_popup_command)
        Lip_Jaw_Btn_all_action.triggered.connect(self.lip_jaw_all_popup_command)
        Lip_Jaw_Btn_reset_action.triggered.connect(self.lip_jaw_reset_popup_command)
        self.TopolDefine_window.Eye_L_blink_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_blink_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_blink_Btn)
        Eye_L_blink_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_blink_Btn)
        Eye_L_blink_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_blink_Btn)
        self.TopolDefine_window.Eye_L_blink_Btn.addAction(Eye_L_blink_Btn_first_action)
        self.TopolDefine_window.Eye_L_blink_Btn.addAction(Eye_L_blink_Btn_all_action)
        self.TopolDefine_window.Eye_L_blink_Btn.addAction(Eye_L_blink_Btn_reset_action)
        Eye_L_blink_Btn_first_action.triggered.connect(self.eye_left_blink_first_popup_command)
        Eye_L_blink_Btn_all_action.triggered.connect(self.eye_left_blink_all_popup_command)
        Eye_L_blink_Btn_reset_action.triggered.connect(self.eye_left_blink_reset_popup_command)
        self.TopolDefine_window.Eye_L_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_lower_Btn)
        Eye_L_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_lower_Btn)
        Eye_L_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_lower_Btn)
        self.TopolDefine_window.Eye_L_lower_Btn.addAction(Eye_L_lower_Btn_first_action)
        self.TopolDefine_window.Eye_L_lower_Btn.addAction(Eye_L_lower_Btn_all_action)
        self.TopolDefine_window.Eye_L_lower_Btn.addAction(Eye_L_lower_Btn_reset_action)
        Eye_L_lower_Btn_first_action.triggered.connect(self.eye_left_lower_first_popup_command)
        Eye_L_lower_Btn_all_action.triggered.connect(self.eye_left_lower_all_popup_command)
        Eye_L_lower_Btn_reset_action.triggered.connect(self.eye_left_lower_reset_popup_command)
        self.TopolDefine_window.Eye_L_lacrimal_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_lacrimal_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_lacrimal_Btn)
        Eye_L_lacrimal_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_lacrimal_Btn)
        Eye_L_lacrimal_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_lacrimal_Btn)
        self.TopolDefine_window.Eye_L_lacrimal_Btn.addAction(Eye_L_lacrimal_Btn_first_action)
        self.TopolDefine_window.Eye_L_lacrimal_Btn.addAction(Eye_L_lacrimal_Btn_all_action)
        self.TopolDefine_window.Eye_L_lacrimal_Btn.addAction(Eye_L_lacrimal_Btn_reset_action)
        Eye_L_lacrimal_Btn_first_action.triggered.connect(self.eye_left_lacrimal_first_popup_command)
        Eye_L_lacrimal_Btn_all_action.triggered.connect(self.eye_left_lacrimal_all_popup_command)
        Eye_L_lacrimal_Btn_reset_action.triggered.connect(self.eye_left_lacrimal_reset_popup_command)
        self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_lacrimal_upper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_lacrimal_upper_Btn)
        Eye_L_lacrimal_upper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_lacrimal_upper_Btn)
        Eye_L_lacrimal_upper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_lacrimal_upper_Btn)
        self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.addAction(Eye_L_lacrimal_upper_Btn_first_action)
        self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.addAction(Eye_L_lacrimal_upper_Btn_all_action)
        self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.addAction(Eye_L_lacrimal_upper_Btn_reset_action)
        Eye_L_lacrimal_upper_Btn_first_action.triggered.connect(self.eye_left_lacrimal_upper_first_popup_command)
        Eye_L_lacrimal_upper_Btn_all_action.triggered.connect(self.eye_left_lacrimal_upper_all_popup_command)
        Eye_L_lacrimal_upper_Btn_reset_action.triggered.connect(self.eye_left_lacrimal_upper_reset_popup_command)
        self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_lacrimal_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_lacrimal_lower_Btn)
        Eye_L_lacrimal_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_lacrimal_lower_Btn)
        Eye_L_lacrimal_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_lacrimal_lower_Btn)
        self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.addAction(Eye_L_lacrimal_lower_Btn_first_action)
        self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.addAction(Eye_L_lacrimal_lower_Btn_all_action)
        self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.addAction(Eye_L_lacrimal_lower_Btn_reset_action)
        Eye_L_lacrimal_lower_Btn_first_action.triggered.connect(self.eye_left_lacrimal_lower_first_popup_command)
        Eye_L_lacrimal_lower_Btn_all_action.triggered.connect(self.eye_left_lacrimal_lower_all_popup_command)
        Eye_L_lacrimal_lower_Btn_reset_action.triggered.connect(self.eye_left_lacrimal_lower_reset_popup_command)
        self.TopolDefine_window.Eye_L_back_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_back_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_back_Btn)
        Eye_L_back_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_back_Btn)
        Eye_L_back_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_back_Btn)
        self.TopolDefine_window.Eye_L_back_Btn.addAction(Eye_L_back_Btn_first_action)
        self.TopolDefine_window.Eye_L_back_Btn.addAction(Eye_L_back_Btn_all_action)
        self.TopolDefine_window.Eye_L_back_Btn.addAction(Eye_L_back_Btn_reset_action)
        Eye_L_back_Btn_first_action.triggered.connect(self.eye_left_back_first_popup_command)
        Eye_L_back_Btn_all_action.triggered.connect(self.eye_left_back_all_popup_command)
        Eye_L_back_Btn_reset_action.triggered.connect(self.eye_left_back_reset_popup_command)
        self.TopolDefine_window.Eye_L_back_upper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_back_upper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_back_upper_Btn)
        Eye_L_back_upper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_back_upper_Btn)
        Eye_L_back_upper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_back_upper_Btn)
        self.TopolDefine_window.Eye_L_back_upper_Btn.addAction(Eye_L_back_upper_Btn_first_action)
        self.TopolDefine_window.Eye_L_back_upper_Btn.addAction(Eye_L_back_upper_Btn_all_action)
        self.TopolDefine_window.Eye_L_back_upper_Btn.addAction(Eye_L_back_upper_Btn_reset_action)
        Eye_L_back_upper_Btn_first_action.triggered.connect(self.eye_left_back_upper_first_popup_command)
        Eye_L_back_upper_Btn_all_action.triggered.connect(self.eye_left_back_upper_all_popup_command)
        Eye_L_back_upper_Btn_reset_action.triggered.connect(self.eye_left_back_upper_reset_popup_command)
        self.TopolDefine_window.Eye_L_back_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_back_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_back_lower_Btn)
        Eye_L_back_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_back_lower_Btn)
        Eye_L_back_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_back_lower_Btn)
        self.TopolDefine_window.Eye_L_back_lower_Btn.addAction(Eye_L_back_lower_Btn_first_action)
        self.TopolDefine_window.Eye_L_back_lower_Btn.addAction(Eye_L_back_lower_Btn_all_action)
        self.TopolDefine_window.Eye_L_back_lower_Btn.addAction(Eye_L_back_lower_Btn_reset_action)
        Eye_L_back_lower_Btn_first_action.triggered.connect(self.eye_left_back_lower_first_popup_command)
        Eye_L_back_lower_Btn_all_action.triggered.connect(self.eye_left_back_lower_all_popup_command)
        Eye_L_back_lower_Btn_reset_action.triggered.connect(self.eye_left_back_lower_reset_popup_command)
        self.TopolDefine_window.Eye_L_double_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_L_double_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_L_double_Btn)
        Eye_L_double_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_L_double_Btn)
        Eye_L_double_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_L_double_Btn)
        self.TopolDefine_window.Eye_L_double_Btn.addAction(Eye_L_double_Btn_first_action)
        self.TopolDefine_window.Eye_L_double_Btn.addAction(Eye_L_double_Btn_all_action)
        self.TopolDefine_window.Eye_L_double_Btn.addAction(Eye_L_double_Btn_reset_action)
        Eye_L_double_Btn_first_action.triggered.connect(self.eye_left_double_first_popup_command)
        Eye_L_double_Btn_all_action.triggered.connect(self.eye_left_double_all_popup_command)
        Eye_L_double_Btn_reset_action.triggered.connect(self.eye_left_double_reset_popup_command)
        self.TopolDefine_window.Eye_R_blink_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_blink_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_blink_Btn)
        Eye_R_blink_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_blink_Btn)
        Eye_R_blink_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_blink_Btn)
        self.TopolDefine_window.Eye_R_blink_Btn.addAction(Eye_R_blink_Btn_first_action)
        self.TopolDefine_window.Eye_R_blink_Btn.addAction(Eye_R_blink_Btn_all_action)
        self.TopolDefine_window.Eye_R_blink_Btn.addAction(Eye_R_blink_Btn_reset_action)
        Eye_R_blink_Btn_first_action.triggered.connect(self.eye_right_blink_first_popup_command)
        Eye_R_blink_Btn_all_action.triggered.connect(self.eye_right_blink_all_popup_command)
        Eye_R_blink_Btn_reset_action.triggered.connect(self.eye_right_blink_reset_popup_command)
        self.TopolDefine_window.Eye_R_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_lower_Btn)
        Eye_R_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_lower_Btn)
        Eye_R_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_lower_Btn)
        self.TopolDefine_window.Eye_R_lower_Btn.addAction(Eye_R_lower_Btn_first_action)
        self.TopolDefine_window.Eye_R_lower_Btn.addAction(Eye_R_lower_Btn_all_action)
        self.TopolDefine_window.Eye_R_lower_Btn.addAction(Eye_R_lower_Btn_reset_action)
        Eye_R_lower_Btn_first_action.triggered.connect(self.eye_right_lower_first_popup_command)
        Eye_R_lower_Btn_all_action.triggered.connect(self.eye_right_lower_all_popup_command)
        Eye_R_lower_Btn_reset_action.triggered.connect(self.eye_right_lower_reset_popup_command)
        self.TopolDefine_window.Eye_R_lacrimal_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_lacrimal_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_lacrimal_Btn)
        Eye_R_lacrimal_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_lacrimal_Btn)
        Eye_R_lacrimal_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_lacrimal_Btn)
        self.TopolDefine_window.Eye_R_lacrimal_Btn.addAction(Eye_R_lacrimal_Btn_first_action)
        self.TopolDefine_window.Eye_R_lacrimal_Btn.addAction(Eye_R_lacrimal_Btn_all_action)
        self.TopolDefine_window.Eye_R_lacrimal_Btn.addAction(Eye_R_lacrimal_Btn_reset_action)
        Eye_R_lacrimal_Btn_first_action.triggered.connect(self.eye_right_lacrimal_first_popup_command)
        Eye_R_lacrimal_Btn_all_action.triggered.connect(self.eye_right_lacrimal_all_popup_command)
        Eye_R_lacrimal_Btn_reset_action.triggered.connect(self.eye_right_lacrimal_reset_popup_command)
        self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_lacrimal_upper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_lacrimal_upper_Btn)
        Eye_R_lacrimal_upper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_lacrimal_upper_Btn)
        Eye_R_lacrimal_upper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_lacrimal_upper_Btn)
        self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.addAction(Eye_R_lacrimal_upper_Btn_first_action)
        self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.addAction(Eye_R_lacrimal_upper_Btn_all_action)
        self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.addAction(Eye_R_lacrimal_upper_Btn_reset_action)
        Eye_R_lacrimal_upper_Btn_first_action.triggered.connect(self.eye_right_lacrimal_upper_first_popup_command)
        Eye_R_lacrimal_upper_Btn_all_action.triggered.connect(self.eye_right_lacrimal_upper_all_popup_command)
        Eye_R_lacrimal_upper_Btn_reset_action.triggered.connect(self.eye_right_lacrimal_upper_reset_popup_command)
        self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_lacrimal_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_lacrimal_lower_Btn)
        Eye_R_lacrimal_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_lacrimal_lower_Btn)
        Eye_R_lacrimal_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_lacrimal_lower_Btn)
        self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.addAction(Eye_R_lacrimal_lower_Btn_first_action)
        self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.addAction(Eye_R_lacrimal_lower_Btn_all_action)
        self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.addAction(Eye_R_lacrimal_lower_Btn_reset_action)
        Eye_R_lacrimal_lower_Btn_first_action.triggered.connect(self.eye_right_lacrimal_lower_first_popup_command)
        Eye_R_lacrimal_lower_Btn_all_action.triggered.connect(self.eye_right_lacrimal_lower_all_popup_command)
        Eye_R_lacrimal_lower_Btn_reset_action.triggered.connect(self.eye_right_lacrimal_lower_reset_popup_command)
        self.TopolDefine_window.Eye_R_back_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_back_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_back_Btn)
        Eye_R_back_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_back_Btn)
        Eye_R_back_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_back_Btn)
        self.TopolDefine_window.Eye_R_back_Btn.addAction(Eye_R_back_Btn_first_action)
        self.TopolDefine_window.Eye_R_back_Btn.addAction(Eye_R_back_Btn_all_action)
        self.TopolDefine_window.Eye_R_back_Btn.addAction(Eye_R_back_Btn_reset_action)
        Eye_R_back_Btn_first_action.triggered.connect(self.eye_right_back_first_popup_command)
        Eye_R_back_Btn_all_action.triggered.connect(self.eye_right_back_all_popup_command)
        Eye_R_back_Btn_reset_action.triggered.connect(self.eye_right_back_reset_popup_command)
        self.TopolDefine_window.Eye_R_back_upper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_back_upper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_back_upper_Btn)
        Eye_R_back_upper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_back_upper_Btn)
        Eye_R_back_upper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_back_upper_Btn)
        self.TopolDefine_window.Eye_R_back_upper_Btn.addAction(Eye_R_back_upper_Btn_first_action)
        self.TopolDefine_window.Eye_R_back_upper_Btn.addAction(Eye_R_back_upper_Btn_all_action)
        self.TopolDefine_window.Eye_R_back_upper_Btn.addAction(Eye_R_back_upper_Btn_reset_action)
        Eye_R_back_upper_Btn_first_action.triggered.connect(self.eye_right_back_upper_first_popup_command)
        Eye_R_back_upper_Btn_all_action.triggered.connect(self.eye_right_back_upper_all_popup_command)
        Eye_R_back_upper_Btn_reset_action.triggered.connect(self.eye_right_back_upper_reset_popup_command)
        self.TopolDefine_window.Eye_R_back_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_back_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_back_lower_Btn)
        Eye_R_back_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_back_lower_Btn)
        Eye_R_back_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_back_lower_Btn)
        self.TopolDefine_window.Eye_R_back_lower_Btn.addAction(Eye_R_back_lower_Btn_first_action)
        self.TopolDefine_window.Eye_R_back_lower_Btn.addAction(Eye_R_back_lower_Btn_all_action)
        self.TopolDefine_window.Eye_R_back_lower_Btn.addAction(Eye_R_back_lower_Btn_reset_action)
        Eye_R_back_lower_Btn_first_action.triggered.connect(self.eye_right_back_lower_first_popup_command)
        Eye_R_back_lower_Btn_all_action.triggered.connect(self.eye_right_back_lower_all_popup_command)
        Eye_R_back_lower_Btn_reset_action.triggered.connect(self.eye_right_back_lower_reset_popup_command)
        self.TopolDefine_window.Eye_R_double_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Eye_R_double_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Eye_R_double_Btn)
        Eye_R_double_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Eye_R_double_Btn)
        Eye_R_double_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Eye_R_double_Btn)
        self.TopolDefine_window.Eye_R_double_Btn.addAction(Eye_R_double_Btn_first_action)
        self.TopolDefine_window.Eye_R_double_Btn.addAction(Eye_R_double_Btn_all_action)
        self.TopolDefine_window.Eye_R_double_Btn.addAction(Eye_R_double_Btn_reset_action)
        Eye_R_double_Btn_first_action.triggered.connect(self.eye_right_double_first_popup_command)
        Eye_R_double_Btn_all_action.triggered.connect(self.eye_right_double_all_popup_command)
        Eye_R_double_Btn_reset_action.triggered.connect(self.eye_right_double_reset_popup_command)
        self.TopolDefine_window.Cheek_L_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_L_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_L_Btn)
        Cheek_L_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_L_Btn)
        Cheek_L_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_L_Btn)
        self.TopolDefine_window.Cheek_L_Btn.addAction(Cheek_L_Btn_first_action)
        self.TopolDefine_window.Cheek_L_Btn.addAction(Cheek_L_Btn_all_action)
        self.TopolDefine_window.Cheek_L_Btn.addAction(Cheek_L_Btn_reset_action)
        Cheek_L_Btn_first_action.triggered.connect(self.cheek_left_first_popup_command)
        Cheek_L_Btn_all_action.triggered.connect(self.cheek_left_all_popup_command)
        Cheek_L_Btn_reset_action.triggered.connect(self.cheek_left_reset_popup_command)
        self.TopolDefine_window.Cheek_L_upper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_L_upper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_L_upper_Btn)
        Cheek_L_upper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_L_upper_Btn)
        Cheek_L_upper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_L_upper_Btn)
        self.TopolDefine_window.Cheek_L_upper_Btn.addAction(Cheek_L_upper_Btn_first_action)
        self.TopolDefine_window.Cheek_L_upper_Btn.addAction(Cheek_L_upper_Btn_all_action)
        self.TopolDefine_window.Cheek_L_upper_Btn.addAction(Cheek_L_upper_Btn_reset_action)
        Cheek_L_upper_Btn_first_action.triggered.connect(self.cheek_left_upper_first_popup_command)
        Cheek_L_upper_Btn_all_action.triggered.connect(self.cheek_left_upper_all_popup_command)
        Cheek_L_upper_Btn_reset_action.triggered.connect(self.cheek_left_upper_reset_popup_command)
        self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_L_outer_orbicularis_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn)
        Cheek_L_outer_orbicularis_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn)
        Cheek_L_outer_orbicularis_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn)
        self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.addAction(Cheek_L_outer_orbicularis_Btn_first_action)
        self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.addAction(Cheek_L_outer_orbicularis_Btn_all_action)
        self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.addAction(Cheek_L_outer_orbicularis_Btn_reset_action)
        Cheek_L_outer_orbicularis_Btn_first_action.triggered.connect(self.cheek_left_outer_orbicularis_first_popup_command)
        Cheek_L_outer_orbicularis_Btn_all_action.triggered.connect(self.cheek_left_outer_orbicularis_all_popup_command)
        Cheek_L_outer_orbicularis_Btn_reset_action.triggered.connect(self.cheek_left_outer_orbicularis_reset_popup_command)
        self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_L_inner_orbicularis_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn)
        Cheek_L_inner_orbicularis_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn)
        Cheek_L_inner_orbicularis_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn)
        self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.addAction(Cheek_L_inner_orbicularis_Btn_first_action)
        self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.addAction(Cheek_L_inner_orbicularis_Btn_all_action)
        self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.addAction(Cheek_L_inner_orbicularis_Btn_reset_action)
        Cheek_L_inner_orbicularis_Btn_first_action.triggered.connect(self.cheek_left_inner_orbicularis_first_popup_command)
        Cheek_L_inner_orbicularis_Btn_all_action.triggered.connect(self.cheek_left_inner_orbicularis_all_popup_command)
        Cheek_L_inner_orbicularis_Btn_reset_action.triggered.connect(self.cheek_left_inner_orbicularis_reset_popup_command)
        self.TopolDefine_window.Cheek_L_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_L_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_L_lower_Btn)
        Cheek_L_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_L_lower_Btn)
        Cheek_L_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_L_lower_Btn)
        self.TopolDefine_window.Cheek_L_lower_Btn.addAction(Cheek_L_lower_Btn_first_action)
        self.TopolDefine_window.Cheek_L_lower_Btn.addAction(Cheek_L_lower_Btn_all_action)
        self.TopolDefine_window.Cheek_L_lower_Btn.addAction(Cheek_L_lower_Btn_reset_action)
        Cheek_L_lower_Btn_first_action.triggered.connect(self.cheek_left_lower_first_popup_command)
        Cheek_L_lower_Btn_all_action.triggered.connect(self.cheek_left_lower_all_popup_command)
        Cheek_L_lower_Btn_reset_action.triggered.connect(self.cheek_left_lower_reset_popup_command)
        self.TopolDefine_window.Cheek_L_lip_lid_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_L_lip_lid_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_L_lip_lid_Btn)
        Cheek_L_lip_lid_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_L_lip_lid_Btn)
        Cheek_L_lip_lid_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_L_lip_lid_Btn)
        self.TopolDefine_window.Cheek_L_lip_lid_Btn.addAction(Cheek_L_lip_lid_Btn_first_action)
        self.TopolDefine_window.Cheek_L_lip_lid_Btn.addAction(Cheek_L_lip_lid_Btn_all_action)
        self.TopolDefine_window.Cheek_L_lip_lid_Btn.addAction(Cheek_L_lip_lid_Btn_reset_action)
        Cheek_L_lip_lid_Btn_first_action.triggered.connect(self.cheek_left_lip_lid_first_popup_command)
        Cheek_L_lip_lid_Btn_all_action.triggered.connect(self.cheek_left_lip_lid_all_popup_command)
        Cheek_L_lip_lid_Btn_reset_action.triggered.connect(self.cheek_left_lip_lid_reset_popup_command)
        self.TopolDefine_window.Cheek_R_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_R_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_R_Btn)
        Cheek_R_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_R_Btn)
        Cheek_R_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_R_Btn)
        self.TopolDefine_window.Cheek_R_Btn.addAction(Cheek_R_Btn_first_action)
        self.TopolDefine_window.Cheek_R_Btn.addAction(Cheek_R_Btn_all_action)
        self.TopolDefine_window.Cheek_R_Btn.addAction(Cheek_R_Btn_reset_action)
        Cheek_R_Btn_first_action.triggered.connect(self.cheek_right_first_popup_command)
        Cheek_R_Btn_all_action.triggered.connect(self.cheek_right_all_popup_command)
        Cheek_R_Btn_reset_action.triggered.connect(self.cheek_right_reset_popup_command)
        self.TopolDefine_window.Cheek_R_upper_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_R_upper_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_R_upper_Btn)
        Cheek_R_upper_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_R_upper_Btn)
        Cheek_R_upper_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_R_upper_Btn)
        self.TopolDefine_window.Cheek_R_upper_Btn.addAction(Cheek_R_upper_Btn_first_action)
        self.TopolDefine_window.Cheek_R_upper_Btn.addAction(Cheek_R_upper_Btn_all_action)
        self.TopolDefine_window.Cheek_R_upper_Btn.addAction(Cheek_R_upper_Btn_reset_action)
        Cheek_R_upper_Btn_first_action.triggered.connect(self.cheek_right_upper_first_popup_command)
        Cheek_R_upper_Btn_all_action.triggered.connect(self.cheek_right_upper_all_popup_command)
        Cheek_R_upper_Btn_reset_action.triggered.connect(self.cheek_right_upper_reset_popup_command)
        self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_R_outer_orbicularis_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn)
        Cheek_R_outer_orbicularis_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn)
        Cheek_R_outer_orbicularis_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn)
        self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.addAction(Cheek_R_outer_orbicularis_Btn_first_action)
        self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.addAction(Cheek_R_outer_orbicularis_Btn_all_action)
        self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.addAction(Cheek_R_outer_orbicularis_Btn_reset_action)
        Cheek_R_outer_orbicularis_Btn_first_action.triggered.connect(self.cheek_right_outer_orbicularis_first_popup_command)
        Cheek_R_outer_orbicularis_Btn_all_action.triggered.connect(self.cheek_right_outer_orbicularis_all_popup_command)
        Cheek_R_outer_orbicularis_Btn_reset_action.triggered.connect(self.cheek_right_outer_orbicularis_reset_popup_command)
        self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_R_inner_orbicularis_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn)
        Cheek_R_inner_orbicularis_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn)
        Cheek_R_inner_orbicularis_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn)
        self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.addAction(Cheek_R_inner_orbicularis_Btn_first_action)
        self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.addAction(Cheek_R_inner_orbicularis_Btn_all_action)
        self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.addAction(Cheek_R_inner_orbicularis_Btn_reset_action)
        Cheek_R_inner_orbicularis_Btn_first_action.triggered.connect(self.cheek_right_inner_orbicularis_first_popup_command)
        Cheek_R_inner_orbicularis_Btn_all_action.triggered.connect(self.cheek_right_inner_orbicularis_all_popup_command)
        Cheek_R_inner_orbicularis_Btn_reset_action.triggered.connect(self.cheek_right_inner_orbicularis_reset_popup_command)
        self.TopolDefine_window.Cheek_R_lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_R_lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_R_lower_Btn)
        Cheek_R_lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_R_lower_Btn)
        Cheek_R_lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_R_lower_Btn)
        self.TopolDefine_window.Cheek_R_lower_Btn.addAction(Cheek_R_lower_Btn_first_action)
        self.TopolDefine_window.Cheek_R_lower_Btn.addAction(Cheek_R_lower_Btn_all_action)
        self.TopolDefine_window.Cheek_R_lower_Btn.addAction(Cheek_R_lower_Btn_reset_action)
        Cheek_R_lower_Btn_first_action.triggered.connect(self.cheek_right_lower_first_popup_command)
        Cheek_R_lower_Btn_all_action.triggered.connect(self.cheek_right_lower_all_popup_command)
        Cheek_R_lower_Btn_reset_action.triggered.connect(self.cheek_right_lower_reset_popup_command)
        self.TopolDefine_window.Cheek_R_lip_lid_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Cheek_R_lip_lid_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Cheek_R_lip_lid_Btn)
        Cheek_R_lip_lid_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Cheek_R_lip_lid_Btn)
        Cheek_R_lip_lid_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Cheek_R_lip_lid_Btn)
        self.TopolDefine_window.Cheek_R_lip_lid_Btn.addAction(Cheek_R_lip_lid_Btn_first_action)
        self.TopolDefine_window.Cheek_R_lip_lid_Btn.addAction(Cheek_R_lip_lid_Btn_all_action)
        self.TopolDefine_window.Cheek_R_lip_lid_Btn.addAction(Cheek_R_lip_lid_Btn_reset_action)
        Cheek_R_lip_lid_Btn_first_action.triggered.connect(self.cheek_right_lip_lid_first_popup_command)
        Cheek_R_lip_lid_Btn_all_action.triggered.connect(self.cheek_right_lip_lid_all_popup_command)
        Cheek_R_lip_lid_Btn_reset_action.triggered.connect(self.cheek_right_lip_lid_reset_popup_command)
        self.TopolDefine_window.Nose_L_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_L_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_L_Btn)
        Nose_L_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_L_Btn)
        Nose_L_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_L_Btn)
        self.TopolDefine_window.Nose_L_Btn.addAction(Nose_L_Btn_first_action)
        self.TopolDefine_window.Nose_L_Btn.addAction(Nose_L_Btn_all_action)
        self.TopolDefine_window.Nose_L_Btn.addAction(Nose_L_Btn_reset_action)
        Nose_L_Btn_first_action.triggered.connect(self.nose_left_first_popup_command)
        Nose_L_Btn_all_action.triggered.connect(self.nose_left_all_popup_command)
        Nose_L_Btn_reset_action.triggered.connect(self.nose_left_reset_popup_command)
        self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_L_nasalis_transverse_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_L_nasalis_transverse_Btn)
        Nose_L_nasalis_transverse_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_L_nasalis_transverse_Btn)
        Nose_L_nasalis_transverse_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_L_nasalis_transverse_Btn)
        self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.addAction(Nose_L_nasalis_transverse_Btn_first_action)
        self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.addAction(Nose_L_nasalis_transverse_Btn_all_action)
        self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.addAction(Nose_L_nasalis_transverse_Btn_reset_action)
        Nose_L_nasalis_transverse_Btn_first_action.triggered.connect(self.nose_left_nasalis_transverse_first_popup_command)
        Nose_L_nasalis_transverse_Btn_all_action.triggered.connect(self.nose_left_nasalis_transverse_all_popup_command)
        Nose_L_nasalis_transverse_Btn_reset_action.triggered.connect(self.nose_left_nasalis_transverse_reset_popup_command)
        self.TopolDefine_window.Nose_L_procerus_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_L_procerus_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_L_procerus_Btn)
        Nose_L_procerus_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_L_procerus_Btn)
        Nose_L_procerus_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_L_procerus_Btn)
        self.TopolDefine_window.Nose_L_procerus_Btn.addAction(Nose_L_procerus_Btn_first_action)
        self.TopolDefine_window.Nose_L_procerus_Btn.addAction(Nose_L_procerus_Btn_all_action)
        self.TopolDefine_window.Nose_L_procerus_Btn.addAction(Nose_L_procerus_Btn_reset_action)
        Nose_L_procerus_Btn_first_action.triggered.connect(self.nose_left_procerus_first_popup_command)
        Nose_L_procerus_Btn_all_action.triggered.connect(self.nose_left_procerus_all_popup_command)
        Nose_L_procerus_Btn_reset_action.triggered.connect(self.nose_left_procerus_reset_popup_command)
        self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_L_nasolabial_fold_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_L_nasolabial_fold_Btn)
        Nose_L_nasolabial_fold_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_L_nasolabial_fold_Btn)
        Nose_L_nasolabial_fold_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_L_nasolabial_fold_Btn)
        self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.addAction(Nose_L_nasolabial_fold_Btn_first_action)
        self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.addAction(Nose_L_nasolabial_fold_Btn_all_action)
        self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.addAction(Nose_L_nasolabial_fold_Btn_reset_action)
        Nose_L_nasolabial_fold_Btn_first_action.triggered.connect(self.nose_left_nasolabial_fold_first_popup_command)
        Nose_L_nasolabial_fold_Btn_all_action.triggered.connect(self.nose_left_nasolabial_fold_all_popup_command)
        Nose_L_nasolabial_fold_Btn_reset_action.triggered.connect(self.nose_left_nasolabial_fold_reset_popup_command)
        self.TopolDefine_window.Nose_R_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_R_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_R_Btn)
        Nose_R_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_R_Btn)
        Nose_R_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_R_Btn)
        self.TopolDefine_window.Nose_R_Btn.addAction(Nose_R_Btn_first_action)
        self.TopolDefine_window.Nose_R_Btn.addAction(Nose_R_Btn_all_action)
        self.TopolDefine_window.Nose_R_Btn.addAction(Nose_R_Btn_reset_action)
        Nose_R_Btn_first_action.triggered.connect(self.nose_right_first_popup_command)
        Nose_R_Btn_all_action.triggered.connect(self.nose_right_all_popup_command)
        Nose_R_Btn_reset_action.triggered.connect(self.nose_right_reset_popup_command)
        self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_R_nasalis_transverse_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_R_nasalis_transverse_Btn)
        Nose_R_nasalis_transverse_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_R_nasalis_transverse_Btn)
        Nose_R_nasalis_transverse_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_R_nasalis_transverse_Btn)
        self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.addAction(Nose_R_nasalis_transverse_Btn_first_action)
        self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.addAction(Nose_R_nasalis_transverse_Btn_all_action)
        self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.addAction(Nose_R_nasalis_transverse_Btn_reset_action)
        Nose_R_nasalis_transverse_Btn_first_action.triggered.connect(self.nose_right_nasalis_transverse_first_popup_command)
        Nose_R_nasalis_transverse_Btn_all_action.triggered.connect(self.nose_right_nasalis_transverse_all_popup_command)
        Nose_R_nasalis_transverse_Btn_reset_action.triggered.connect(self.nose_right_nasalis_transverse_reset_popup_command)
        self.TopolDefine_window.Nose_R_procerus_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_R_procerus_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_R_procerus_Btn)
        Nose_R_procerus_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_R_procerus_Btn)
        Nose_R_procerus_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_R_procerus_Btn)
        self.TopolDefine_window.Nose_R_procerus_Btn.addAction(Nose_R_procerus_Btn_first_action)
        self.TopolDefine_window.Nose_R_procerus_Btn.addAction(Nose_R_procerus_Btn_all_action)
        self.TopolDefine_window.Nose_R_procerus_Btn.addAction(Nose_R_procerus_Btn_reset_action)
        Nose_R_procerus_Btn_first_action.triggered.connect(self.nose_right_procerus_first_popup_command)
        Nose_R_procerus_Btn_all_action.triggered.connect(self.nose_right_procerus_all_popup_command)
        Nose_R_procerus_Btn_reset_action.triggered.connect(self.nose_right_procerus_reset_popup_command)
        self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_R_nasolabial_fold_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_R_nasolabial_fold_Btn)
        Nose_R_nasolabial_fold_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_R_nasolabial_fold_Btn)
        Nose_R_nasolabial_fold_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_R_nasolabial_fold_Btn)
        self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.addAction(Nose_R_nasolabial_fold_Btn_first_action)
        self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.addAction(Nose_R_nasolabial_fold_Btn_all_action)
        self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.addAction(Nose_R_nasolabial_fold_Btn_reset_action)
        Nose_R_nasolabial_fold_Btn_first_action.triggered.connect(self.nose_right_nasolabial_fold_first_popup_command)
        Nose_R_nasolabial_fold_Btn_all_action.triggered.connect(self.Nose_R_nasolabial_fold_All_PopupCmd)
        Nose_R_nasolabial_fold_Btn_reset_action.triggered.connect(self.Nose_R_nasolabial_fold_Reset_PopupCmd)
        self.TopolDefine_window.Nose_Center_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_Center_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_Center_Btn)
        Nose_Center_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_Center_Btn)
        Nose_Center_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_Center_Btn)
        self.TopolDefine_window.Nose_Center_Btn.addAction(Nose_Center_Btn_first_action)
        self.TopolDefine_window.Nose_Center_Btn.addAction(Nose_Center_Btn_all_action)
        self.TopolDefine_window.Nose_Center_Btn.addAction(Nose_Center_Btn_reset_action)
        Nose_Center_Btn_first_action.triggered.connect(self.Nose_Center_First_PopupCmd)
        Nose_Center_Btn_all_action.triggered.connect(self.Nose_Center_All_PopupCmd)
        Nose_Center_Btn_reset_action.triggered.connect(self.Nose_Center_Reset_PopupCmd)
        self.TopolDefine_window.Nose_Lower_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_Lower_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_Lower_Btn)
        Nose_Lower_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_Lower_Btn)
        Nose_Lower_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_Lower_Btn)
        self.TopolDefine_window.Nose_Lower_Btn.addAction(Nose_Lower_Btn_first_action)
        self.TopolDefine_window.Nose_Lower_Btn.addAction(Nose_Lower_Btn_all_action)
        self.TopolDefine_window.Nose_Lower_Btn.addAction(Nose_Lower_Btn_reset_action)
        Nose_Lower_Btn_first_action.triggered.connect(self.Nose_Lower_First_PopupCmd)
        Nose_Lower_Btn_all_action.triggered.connect(self.Nose_Lower_All_PopupCmd)
        Nose_Lower_Btn_reset_action.triggered.connect(self.Nose_Lower_Reset_PopupCmd)
        self.TopolDefine_window.Nose_depressor_septi_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Nose_depressor_septi_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Nose_depressor_septi_Btn)
        Nose_depressor_septi_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Nose_depressor_septi_Btn)
        Nose_depressor_septi_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Nose_depressor_septi_Btn)
        self.TopolDefine_window.Nose_depressor_septi_Btn.addAction(Nose_depressor_septi_Btn_first_action)
        self.TopolDefine_window.Nose_depressor_septi_Btn.addAction(Nose_depressor_septi_Btn_all_action)
        self.TopolDefine_window.Nose_depressor_septi_Btn.addAction(Nose_depressor_septi_Btn_reset_action)
        Nose_depressor_septi_Btn_first_action.triggered.connect(self.Nose_depressor_septi_First_PopupCmd)
        Nose_depressor_septi_Btn_all_action.triggered.connect(self.Nose_depressor_septi_All_PopupCmd)
        Nose_depressor_septi_Btn_reset_action.triggered.connect(self.Nose_depressor_septi_Reset_PopupCmd)
        self.TopolDefine_window.Brow_L_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_L_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_L_Btn)
        Brow_L_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_L_Btn)
        Brow_L_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_L_Btn)
        self.TopolDefine_window.Brow_L_Btn.addAction(Brow_L_Btn_first_action)
        self.TopolDefine_window.Brow_L_Btn.addAction(Brow_L_Btn_all_action)
        self.TopolDefine_window.Brow_L_Btn.addAction(Brow_L_Btn_reset_action)
        Brow_L_Btn_first_action.triggered.connect(self.Brow_L_First_PopupCmd)
        Brow_L_Btn_all_action.triggered.connect(self.Brow_L_All_PopupCmd)
        Brow_L_Btn_reset_action.triggered.connect(self.Brow_L_Reset_PopupCmd)
        self.TopolDefine_window.Brow_L_medial_fibers_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_L_medial_fibers_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_L_medial_fibers_Btn)
        Brow_L_medial_fibers_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_L_medial_fibers_Btn)
        Brow_L_medial_fibers_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_L_medial_fibers_Btn)
        self.TopolDefine_window.Brow_L_medial_fibers_Btn.addAction(Brow_L_medial_fibers_Btn_first_action)
        self.TopolDefine_window.Brow_L_medial_fibers_Btn.addAction(Brow_L_medial_fibers_Btn_all_action)
        self.TopolDefine_window.Brow_L_medial_fibers_Btn.addAction(Brow_L_medial_fibers_Btn_reset_action)
        Brow_L_medial_fibers_Btn_first_action.triggered.connect(self.Brow_L_medial_fibers_First_PopupCmd)
        Brow_L_medial_fibers_Btn_all_action.triggered.connect(self.Brow_L_medial_fibers_All_PopupCmd)
        Brow_L_medial_fibers_Btn_reset_action.triggered.connect(self.Brow_L_medial_fibers_Reset_PopupCmd)
        self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_L_lateral_fibers_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_L_lateral_fibers_Btn)
        Brow_L_lateral_fibers_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_L_lateral_fibers_Btn)
        Brow_L_lateral_fibers_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_L_lateral_fibers_Btn)
        self.TopolDefine_window.Brow_L_lateral_fibers_Btn.addAction(Brow_L_lateral_fibers_Btn_first_action)
        self.TopolDefine_window.Brow_L_lateral_fibers_Btn.addAction(Brow_L_lateral_fibers_Btn_all_action)
        self.TopolDefine_window.Brow_L_lateral_fibers_Btn.addAction(Brow_L_lateral_fibers_Btn_reset_action)
        Brow_L_lateral_fibers_Btn_first_action.triggered.connect(self.Brow_L_lateral_fibers_First_PopupCmd)
        Brow_L_lateral_fibers_Btn_all_action.triggered.connect(self.Brow_L_lateral_fibers_All_PopupCmd)
        Brow_L_lateral_fibers_Btn_reset_action.triggered.connect(self.Brow_L_lateral_fibers_Reset_PopupCmd)
        self.TopolDefine_window.Brow_L_procerus_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_L_procerus_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_L_procerus_Btn)
        Brow_L_procerus_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_L_procerus_Btn)
        Brow_L_procerus_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_L_procerus_Btn)
        self.TopolDefine_window.Brow_L_procerus_Btn.addAction(Brow_L_procerus_Btn_first_action)
        self.TopolDefine_window.Brow_L_procerus_Btn.addAction(Brow_L_procerus_Btn_all_action)
        self.TopolDefine_window.Brow_L_procerus_Btn.addAction(Brow_L_procerus_Btn_reset_action)
        Brow_L_procerus_Btn_first_action.triggered.connect(self.Brow_L_procerus_First_PopupCmd)
        Brow_L_procerus_Btn_all_action.triggered.connect(self.Brow_L_procerus_All_PopupCmd)
        Brow_L_procerus_Btn_reset_action.triggered.connect(self.Brow_L_procerus_Reset_PopupCmd)
        self.TopolDefine_window.Brow_L_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_L_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_L_02_Btn)
        Brow_L_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_L_02_Btn)
        Brow_L_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_L_02_Btn)
        self.TopolDefine_window.Brow_L_02_Btn.addAction(Brow_L_02_Btn_first_action)
        self.TopolDefine_window.Brow_L_02_Btn.addAction(Brow_L_02_Btn_all_action)
        self.TopolDefine_window.Brow_L_02_Btn.addAction(Brow_L_02_Btn_reset_action)
        Brow_L_02_Btn_first_action.triggered.connect(self.Brow_L_02_First_PopupCmd)
        Brow_L_02_Btn_all_action.triggered.connect(self.Brow_L_02_All_PopupCmd)
        Brow_L_02_Btn_reset_action.triggered.connect(self.Brow_L_02_Reset_PopupCmd)
        self.TopolDefine_window.Brow_L_03_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_L_03_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_L_03_Btn)
        Brow_L_03_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_L_03_Btn)
        Brow_L_03_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_L_03_Btn)
        self.TopolDefine_window.Brow_L_03_Btn.addAction(Brow_L_03_Btn_first_action)
        self.TopolDefine_window.Brow_L_03_Btn.addAction(Brow_L_03_Btn_all_action)
        self.TopolDefine_window.Brow_L_03_Btn.addAction(Brow_L_03_Btn_reset_action)
        Brow_L_03_Btn_first_action.triggered.connect(self.Brow_L_03_First_PopupCmd)
        Brow_L_03_Btn_all_action.triggered.connect(self.Brow_L_03_All_PopupCmd)
        Brow_L_03_Btn_reset_action.triggered.connect(self.Brow_L_03_Reset_PopupCmd)
        self.TopolDefine_window.Brow_R_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_R_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_R_Btn)
        Brow_R_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_R_Btn)
        Brow_R_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_R_Btn)
        self.TopolDefine_window.Brow_R_Btn.addAction(Brow_R_Btn_first_action)
        self.TopolDefine_window.Brow_R_Btn.addAction(Brow_R_Btn_all_action)
        self.TopolDefine_window.Brow_R_Btn.addAction(Brow_R_Btn_reset_action)
        Brow_R_Btn_first_action.triggered.connect(self.Brow_R_First_PopupCmd)
        Brow_R_Btn_all_action.triggered.connect(self.Brow_R_All_PopupCmd)
        Brow_R_Btn_reset_action.triggered.connect(self.Brow_R_Reset_PopupCmd)
        self.TopolDefine_window.Brow_R_medial_fibers_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_R_medial_fibers_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_R_medial_fibers_Btn)
        Brow_R_medial_fibers_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_R_medial_fibers_Btn)
        Brow_R_medial_fibers_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_R_medial_fibers_Btn)
        self.TopolDefine_window.Brow_R_medial_fibers_Btn.addAction(Brow_R_medial_fibers_Btn_first_action)
        self.TopolDefine_window.Brow_R_medial_fibers_Btn.addAction(Brow_R_medial_fibers_Btn_all_action)
        self.TopolDefine_window.Brow_R_medial_fibers_Btn.addAction(Brow_R_medial_fibers_Btn_reset_action)
        Brow_R_medial_fibers_Btn_first_action.triggered.connect(self.Brow_R_medial_fibers_First_PopupCmd)
        Brow_R_medial_fibers_Btn_all_action.triggered.connect(self.Brow_R_medial_fibers_All_PopupCmd)
        Brow_R_medial_fibers_Btn_reset_action.triggered.connect(self.Brow_R_medial_fibers_Reset_PopupCmd)
        self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_R_lateral_fibers_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_R_lateral_fibers_Btn)
        Brow_R_lateral_fibers_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_R_lateral_fibers_Btn)
        Brow_R_lateral_fibers_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_R_lateral_fibers_Btn)
        self.TopolDefine_window.Brow_R_lateral_fibers_Btn.addAction(Brow_R_lateral_fibers_Btn_first_action)
        self.TopolDefine_window.Brow_R_lateral_fibers_Btn.addAction(Brow_R_lateral_fibers_Btn_all_action)
        self.TopolDefine_window.Brow_R_lateral_fibers_Btn.addAction(Brow_R_lateral_fibers_Btn_reset_action)
        Brow_R_lateral_fibers_Btn_first_action.triggered.connect(self.Brow_R_lateral_fibers_First_PopupCmd)
        Brow_R_lateral_fibers_Btn_all_action.triggered.connect(self.Brow_R_lateral_fibers_All_PopupCmd)
        Brow_R_lateral_fibers_Btn_reset_action.triggered.connect(self.Brow_R_lateral_fibers_Reset_PopupCmd)
        self.TopolDefine_window.Brow_R_procerus_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_R_procerus_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_R_procerus_Btn)
        Brow_R_procerus_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_R_procerus_Btn)
        Brow_R_procerus_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_R_procerus_Btn)
        self.TopolDefine_window.Brow_R_procerus_Btn.addAction(Brow_R_procerus_Btn_first_action)
        self.TopolDefine_window.Brow_R_procerus_Btn.addAction(Brow_R_procerus_Btn_all_action)
        self.TopolDefine_window.Brow_R_procerus_Btn.addAction(Brow_R_procerus_Btn_reset_action)
        Brow_R_procerus_Btn_first_action.triggered.connect(self.Brow_R_procerus_First_PopupCmd)
        Brow_R_procerus_Btn_all_action.triggered.connect(self.Brow_R_procerus_All_PopupCmd)
        Brow_R_procerus_Btn_reset_action.triggered.connect(self.Brow_R_procerus_Reset_PopupCmd)
        self.TopolDefine_window.Brow_R_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_R_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_R_02_Btn)
        Brow_R_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_R_02_Btn)
        Brow_R_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_R_02_Btn)
        self.TopolDefine_window.Brow_R_02_Btn.addAction(Brow_R_02_Btn_first_action)
        self.TopolDefine_window.Brow_R_02_Btn.addAction(Brow_R_02_Btn_all_action)
        self.TopolDefine_window.Brow_R_02_Btn.addAction(Brow_R_02_Btn_reset_action)
        Brow_R_02_Btn_first_action.triggered.connect(self.Brow_R_02_First_PopupCmd)
        Brow_R_02_Btn_all_action.triggered.connect(self.Brow_R_02_All_PopupCmd)
        Brow_R_02_Btn_reset_action.triggered.connect(self.Brow_R_02_Reset_PopupCmd)
        self.TopolDefine_window.Brow_R_03_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_R_03_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_R_03_Btn)
        Brow_R_03_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_R_03_Btn)
        Brow_R_03_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_R_03_Btn)
        self.TopolDefine_window.Brow_R_03_Btn.addAction(Brow_R_03_Btn_first_action)
        self.TopolDefine_window.Brow_R_03_Btn.addAction(Brow_R_03_Btn_all_action)
        self.TopolDefine_window.Brow_R_03_Btn.addAction(Brow_R_03_Btn_reset_action)
        Brow_R_03_Btn_first_action.triggered.connect(self.Brow_R_03_First_PopupCmd)
        Brow_R_03_Btn_all_action.triggered.connect(self.Brow_R_03_All_PopupCmd)
        Brow_R_03_Btn_reset_action.triggered.connect(self.Brow_R_03_Reset_PopupCmd)
        self.TopolDefine_window.Brow_Center_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Brow_Center_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Brow_Center_Btn)
        Brow_Center_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Brow_Center_Btn)
        Brow_Center_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Brow_Center_Btn)
        self.TopolDefine_window.Brow_Center_Btn.addAction(Brow_Center_Btn_first_action)
        self.TopolDefine_window.Brow_Center_Btn.addAction(Brow_Center_Btn_all_action)
        self.TopolDefine_window.Brow_Center_Btn.addAction(Brow_Center_Btn_reset_action)
        Brow_Center_Btn_first_action.triggered.connect(self.Brow_Center_First_PopupCmd)
        Brow_Center_Btn_all_action.triggered.connect(self.Brow_Center_All_PopupCmd)
        Brow_Center_Btn_reset_action.triggered.connect(self.Brow_Center_Reset_PopupCmd)
        self.TopolDefine_window.Oral_Upper_teeth_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Oral_Upper_teeth_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Oral_Upper_teeth_Btn)
        Oral_Upper_teeth_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Oral_Upper_teeth_Btn)
        Oral_Upper_teeth_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Oral_Upper_teeth_Btn)
        self.TopolDefine_window.Oral_Upper_teeth_Btn.addAction(Oral_Upper_teeth_Btn_first_action)
        self.TopolDefine_window.Oral_Upper_teeth_Btn.addAction(Oral_Upper_teeth_Btn_all_action)
        self.TopolDefine_window.Oral_Upper_teeth_Btn.addAction(Oral_Upper_teeth_Btn_reset_action)
        Oral_Upper_teeth_Btn_first_action.triggered.connect(self.Oral_Upper_teeth_First_PopupCmd)
        Oral_Upper_teeth_Btn_all_action.triggered.connect(self.Oral_Upper_teeth_All_PopupCmd)
        Oral_Upper_teeth_Btn_reset_action.triggered.connect(self.Oral_Upper_teeth_Reset_PopupCmd)
        self.TopolDefine_window.Oral_Lower_teeth_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Oral_Lower_teeth_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Oral_Lower_teeth_Btn)
        Oral_Lower_teeth_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Oral_Lower_teeth_Btn)
        Oral_Lower_teeth_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Oral_Lower_teeth_Btn)
        self.TopolDefine_window.Oral_Lower_teeth_Btn.addAction(Oral_Lower_teeth_Btn_first_action)
        self.TopolDefine_window.Oral_Lower_teeth_Btn.addAction(Oral_Lower_teeth_Btn_all_action)
        self.TopolDefine_window.Oral_Lower_teeth_Btn.addAction(Oral_Lower_teeth_Btn_reset_action)
        Oral_Lower_teeth_Btn_first_action.triggered.connect(self.Oral_Lower_teeth_First_PopupCmd)
        Oral_Lower_teeth_Btn_all_action.triggered.connect(self.Oral_Lower_teeth_All_PopupCmd)
        Oral_Lower_teeth_Btn_reset_action.triggered.connect(self.Oral_Lower_teeth_Reset_PopupCmd)
        self.TopolDefine_window.Oral_Tongue_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Oral_Tongue_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Oral_Tongue_Btn)
        Oral_Tongue_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Oral_Tongue_Btn)
        Oral_Tongue_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Oral_Tongue_Btn)
        self.TopolDefine_window.Oral_Tongue_Btn.addAction(Oral_Tongue_Btn_first_action)
        self.TopolDefine_window.Oral_Tongue_Btn.addAction(Oral_Tongue_Btn_all_action)
        self.TopolDefine_window.Oral_Tongue_Btn.addAction(Oral_Tongue_Btn_reset_action)
        Oral_Tongue_Btn_first_action.triggered.connect(self.Oral_Tongue_First_PopupCmd)
        Oral_Tongue_Btn_all_action.triggered.connect(self.Oral_Tongue_All_PopupCmd)
        Oral_Tongue_Btn_reset_action.triggered.connect(self.Oral_Tongue_Reset_PopupCmd)
        self.TopolDefine_window.Oral_Tongue_02_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Oral_Tongue_02_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Oral_Tongue_02_Btn)
        Oral_Tongue_02_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Oral_Tongue_02_Btn)
        Oral_Tongue_02_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Oral_Tongue_02_Btn)
        self.TopolDefine_window.Oral_Tongue_02_Btn.addAction(Oral_Tongue_02_Btn_first_action)
        self.TopolDefine_window.Oral_Tongue_02_Btn.addAction(Oral_Tongue_02_Btn_all_action)
        self.TopolDefine_window.Oral_Tongue_02_Btn.addAction(Oral_Tongue_02_Btn_reset_action)
        Oral_Tongue_02_Btn_first_action.triggered.connect(self.Oral_Tongue_02_First_PopupCmd)
        Oral_Tongue_02_Btn_all_action.triggered.connect(self.Oral_Tongue_02_All_PopupCmd)
        Oral_Tongue_02_Btn_reset_action.triggered.connect(self.Oral_Tongue_02_Reset_PopupCmd)
        self.TopolDefine_window.Oral_Tongue_03_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        Oral_Tongue_03_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.Oral_Tongue_03_Btn)
        Oral_Tongue_03_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.Oral_Tongue_03_Btn)
        Oral_Tongue_03_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.Oral_Tongue_03_Btn)
        self.TopolDefine_window.Oral_Tongue_03_Btn.addAction(Oral_Tongue_03_Btn_first_action)
        self.TopolDefine_window.Oral_Tongue_03_Btn.addAction(Oral_Tongue_03_Btn_all_action)
        self.TopolDefine_window.Oral_Tongue_03_Btn.addAction(Oral_Tongue_03_Btn_reset_action)
        Oral_Tongue_03_Btn_first_action.triggered.connect(self.Oral_Tongue_03_First_PopupCmd)
        Oral_Tongue_03_Btn_all_action.triggered.connect(self.Oral_Tongue_03_All_PopupCmd)
        Oral_Tongue_03_Btn_reset_action.triggered.connect(self.Oral_Tongue_03_Reset_PopupCmd)
        self.TopolDefine_window.EyeBall_L_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        EyeBall_L_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.EyeBall_L_Btn)
        EyeBall_L_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.EyeBall_L_Btn)
        EyeBall_L_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.EyeBall_L_Btn)
        self.TopolDefine_window.EyeBall_L_Btn.addAction(EyeBall_L_Btn_first_action)
        self.TopolDefine_window.EyeBall_L_Btn.addAction(EyeBall_L_Btn_all_action)
        self.TopolDefine_window.EyeBall_L_Btn.addAction(EyeBall_L_Btn_reset_action)
        EyeBall_L_Btn_first_action.triggered.connect(self.EyeBall_L_First_PopupCmd)
        EyeBall_L_Btn_all_action.triggered.connect(self.EyeBall_L_All_PopupCmd)
        EyeBall_L_Btn_reset_action.triggered.connect(self.EyeBall_L_Reset_PopupCmd)
        self.TopolDefine_window.EyeBall_R_Btn.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        EyeBall_R_Btn_first_action = QtWidgets.QAction('Select the First Vertex', self.TopolDefine_window.EyeBall_R_Btn)
        EyeBall_R_Btn_all_action = QtWidgets.QAction('Select the All Vertex', self.TopolDefine_window.EyeBall_R_Btn)
        EyeBall_R_Btn_reset_action = QtWidgets.QAction('Reset', self.TopolDefine_window.EyeBall_R_Btn)
        self.TopolDefine_window.EyeBall_R_Btn.addAction(EyeBall_R_Btn_first_action)
        self.TopolDefine_window.EyeBall_R_Btn.addAction(EyeBall_R_Btn_all_action)
        self.TopolDefine_window.EyeBall_R_Btn.addAction(EyeBall_R_Btn_reset_action)
        EyeBall_R_Btn_first_action.triggered.connect(self.EyeBall_R_First_PopupCmd)
        EyeBall_R_Btn_all_action.triggered.connect(self.EyeBall_R_All_PopupCmd)
        EyeBall_R_Btn_reset_action.triggered.connect(self.EyeBall_R_Reset_PopupCmd)
        self.TopolDefine_window.show()

    def topology_define_command(self, *args):
        self.create_topology()
        if cmds.objExists('Skin_L_lip_corner_jnt') or cmds.objExists('L_lip_corner_jnt'):
            self.TopolDefine_window.LipCorner_L_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipCorner_L_Btn.setVisible(False)

        if cmds.objExists('Skin_L_lip_lower_corner_jnt') or cmds.objExists('L_lip_lower_corner_jnt'):
            self.TopolDefine_window.LipCorner_lower_L_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipCorner_lower_L_Btn.setVisible(False)

        if cmds.objExists('Skin_R_lip_corner_jnt') or cmds.objExists('R_lip_corner_jnt'):
            self.TopolDefine_window.LipCorner_R_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipCorner_R_Btn.setVisible(False)

        if cmds.objExists('Skin_R_lip_lower_corner_jnt') or cmds.objExists('R_lip_lower_corner_jnt'):
            self.TopolDefine_window.LipCorner_lower_R_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipCorner_lower_R_Btn.setVisible(False)
        if cmds.objExists('Skin_upper_lip_jnt') or cmds.objExists('upper_lip_jnt'):
            self.TopolDefine_window.LipUpper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipUpper_Btn.setVisible(False)
        if cmds.objExists('Skin_Lower_lip_jnt') or cmds.objExists('Lower_lip_jnt'):
            self.TopolDefine_window.LipLower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipLower_Btn.setVisible(False)
        if cmds.objExists('Skin_Lower_lip_outer_jnt') or cmds.objExists('Lower_lip_outer_jnt'):
            self.TopolDefine_window.LipLower_Outer_Btn.setVisible(True)
        else:
            self.TopolDefine_window.LipLower_Outer_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lip_upper_side_jnt') or cmds.objExists('L_lip_upper_side_jnt'):
            self.TopolDefine_window.Lip_L_UpperSide_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_L_UpperSide_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lip_upper_outer_jnt') or cmds.objExists('L_lip_upper_outer_jnt'):
            self.TopolDefine_window.Lip_L_UpperOuter_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_L_UpperOuter_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lip_lower_side_jnt') or cmds.objExists('L_lip_lower_side_jnt'):
            self.TopolDefine_window.Lip_L_LowerSide_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_L_LowerSide_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lip_lower_outer_jnt') or cmds.objExists('L_lip_lower_outer_jnt'):
            self.TopolDefine_window.Lip_L_LowerOuter_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_L_LowerOuter_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lip_upper_side_jnt') or cmds.objExists('R_lip_upper_side_jnt'):
            self.TopolDefine_window.Lip_R_UpperSide_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_R_UpperSide_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lip_upper_outer_jnt') or cmds.objExists('R_lip_upper_outer_jnt'):
            self.TopolDefine_window.Lip_R_UpperOuter_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_R_UpperOuter_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lip_lower_side_jnt') or cmds.objExists('R_lip_lower_side_jnt'):
            self.TopolDefine_window.Lip_R_LowerSide_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_R_LowerSide_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lip_lower_outer_jnt') or cmds.objExists('R_lip_lower_outer_jnt'):
            self.TopolDefine_window.Lip_R_LowerOuter_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_R_LowerOuter_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lip_upper_side_02_jnt') or cmds.objExists('L_lip_upper_side_02_jnt'):
            self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lip_lower_side_02_jnt') or cmds.objExists('L_lip_lower_side_02_jnt'):
            self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lip_upper_side_02_jnt') or cmds.objExists('R_lip_upper_side_02_jnt'):
            self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lip_lower_side_02_jnt') or cmds.objExists('R_lip_lower_side_02_jnt'):
            self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setVisible(False)

        if cmds.objExists(SKIN_JAW_MASTER_JOINT_NAME) or cmds.objExists(JAW_MASTER_JOINT_NAME):
            self.TopolDefine_window.Lip_Jaw_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Lip_Jaw_Btn.setVisible(False)

        if cmds.objExists('Skin_L_eye_blink_jnt') or cmds.objExists('L_eye_blink_jnt'):
            self.TopolDefine_window.Eye_L_blink_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_blink_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_lower_jnt') or cmds.objExists('L_eye_lower_jnt'):
            self.TopolDefine_window.Eye_L_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_blink_jnt') or cmds.objExists('R_eye_blink_jnt'):
            self.TopolDefine_window.Eye_R_blink_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_blink_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_lower_jnt') or cmds.objExists('R_eye_lower_jnt'):
            self.TopolDefine_window.Eye_R_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_lacrimal_jnt') or cmds.objExists('L_eye_lacrimal_jnt'):
            self.TopolDefine_window.Eye_L_lacrimal_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_lacrimal_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt') or cmds.objExists('L_eye_lacrimal_upper_jnt'):
            self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt') or cmds.objExists('L_eye_lacrimal_lower_jnt'):
            self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_back_jnt') or cmds.objExists('L_eye_back_jnt'):
            self.TopolDefine_window.Eye_L_back_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_back_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_back_upper_jnt') or cmds.objExists('L_eye_back_upper_jnt'):
            self.TopolDefine_window.Eye_L_back_upper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_back_upper_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_back_lower_jnt') or cmds.objExists('L_eye_back_lower_jnt'):
            self.TopolDefine_window.Eye_L_back_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_back_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_double_jnt') or cmds.objExists('L_eye_double_jnt'):
            self.TopolDefine_window.Eye_L_double_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_L_double_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_lacrimal_jnt') or cmds.objExists('R_eye_lacrimal_jnt'):
            self.TopolDefine_window.Eye_R_lacrimal_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_lacrimal_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt') or cmds.objExists('R_eye_lacrimal_upper_jnt'):
            self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt') or cmds.objExists('R_eye_lacrimal_lower_jnt'):
            self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_back_jnt') or cmds.objExists('R_eye_back_jnt'):
            self.TopolDefine_window.Eye_R_back_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_back_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_back_upper_jnt') or cmds.objExists('R_eye_back_upper_jnt'):
            self.TopolDefine_window.Eye_R_back_upper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_back_upper_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_back_lower_jnt') or cmds.objExists('R_eye_back_lower_jnt'):
            self.TopolDefine_window.Eye_R_back_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_back_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_R_eye_double_jnt') or cmds.objExists('R_eye_double_jnt'):
            self.TopolDefine_window.Eye_R_double_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Eye_R_double_Btn.setVisible(False)
        if cmds.objExists('Skin_L_cheek_jnt') or cmds.objExists('L_cheek_jnt'):
            self.TopolDefine_window.Cheek_L_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_L_Btn.setVisible(False)
        if cmds.objExists('Skin_R_cheek_jnt') or cmds.objExists('R_cheek_jnt'):
            self.TopolDefine_window.Cheek_R_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_R_Btn.setVisible(False)
        if cmds.objExists('Skin_L_upper_cheek_jnt') or cmds.objExists('L_upper_cheek_jnt'):
            self.TopolDefine_window.Cheek_L_upper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_L_upper_Btn.setVisible(False)
        if cmds.objExists('Skin_L_outer_orbicularis_cheek_jnt') or cmds.objExists('L_outer_orbicularis_cheek_jnt'):
            self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setVisible(False)
        if cmds.objExists('Skin_L_inner_orbicularis_cheek_jnt') or cmds.objExists('L_inner_orbicularis_cheek_jnt'):
            self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setVisible(False)
        if cmds.objExists('Skin_R_upper_cheek_jnt') or cmds.objExists('R_upper_cheek_jnt'):
            self.TopolDefine_window.Cheek_R_upper_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_R_upper_Btn.setVisible(False)
        if cmds.objExists('Skin_R_outer_orbicularis_cheek_jnt') or cmds.objExists('R_outer_orbicularis_cheek_jnt'):
            self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setVisible(False)
        if cmds.objExists('Skin_R_inner_orbicularis_cheek_jnt') or cmds.objExists('R_inner_orbicularis_cheek_jnt'):
            self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lower_cheek_jnt') or cmds.objExists('L_lower_cheek_jnt'):
            self.TopolDefine_window.Cheek_L_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_L_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lower_cheek_jnt') or cmds.objExists('R_lower_cheek_jnt'):
            self.TopolDefine_window.Cheek_R_lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_R_lower_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lower_liplid_jnt') or cmds.objExists('L_lower_liplid_jnt'):
            self.TopolDefine_window.Cheek_L_lip_lid_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_L_lip_lid_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lower_liplid_jnt') or cmds.objExists('R_lower_liplid_jnt'):
            self.TopolDefine_window.Cheek_R_lip_lid_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Cheek_R_lip_lid_Btn.setVisible(False)
        if cmds.objExists('Skin_L_nose_jnt') or cmds.objExists('L_nose_jnt'):
            self.TopolDefine_window.Nose_L_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_L_Btn.setVisible(False)
        if cmds.objExists('Skin_L_nasalis_transverse_nose_jnt') or cmds.objExists('L_nasalis_transverse_nose_jnt'):
            self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setVisible(False)
        if cmds.objExists('Skin_L_procerus_nose_jnt') or cmds.objExists('L_procerus_nose_jnt'):
            self.TopolDefine_window.Nose_L_procerus_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_L_procerus_Btn.setVisible(False)
        if cmds.objExists('Skin_L_nasolabial_fold_nose_jnt') or cmds.objExists('L_nasolabial_fold_nose_jnt'):
            self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setVisible(False)
        if cmds.objExists('Skin_R_nose_jnt') or cmds.objExists('R_nose_jnt'):
            self.TopolDefine_window.Nose_R_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_R_Btn.setVisible(False)
        if cmds.objExists('Skin_R_nasalis_transverse_nose_jnt') or cmds.objExists('R_nasalis_transverse_nose_jnt'):
            self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setVisible(False)
        if cmds.objExists('Skin_R_procerus_nose_jnt') or cmds.objExists('R_procerus_nose_jnt'):
            self.TopolDefine_window.Nose_R_procerus_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_R_procerus_Btn.setVisible(False)
        if cmds.objExists('Skin_R_nasolabial_fold_nose_jnt') or cmds.objExists('R_nasolabial_fold_nose_jnt'):
            self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setVisible(False)
        if cmds.objExists('Skin_nose_jnt') or cmds.objExists('nose_jnt'):
            self.TopolDefine_window.Nose_Center_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_Center_Btn.setVisible(False)
        if cmds.objExists('Skin_lower_nose_jnt') or cmds.objExists('lower_nose_jnt'):
            self.TopolDefine_window.Nose_Lower_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_Lower_Btn.setVisible(False)
        if cmds.objExists('Skin_depressor_septi_nose_jnt') or cmds.objExists('depressor_septi_nose_jnt'):
            self.TopolDefine_window.Nose_depressor_septi_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Nose_depressor_septi_Btn.setVisible(False)
        if cmds.objExists('Skin_L_brow_jnt') or cmds.objExists('L_brow_jnt'):
            self.TopolDefine_window.Brow_L_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_L_Btn.setVisible(False)
        if cmds.objExists('Skin_L_medial_fibers_brow_jnt') or cmds.objExists('L_medial_fibers_brow_jnt'):
            self.TopolDefine_window.Brow_L_medial_fibers_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_L_medial_fibers_Btn.setVisible(False)
        if cmds.objExists('Skin_L_lateral_fibers_brow_jnt') or cmds.objExists('L_lateral_fibers_brow_jnt'):
            self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setVisible(False)
        if cmds.objExists('Skin_L_procerus_brow_jnt') or cmds.objExists('L_procerus_brow_jnt'):
            self.TopolDefine_window.Brow_L_procerus_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_L_procerus_Btn.setVisible(False)
        if cmds.objExists('Skin_R_brow_jnt') or cmds.objExists('R_brow_jnt'):
            self.TopolDefine_window.Brow_R_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_R_Btn.setVisible(False)
        if cmds.objExists('Skin_R_medial_fibers_brow_jnt') or cmds.objExists('R_medial_fibers_brow_jnt'):
            self.TopolDefine_window.Brow_R_medial_fibers_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_R_medial_fibers_Btn.setVisible(False)
        if cmds.objExists('Skin_R_lateral_fibers_brow_jnt') or cmds.objExists('R_lateral_fibers_brow_jnt'):
            self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setVisible(False)
        if cmds.objExists('Skin_R_procerus_brow_jnt') or cmds.objExists('R_procerus_brow_jnt'):
            self.TopolDefine_window.Brow_R_procerus_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_R_procerus_Btn.setVisible(False)
        if cmds.objExists('Skin_L_brow_02_jnt') or cmds.objExists('L_brow_02_jnt'):
            self.TopolDefine_window.Brow_L_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_L_02_Btn.setVisible(False)
        if cmds.objExists('Skin_R_brow_02_jnt') or cmds.objExists('R_brow_02_jnt'):
            self.TopolDefine_window.Brow_R_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_R_02_Btn.setVisible(False)
        if cmds.objExists('Skin_L_brow_03_jnt') or cmds.objExists('L_brow_03_jnt'):
            self.TopolDefine_window.Brow_L_03_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_L_03_Btn.setVisible(False)
        if cmds.objExists('Skin_R_brow_03_jnt') or cmds.objExists('R_brow_03_jnt'):
            self.TopolDefine_window.Brow_R_03_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_R_03_Btn.setVisible(False)
        if cmds.objExists('Skin_center_brow_jnt') or cmds.objExists('center_brow_jnt'):
            self.TopolDefine_window.Brow_Center_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Brow_Center_Btn.setVisible(False)
        if cmds.objExists('Skin_Upper_teeth_jnt') or cmds.objExists('Upper_teeth_jnt'):
            self.TopolDefine_window.Oral_Upper_teeth_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Oral_Upper_teeth_Btn.setVisible(False)
        if cmds.objExists('Skin_Lower_teeth_jnt') or cmds.objExists('Lower_teeth_jnt'):
            self.TopolDefine_window.Oral_Lower_teeth_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Oral_Lower_teeth_Btn.setVisible(False)
        if cmds.objExists('Skin_Tongue_jnt') or cmds.objExists('Tongue_jnt'):
            self.TopolDefine_window.Oral_Tongue_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Oral_Tongue_Btn.setVisible(False)
        if cmds.objExists('Skin_Tongue_02_jnt') or cmds.objExists('Tongue_02_jnt'):
            self.TopolDefine_window.Oral_Tongue_02_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Oral_Tongue_02_Btn.setVisible(False)
        if cmds.objExists('Skin_Tongue_03_jnt') or cmds.objExists('Tongue_03_jnt'):
            self.TopolDefine_window.Oral_Tongue_03_Btn.setVisible(True)
        else:
            self.TopolDefine_window.Oral_Tongue_03_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_ball_jnt') or cmds.objExists('L_eye_ball_jnt'):
            self.TopolDefine_window.EyeBall_L_Btn.setVisible(True)
        else:
            self.TopolDefine_window.EyeBall_L_Btn.setVisible(False)
        if cmds.objExists('Skin_L_eye_ball_jnt') or cmds.objExists('L_eye_ball_jnt'):
            self.TopolDefine_window.EyeBall_R_Btn.setVisible(True)
        else:
            self.TopolDefine_window.EyeBall_R_Btn.setVisible(False)

    def lip_topology_up_command(self, *args):
        LipTopolUpSel = cmds.ls(sl=True, fl=True)
        if len(LipTopolUpSel) != 0:
            self.HeadMesh = LipTopolUpSel[0].split('.')[0]
            cmds.select(LipTopolUpSel)
            mel.eval('ConvertSelectionToVertices')
            self.LipUpVetex = cmds.ls(sl=True)
            self.ui.LipTopolUpBtn.setStyleSheet(self.green_color)
            print('Lip Upper Topology Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Upper Topology')
            cmds.error('Please Select Lip Upper Topology')
        if len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            self.ui.LipTopolCheckBox.setChecked(True)
        if len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0 and len(self.JawVetex) != 0:
            self.ui.JawTopolCheckBox.setChecked(True)
        return

    def lip_topology_down_command(self, *args):
        LipTopolDownSel = cmds.ls(sl=True, fl=True)
        if len(LipTopolDownSel) != 0:
            self.HeadMesh = LipTopolDownSel[0].split('.')[0]
            cmds.select(LipTopolDownSel)
            mel.eval('ConvertSelectionToVertices')
            self.LipDownVetex = cmds.ls(sl=True)
            self.ui.LipTopolDownBtn.setStyleSheet(self.green_color)
            print('Lip Lower Topology Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Lower Topology')
            cmds.error('Please Select Lip Lower Topology')
        if len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            self.ui.LipTopolCheckBox.setChecked(True)
        if len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0 and len(self.JawVetex) != 0:
            self.ui.JawTopolCheckBox.setChecked(True)
        return

    def lock_parts(self):
        if cmds.objExists('Brow_All_Ctrl_grp'):
            self.ui.BrowTopolCheckBox.setEnabled(True)
        else:
            self.ui.BrowTopolCheckBox.setEnabled(False)
            self.ui.BrowTopolCheckBox.setChecked(False)
            if cmds.objExists('Eye_All_Ctrl_grp'):
                self.ui.EyeTopolCheckBox.setEnabled(True)
            else:
                self.ui.EyeTopolCheckBox.setEnabled(False)
                self.ui.EyeTopolCheckBox.setChecked(False)
                if cmds.objExists('Nose_All_Ctrl_grp'):
                    self.ui.NoseTopolCheckBox.setEnabled(True)
                else:
                    self.ui.NoseTopolCheckBox.setEnabled(False)
                    self.ui.NoseTopolCheckBox.setChecked(False)
                    if cmds.objExists('Cheek_All_Ctrl_grp'):
                        self.ui.CheekTopolCheckBox.setEnabled(True)
                    else:
                        self.ui.CheekTopolCheckBox.setEnabled(False)
                        self.ui.CheekTopolCheckBox.setChecked(False)
                        if cmds.objExists('Lip_All_Ctrl_grp'):
                            if cmds.objExists('Lip_Master_Ctrl_grp'):
                                self.ui.LipTopolCheckBox.setEnabled(True)
                            else:
                                self.ui.LipTopolCheckBox.setEnabled(False)
                                self.ui.LipTopolCheckBox.setChecked(False)
                                self.ui.JawTopolCheckBox.setEnabled(True)

    def unlock_check(self):
        if self.ui.BrowTopolCheckBox.isEnabled() is True:
            self.Skin_Brow_vetex_UnLock = 1
        else:
            self.Skin_Brow_vetex_UnLock = 0
        if self.ui.EyeTopolCheckBox.isEnabled() is True:
            self.Skin_Eye_vetex_UnLock = 1
        else:
            self.Skin_Eye_vetex_UnLock = 0
        if self.ui.NoseTopolCheckBox.isEnabled() is True:
            self.Skin_Nose_vetex_UnLock = 1
        else:
            self.Skin_Nose_vetex_UnLock = 0
        if self.ui.CheekTopolCheckBox.isEnabled() is True:
            self.Skin_Cheek_vetex_UnLock = 1
        else:
            self.Skin_Cheek_vetex_UnLock = 0
        if self.ui.LipTopolCheckBox.isEnabled() is True:
            self.Skin_Lip_vetex_UnLock = 1
        else:
            self.Skin_Lip_vetex_UnLock = 0
        if self.ui.JawTopolCheckBox.isEnabled() is True:
            self.Skin_Jaw_vetex_UnLock = 1
        else:
            self.Skin_Jaw_vetex_UnLock = 0

    def all_vertex_check(self):
        L_lip_corner = 0
        R_lip_corner = 0
        L_lip_lower_corner = 0
        R_lip_lower_corner = 0
        upper_lip = 0
        Lower_lip = 0
        Lower_lip_outer = 0
        L_lip_upper_side = 0
        L_lip_upper_outer = 0
        L_lip_lower_side = 0
        L_lip_lower_outer = 0
        R_lip_upper_side = 0
        R_lip_upper_outer = 0
        R_lip_lower_side = 0
        R_lip_lower_outer = 0
        L_lip_upper_side_02 = 0
        L_lip_lower_side_02 = 0
        R_lip_upper_side_02 = 0
        R_lip_lower_side_02 = 0
        Jaw_master = 0
        L_eye_blink = 0
        L_eye_lower = 0
        R_eye_blink = 0
        R_eye_lower = 0
        L_eye_lacrimal = 0
        L_eye_lacrimal_upper = 0
        L_eye_lacrimal_lower = 0
        L_eye_back = 0
        L_eye_back_upper = 0
        L_eye_back_lower = 0
        L_eye_double = 0
        R_eye_lacrimal = 0
        R_eye_lacrimal_upper = 0
        R_eye_lacrimal_lower = 0
        R_eye_back = 0
        R_eye_back_upper = 0
        R_eye_back_lower = 0
        R_eye_double = 0
        L_cheek = 0
        L_upper_cheek = 0
        L_outer_orbicularis_cheek = 0
        L_inner_orbicularis_cheek = 0
        L_lower_cheek = 0
        L_lip_lid_cheek = 0
        R_cheek = 0
        R_upper_cheek = 0
        R_outer_orbicularis_cheek = 0
        R_inner_orbicularis_cheek = 0
        R_lower_cheek = 0
        R_lip_lid_cheek = 0
        L_nose = 0
        L_nasalis_transverse_nose = 0
        L_procerus_nose = 0
        L_nasolabial_fold_nose = 0
        R_nose = 0
        R_nasalis_transverse_nose = 0
        R_procerus_nose = 0
        R_nasolabial_fold_nose = 0
        center_nose = 0
        Lower_nose = 0
        depressor_septi_nose = 0
        L_brow = 0
        L_medial_fibers_brow = 0
        L_lateral_fibers_brow = 0
        L_procerus_brow = 0
        R_brow = 0
        R_medial_fibers_brow = 0
        R_lateral_fibers_brow = 0
        R_procerus_brow = 0
        L_brow_02 = 0
        R_brow_02 = 0
        L_brow_03 = 0
        R_brow_03 = 0
        center_brow = 0
        Upper_teeth = 0
        Lower_teeth = 0
        Tongue = 0
        Tongue_02 = 0
        Tongue_03 = 0
        L_eyeball = 0
        R_eyeball = 0
        if cmds.objExists('Skin_L_lip_corner_jnt'):
            if len(self.LipCorner_L_Vetex) != 0:
                L_lip_corner = 1
            else:
                L_lip_corner = 0
        else:
            L_lip_corner = 2
        if cmds.objExists('Skin_L_lip_lower_corner_jnt'):
            if len(self.LipCorner_lower_L_Vetex) != 0:
                L_lip_lower_corner = 1
            else:
                L_lip_lower_corner = 0
        else:
            L_lip_lower_corner = 2
        if cmds.objExists('Skin_R_lip_corner_jnt'):
            if len(self.LipCorner_R_Vetex) != 0:
                R_lip_corner = 1
            else:
                R_lip_corner = 0
        else:
            R_lip_corner = 2
        if cmds.objExists('Skin_R_lip_lower_corner_jnt'):
            if len(self.LipCorner_lower_R_Vetex) != 0:
                R_lip_lower_corner = 1
            else:
                R_lip_lower_corner = 0
        else:
            R_lip_lower_corner = 2
        if cmds.objExists('Skin_upper_lip_jnt'):
            if len(self.LipUpper_Vetex) != 0:
                upper_lip = 1
            else:
                upper_lip = 0
        else:
            upper_lip = 2
        if cmds.objExists('Skin_Lower_lip_jnt'):
            if len(self.LipLower_Vetex) != 0:
                Lower_lip = 1
            else:
                Lower_lip = 0
        else:
            Lower_lip = 2
        if cmds.objExists('Skin_Lower_lip_outer_jnt'):
            if len(self.LipLower_Outer_Vetex) != 0:
                Lower_lip_outer = 1
            else:
                Lower_lip_outer = 0
        else:
            Lower_lip_outer = 2
        if cmds.objExists('Skin_L_lip_upper_side_jnt'):
            if len(self.Lip_L_UpperSide_Vetex) != 0:
                L_lip_upper_side = 1
            else:
                L_lip_upper_side = 0
        else:
            L_lip_upper_side = 2
        if cmds.objExists('Skin_L_lip_upper_outer_jnt'):
            if len(self.Lip_L_UpperOuter_Vetex) != 0:
                L_lip_upper_outer = 1
            else:
                L_lip_upper_outer = 0
        else:
            L_lip_upper_outer = 2
        if cmds.objExists('Skin_L_lip_lower_side_jnt'):
            if len(self.Lip_L_LowerSide_Vetex) != 0:
                L_lip_lower_side = 1
            else:
                L_lip_lower_side = 0
        else:
            L_lip_lower_side = 2
        if cmds.objExists('Skin_L_lip_lower_outer_jnt'):
            if len(self.Lip_L_LowerOuter_Vetex) != 0:
                L_lip_lower_outer = 1
            else:
                L_lip_lower_outer = 0
        else:
            L_lip_lower_outer = 2
        if cmds.objExists('Skin_R_lip_upper_side_jnt'):
            if len(self.Lip_R_UpperSide_Vetex) != 0:
                R_lip_upper_side = 1
            else:
                R_lip_upper_side = 0
        else:
            R_lip_upper_side = 2
        if cmds.objExists('Skin_R_lip_upper_outer_jnt'):
            if len(self.Lip_R_UpperOuter_Vetex) != 0:
                R_lip_upper_outer = 1
            else:
                R_lip_upper_outer = 0
        else:
            R_lip_upper_outer = 2
        if cmds.objExists('Skin_R_lip_lower_side_jnt'):
            if len(self.Lip_R_LowerSide_Vetex) != 0:
                R_lip_lower_side = 1
            else:
                R_lip_lower_side = 0
        else:
            R_lip_lower_side = 2
        if cmds.objExists('Skin_R_lip_lower_outer_jnt'):
            if len(self.Lip_R_LowerOuter_Vetex) != 0:
                R_lip_lower_outer = 1
            else:
                R_lip_lower_outer = 0
        else:
            R_lip_lower_outer = 2
        if cmds.objExists('Skin_L_lip_upper_side_02_jnt'):
            if len(self.Lip_L_UpperSide_02_Vetex) != 0:
                L_lip_upper_side_02 = 1
            else:
                L_lip_upper_side_02 = 0
        else:
            L_lip_upper_side_02 = 2
        if cmds.objExists('Skin_L_lip_lower_side_02_jnt'):
            if len(self.Lip_L_LowerSide_02_Vetex) != 0:
                L_lip_lower_side_02 = 1
            else:
                L_lip_lower_side_02 = 0
        else:
            L_lip_lower_side_02 = 2
        if cmds.objExists('Skin_R_lip_upper_side_02_jnt'):
            if len(self.Lip_R_UpperSide_02_Vetex) != 0:
                R_lip_upper_side_02 = 1
            else:
                R_lip_upper_side_02 = 0
        else:
            R_lip_upper_side_02 = 2
        if cmds.objExists('Skin_R_lip_lower_side_02_jnt'):
            if len(self.Lip_R_LowerSide_02_Vetex) != 0:
                R_lip_lower_side_02 = 1
            else:
                R_lip_lower_side_02 = 0
        else:
            R_lip_lower_side_02 = 2
        if L_lip_corner >= 1 and L_lip_lower_corner >= 1 and R_lip_corner >= 1 and R_lip_lower_corner >= 1 and upper_lip >= 1 and Lower_lip >= 1 and Lower_lip_outer >= 1 and L_lip_upper_side >= 1 and L_lip_upper_outer >= 1 and L_lip_lower_side >= 1 and L_lip_lower_outer >= 1 and R_lip_upper_side >= 1 and R_lip_upper_outer >= 1 and R_lip_lower_side >= 1 and R_lip_lower_outer >= 1 and L_lip_upper_side_02 >= 1 and L_lip_lower_side_02 >= 1 and R_lip_upper_side_02 >= 1 and R_lip_lower_side_02 >= 1:
            self.Skin_Lip_vetex_Check = 1
        if cmds.objExists(SKIN_JAW_MASTER_JOINT_NAME):
            if len(self.Lip_Jaw_Vetex) != 0:
                Jaw_master = 1
            else:
                Jaw_master = 0
        else:
            Jaw_master = 2
        if Jaw_master >= 1:
            self.Skin_Jaw_vetex_Check = 1
        if cmds.objExists('Skin_L_eye_blink_jnt'):
            if len(self.Eye_L_blink_Vetex) != 0:
                L_eye_blink = 1
            else:
                L_eye_blink = 0
        else:
            L_eye_blink = 2
        if cmds.objExists('Skin_L_eye_lower_jnt'):
            if len(self.Eye_L_lower_Vetex) != 0:
                L_eye_lower = 1
            else:
                L_eye_lower = 0
        else:
            L_eye_lower = 2
        if cmds.objExists('Skin_R_eye_blink_jnt'):
            if len(self.Eye_R_blink_Vetex) != 0:
                R_eye_blink = 1
            else:
                R_eye_blink = 0
        else:
            R_eye_blink = 2
        if cmds.objExists('Skin_R_eye_lower_jnt'):
            if len(self.Eye_R_lower_Vetex) != 0:
                R_eye_lower = 1
            else:
                R_eye_lower = 0
        else:
            R_eye_lower = 2
        if cmds.objExists('Skin_L_eye_lacrimal_jnt'):
            if len(self.Eye_L_lacrimal_Vetex) != 0:
                L_eye_lacrimal = 1
            else:
                L_eye_lacrimal = 0
        else:
            L_eye_lacrimal = 2
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt'):
            if len(self.Eye_L_lacrimal_upper_Vetex) != 0:
                L_eye_lacrimal_upper = 1
            else:
                L_eye_lacrimal_upper = 0
        else:
            L_eye_lacrimal_upper = 2
        if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt'):
            if len(self.Eye_L_lacrimal_lower_Vetex) != 0:
                L_eye_lacrimal_lower = 1
            else:
                L_eye_lacrimal_lower = 0
        else:
            L_eye_lacrimal_lower = 2
        if cmds.objExists('Skin_L_eye_back_jnt'):
            if len(self.Eye_L_back_Vetex) != 0:
                L_eye_back = 1
            else:
                L_eye_back = 0
        else:
            L_eye_back = 2
        if cmds.objExists('Skin_L_eye_back_upper_jnt'):
            if len(self.Eye_L_back_upper_Vetex) != 0:
                L_eye_back_upper = 1
            else:
                L_eye_back_upper = 0
        else:
            L_eye_back_upper = 2
        if cmds.objExists('Skin_L_eye_back_lower_jnt'):
            if len(self.Eye_L_back_lower_Vetex) != 0:
                L_eye_back_lower = 1
            else:
                L_eye_back_lower = 0
        else:
            L_eye_back_lower = 2
        if cmds.objExists('Skin_L_eye_double_jnt'):
            if len(self.Eye_L_double_Vetex) != 0:
                L_eye_double = 1
            else:
                L_eye_double = 0
        else:
            L_eye_double = 2
        if cmds.objExists('Skin_R_eye_lacrimal_jnt'):
            if len(self.Eye_R_lacrimal_Vetex) != 0:
                R_eye_lacrimal = 1
            else:
                R_eye_lacrimal = 0
        else:
            R_eye_lacrimal = 2
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt'):
            if len(self.Eye_R_lacrimal_upper_Vetex) != 0:
                R_eye_lacrimal_upper = 1
            else:
                R_eye_lacrimal_upper = 0
        else:
            R_eye_lacrimal_upper = 2
        if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt'):
            if len(self.Eye_R_lacrimal_lower_Vetex) != 0:
                R_eye_lacrimal_lower = 1
            else:
                R_eye_lacrimal_lower = 0
        else:
            R_eye_lacrimal_lower = 2
        if cmds.objExists('Skin_R_eye_back_jnt'):
            if len(self.Eye_R_back_Vetex) != 0:
                R_eye_back = 1
            else:
                R_eye_back = 0
        else:
            R_eye_back = 2
        if cmds.objExists('Skin_R_eye_back_upper_jnt'):
            if len(self.Eye_R_back_upper_Vetex) != 0:
                R_eye_back_upper = 1
            else:
                R_eye_back_upper = 0
        else:
            R_eye_back_upper = 2
        if cmds.objExists('Skin_R_eye_back_lower_jnt'):
            if len(self.Eye_R_back_lower_Vetex) != 0:
                R_eye_back_lower = 1
            else:
                R_eye_back_lower = 0
        else:
            R_eye_back_lower = 2
        if cmds.objExists('Skin_R_eye_double_jnt'):
            if len(self.Eye_R_double_Vetex) != 0:
                R_eye_double = 1
            else:
                R_eye_double = 0
        else:
            R_eye_double = 2
        if L_eye_blink >= 1 and L_eye_lower >= 1 and R_eye_blink >= 1 and R_eye_lower >= 1 and L_eye_lacrimal >= 1 and L_eye_lacrimal_upper >= 1 and L_eye_lacrimal_lower >= 1 and L_eye_back >= 1 and L_eye_back_upper >= 1 and L_eye_back_lower >= 1 and R_eye_lacrimal >= 1 and R_eye_lacrimal_upper >= 1 and R_eye_lacrimal_lower >= 1 and R_eye_back >= 1 and R_eye_back_upper >= 1 and R_eye_back_lower >= 1 and L_eye_double >= 1 and R_eye_double >= 1:
            self.Skin_Eye_vetex_Check = 1
        if cmds.objExists('Skin_L_cheek_jnt'):
            if len(self.Cheek_L_Vetex) != 0:
                L_cheek = 1
            else:
                L_cheek = 0
        else:
            L_cheek = 2
        if cmds.objExists('Skin_R_cheek_jnt'):
            if len(self.Cheek_R_Vetex) != 0:
                R_cheek = 1
            else:
                R_cheek = 0
        else:
            R_cheek = 2
        if cmds.objExists('Skin_L_upper_cheek_jnt'):
            if len(self.Cheek_L_upper_Vetex) != 0:
                L_upper_cheek = 1
            else:
                L_upper_cheek = 0
        else:
            L_upper_cheek = 2
        if cmds.objExists('Skin_L_outer_orbicularis_cheek_jnt'):
            if len(self.Cheek_L_outer_orbicularis_Vetex) != 0:
                L_outer_orbicularis_cheek = 1
            else:
                L_outer_orbicularis_cheek = 0
        else:
            L_outer_orbicularis_cheek = 2
        if cmds.objExists('Skin_L_inner_orbicularis_cheek_jnt'):
            if len(self.Cheek_L_inner_orbicularis_Vetex) != 0:
                L_inner_orbicularis_cheek = 1
            else:
                L_inner_orbicularis_cheek = 0
        else:
            L_inner_orbicularis_cheek = 2
        if cmds.objExists('Skin_R_upper_cheek_jnt'):
            if len(self.Cheek_R_upper_Vetex) != 0:
                R_upper_cheek = 1
            else:
                R_upper_cheek = 0
        else:
            R_upper_cheek = 2
        if cmds.objExists('Skin_R_outer_orbicularis_cheek_jnt'):
            if len(self.Cheek_R_outer_orbicularis_Vetex) != 0:
                R_outer_orbicularis_cheek = 1
            else:
                R_outer_orbicularis_cheek = 0
        else:
            R_outer_orbicularis_cheek = 2
        if cmds.objExists('Skin_R_inner_orbicularis_cheek_jnt'):
            if len(self.Cheek_R_inner_orbicularis_Vetex) != 0:
                R_inner_orbicularis_cheek = 1
            else:
                R_inner_orbicularis_cheek = 0
        else:
            R_inner_orbicularis_cheek = 2
        if cmds.objExists('Skin_L_lower_cheek_jnt'):
            if len(self.Cheek_L_lower_Vetex) != 0:
                L_lower_cheek = 1
            else:
                L_lower_cheek = 0
        else:
            L_lower_cheek = 2
        if cmds.objExists('Skin_R_lower_cheek_jnt'):
            if len(self.Cheek_R_lower_Vetex) != 0:
                R_lower_cheek = 1
            else:
                R_lower_cheek = 0
        else:
            R_lower_cheek = 2
        if cmds.objExists('Skin_L_lower_liplid_jnt'):
            if len(self.Cheek_L_lip_lid_Vetex) != 0:
                L_lip_lid_cheek = 1
            else:
                L_lip_lid_cheek = 0
        else:
            L_lip_lid_cheek = 2
        if cmds.objExists('Skin_R_lower_liplid_jnt'):
            if len(self.Cheek_R_lip_lid_Vetex) != 0:
                R_lip_lid_cheek = 1
            else:
                R_lip_lid_cheek = 0
        else:
            R_lip_lid_cheek = 2
        if L_cheek >= 1 and R_cheek >= 1 and L_upper_cheek >= 1 and L_outer_orbicularis_cheek >= 1 and L_inner_orbicularis_cheek >= 1 and R_upper_cheek >= 1 and R_outer_orbicularis_cheek >= 1 and R_inner_orbicularis_cheek >= 1 and L_lower_cheek >= 1 and R_lower_cheek >= 1 and L_lip_lid_cheek >= 1 and R_lip_lid_cheek >= 1:
            self.Skin_Cheek_vetex_Check = 1
        if cmds.objExists('Skin_L_nose_jnt'):
            if len(self.Nose_L_Vetex) != 0:
                L_nose = 1
            else:
                L_nose = 0
        else:
            L_nose = 2
        if cmds.objExists('Skin_L_nasalis_transverse_nose_jnt'):
            if len(self.Nose_L_nasalis_transverse_Vetex) != 0:
                L_nasalis_transverse_nose = 1
            else:
                L_nasalis_transverse_nose = 0
        else:
            L_nasalis_transverse_nose = 2
        if cmds.objExists('Skin_L_procerus_nose_jnt'):
            if len(self.Nose_L_procerus_Vetex) != 0:
                L_procerus_nose = 1
            else:
                L_procerus_nose = 0
        else:
            L_procerus_nose = 2
        if cmds.objExists('Skin_L_nasolabial_fold_nose_jnt'):
            if len(self.Nose_L_nasolabial_fold_Vetex) != 0:
                L_nasolabial_fold_nose = 1
            else:
                L_nasolabial_fold_nose = 0
        else:
            L_nasolabial_fold_nose = 2
        if cmds.objExists('Skin_R_nose_jnt'):
            if len(self.Nose_R_Vetex) != 0:
                R_nose = 1
            else:
                R_nose = 0
        else:
            R_nose = 2
        if cmds.objExists('Skin_R_nasalis_transverse_nose_jnt'):
            if len(self.Nose_R_nasalis_transverse_Vetex) != 0:
                R_nasalis_transverse_nose = 1
            else:
                R_nasalis_transverse_nose = 0
        else:
            R_nasalis_transverse_nose = 2
        if cmds.objExists('Skin_R_procerus_nose_jnt'):
            if len(self.Nose_R_procerus_Vetex) != 0:
                R_procerus_nose = 1
            else:
                R_procerus_nose = 0
        else:
            R_procerus_nose = 2
        if cmds.objExists('Skin_R_nasolabial_fold_nose_jnt'):
            if len(self.Nose_R_nasolabial_fold_Vetex) != 0:
                R_nasolabial_fold_nose = 1
            else:
                R_nasolabial_fold_nose = 0
        else:
            R_nasolabial_fold_nose = 2
        if cmds.objExists('Skin_nose_jnt'):
            if len(self.Nose_Center_Vetex) != 0:
                center_nose = 1
            else:
                center_nose = 0
        else:
            center_nose = 2
        if cmds.objExists('Skin_lower_nose_jnt'):
            if len(self.Nose_Lower_Vetex) != 0:
                Lower_nose = 1
            else:
                Lower_nose = 0
        else:
            Lower_nose = 2
        if cmds.objExists('Skin_depressor_septi_nose_jnt'):
            if len(self.Nose_depressor_septi_Vetex) != 0:
                depressor_septi_nose = 1
            else:
                depressor_septi_nose = 0
        else:
            depressor_septi_nose = 2
        if L_nose >= 1 and L_nasalis_transverse_nose >= 1 and L_procerus_nose >= 1 and L_nasolabial_fold_nose >= 1 and R_nose >= 1 and R_nasalis_transverse_nose >= 1 and R_procerus_nose >= 1 and R_nasolabial_fold_nose >= 1 and center_nose >= 1 and Lower_nose >= 1 and depressor_septi_nose >= 1:
            self.Skin_Nose_vetex_Check = 1
        if cmds.objExists('Skin_L_brow_jnt'):
            if len(self.Brow_L_Vetex) != 0:
                L_brow = 1
            else:
                L_brow = 0
        else:
            L_brow = 2
        if cmds.objExists('Skin_L_medial_fibers_brow_jnt'):
            if len(self.Brow_L_medial_fibers_Vetex) != 0:
                L_medial_fibers_brow = 1
            else:
                L_medial_fibers_brow = 0
        else:
            L_medial_fibers_brow = 2
        if cmds.objExists('Skin_L_lateral_fibers_brow_jnt'):
            if len(self.Brow_L_lateral_fibers_Vetex) != 0:
                L_lateral_fibers_brow = 1
            else:
                L_lateral_fibers_brow = 0
        else:
            L_lateral_fibers_brow = 2
        if cmds.objExists('Skin_L_procerus_brow_jnt'):
            if len(self.Brow_L_procerus_Vetex) != 0:
                L_procerus_brow = 1
            else:
                L_procerus_brow = 0
        else:
            L_procerus_brow = 2
        if cmds.objExists('Skin_R_brow_jnt'):
            if len(self.Brow_R_Vetex) != 0:
                R_brow = 1
            else:
                R_brow = 0
        else:
            R_brow = 2
        if cmds.objExists('Skin_R_medial_fibers_brow_jnt'):
            if len(self.Brow_R_medial_fibers_Vetex) != 0:
                R_medial_fibers_brow = 1
            else:
                R_medial_fibers_brow = 0
        else:
            R_medial_fibers_brow = 2
        if cmds.objExists('Skin_R_lateral_fibers_brow_jnt'):
            if len(self.Brow_R_lateral_fibers_Vetex) != 0:
                R_lateral_fibers_brow = 1
            else:
                R_lateral_fibers_brow = 0
        else:
            R_lateral_fibers_brow = 2
        if cmds.objExists('Skin_R_procerus_brow_jnt'):
            if len(self.Brow_R_procerus_Vetex) != 0:
                R_procerus_brow = 1
            else:
                R_procerus_brow = 0
        else:
            R_procerus_brow = 2
        if cmds.objExists('Skin_L_brow_02_jnt'):
            if len(self.Brow_L_02_Vetex) != 0:
                L_brow_02 = 1
            else:
                L_brow_02 = 0
        else:
            L_brow_02 = 2
        if cmds.objExists('Skin_R_brow_02_jnt'):
            if len(self.Brow_R_02_Vetex) != 0:
                R_brow_02 = 1
            else:
                R_brow_02 = 0
        else:
            R_brow_02 = 2
        if cmds.objExists('Skin_L_brow_03_jnt'):
            if len(self.Brow_L_03_Vetex) != 0:
                L_brow_03 = 1
            else:
                L_brow_03 = 0
        else:
            L_brow_03 = 2
        if cmds.objExists('Skin_R_brow_03_jnt'):
            if len(self.Brow_R_03_Vetex) != 0:
                R_brow_03 = 1
            else:
                R_brow_03 = 0
        else:
            R_brow_03 = 2
        if cmds.objExists('Skin_center_brow_jnt'):
            if len(self.Brow_Center_Vetex) != 0:
                center_brow = 1
            else:
                center_brow = 0
        else:
            center_brow = 2
        if L_brow >= 1 and L_medial_fibers_brow >= 1 and L_lateral_fibers_brow >= 1 and L_procerus_brow >= 1 and R_brow >= 1 and R_medial_fibers_brow >= 1 and R_lateral_fibers_brow >= 1 and R_procerus_brow >= 1 and L_brow_02 >= 1 and R_brow_02 >= 1 and L_brow_03 >= 1 and R_brow_03 >= 1 and center_brow >= 1:
            self.Skin_Brow_vetex_Check = 1
        if cmds.objExists('Skin_Upper_teeth_jnt'):
            if len(self.Oral_Upper_teeth_Vetex) != 0:
                Upper_teeth = 1
            else:
                Upper_teeth = 0
        else:
            Upper_teeth = 2
        if Upper_teeth >= 1:
            self.Skin_Upper_teeth_vetex_Check = 1
        if cmds.objExists('Skin_Lower_teeth_jnt'):
            if len(self.Oral_Lower_teeth_Vetex) != 0:
                Lower_teeth = 1
            else:
                Lower_teeth = 0
        else:
            Lower_teeth = 2
        if Lower_teeth >= 1:
            self.Skin_Lower_teeth_vetex_Check = 1
        if cmds.objExists('Skin_Tongue_jnt'):
            if len(self.Oral_Tongue_Vetex) != 0:
                Tongue = 1
            else:
                Tongue = 0
        else:
            Tongue = 2
        if cmds.objExists('Skin_Tongue_02_jnt'):
            if len(self.Oral_Tongue_02_Vetex) != 0:
                Tongue_02 = 1
            else:
                Tongue_02 = 0
        else:
            Tongue_02 = 2
        if cmds.objExists('Skin_Tongue_03_jnt'):
            if len(self.Oral_Tongue_03_Vetex) != 0:
                Tongue_03 = 1
            else:
                Tongue_03 = 0
        else:
            Tongue_03 = 2
        if Tongue >= 1 and Tongue_02 >= 1 and Tongue_03 >= 1:
            self.Skin_Tongue_vetex_Check = 1
        if cmds.objExists('Skin_L_eye_ball_jnt'):
            if len(self.EyeBall_L_Vetex) != 0:
                L_eyeball = 1
            else:
                L_eyeball = 0
        else:
            L_eyeball = 2
        if L_eyeball >= 1:
            self.Skin_EyeBall_L_vetex_Check = 1
        if cmds.objExists('Skin_R_eye_ball_jnt'):
            if len(self.EyeBall_R_Vetex) != 0:
                R_eyeball = 1
            else:
                R_eyeball = 0
        else:
            R_eyeball = 2
        if R_eyeball >= 1:
            self.Skin_EyeBall_R_vetex_Check = 1

    def lip_corner_left_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipCorner_L = cmds.ls(os=True, fl=True)
        if len(LipCorner_L) != 0:
            self.HeadMesh = LipCorner_L[0].split('.')[0]
            self.LipCorner_L_Vetex = LipCorner_L
            self.LipCorner_L_Vetex[0] = LipCorner_L[0]
            self.TopolDefine_window.LipCorner_L_Btn.setStyleSheet(self.green_color)
            print('Lip Left Corner Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left Corner Vertex')
            cmds.error('Please Select Lip Left Corner Vertex')
            self.TopolDefine_window.LipCorner_L_Btn.setStyleSheet(self.red_color)
        return

    def lip_corner_lower_left_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipCorner_lower_L = cmds.ls(os=True, fl=True)
        if len(LipCorner_lower_L) != 0:
            self.HeadMesh = LipCorner_lower_L[0].split('.')[0]
            self.LipCorner_lower_L_Vetex = LipCorner_lower_L
            self.LipCorner_lower_L_Vetex[0] = LipCorner_lower_L[0]
            self.TopolDefine_window.LipCorner_lower_L_Btn.setStyleSheet(self.green_color)
            print('Lip Left Corner lower Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left Corner lower Vertex')
            cmds.error('Please Select Lip Left Corner lower Vertex')
            self.TopolDefine_window.LipCorner_lower_L_Btn.setStyleSheet(self.red_color)
        return

    def lip_corner_right_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipCorner_R = cmds.ls(os=True, fl=True)
        if len(LipCorner_R) != 0:
            self.HeadMesh = LipCorner_R[0].split('.')[0]
            self.LipCorner_R_Vetex = LipCorner_R
            self.LipCorner_R_Vetex[0] = LipCorner_R[0]
            self.TopolDefine_window.LipCorner_R_Btn.setStyleSheet(self.green_color)
            print('Lip Right Corner Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right Corner Vertex')
            cmds.error('Please Select Lip Right Corner Vertex')
            self.TopolDefine_window.LipCorner_R_Btn.setStyleSheet(self.red_color)
        return

    def lip_corner_lower_right_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipCorner_lower_R = cmds.ls(os=True, fl=True)
        if len(LipCorner_lower_R) != 0:
            self.HeadMesh = LipCorner_lower_R[0].split('.')[0]
            self.LipCorner_lower_R_Vetex = LipCorner_lower_R
            self.LipCorner_lower_R_Vetex[0] = LipCorner_lower_R[0]
            self.TopolDefine_window.LipCorner_lower_R_Btn.setStyleSheet(self.green_color)
            print('Lip Right Corner lower Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right Corner lower Vertex')
            cmds.error('Please Select Lip Right Corner lower Vertex')
            self.TopolDefine_window.LipCorner_lower_R_Btn.setStyleSheet(self.red_color)
        return

    def lip_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipUpper = cmds.ls(os=True, fl=True)
        if len(LipUpper) != 0:
            self.HeadMesh = LipUpper[0].split('.')[0]
            cmds.select(LipUpper)
            self.LipUpper_Vetex = LipUpper
            self.LipUpper_Vetex[0] = LipUpper[0]
            self.TopolDefine_window.LipUpper_Btn.setStyleSheet(self.green_color)
            print('Lip Upper Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Upper Vertex')
            cmds.error('Please Select Lip Upper Vertex')
            self.TopolDefine_window.LipUpper_Btn.setStyleSheet(self.red_color)
        return

    def lip_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipLower = cmds.ls(os=True, fl=True)
        if len(LipLower) != 0:
            self.HeadMesh = LipLower[0].split('.')[0]
            self.LipLower_Vetex = LipLower
            self.LipLower_Vetex[0] = LipLower[0]
            self.TopolDefine_window.LipLower_Btn.setStyleSheet(self.green_color)
            print('Lip Lower Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Lower Vertex')
            cmds.error('Please Select Lip Lower Vertex')
            self.TopolDefine_window.LipLower_Btn.setStyleSheet(self.red_color)
        return

    def lip_lower_outer_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        LipLower_Outer = cmds.ls(os=True, fl=True)
        if len(LipLower_Outer) != 0:
            self.HeadMesh = LipLower_Outer[0].split('.')[0]
            self.LipLower_Outer_Vetex = LipLower_Outer
            self.LipLower_Outer_Vetex[0] = LipLower_Outer[0]
            self.TopolDefine_window.LipLower_Outer_Btn.setStyleSheet(self.green_color)
            print('Lip Lower Vertex Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Lower Outer Vertex')
            cmds.error('Please Select Lip Lower Vertex')
            self.TopolDefine_window.LipLower_Outer_Btn.setStyleSheet(self.red_color)
        return

    def lip_left_upper_side_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_L_UpperSide = cmds.ls(os=True, fl=True)
        if len(Lip_L_UpperSide) != 0:
            self.HeadMesh = Lip_L_UpperSide[0].split('.')[0]
            self.Lip_L_UpperSide_Vetex = Lip_L_UpperSide
            self.Lip_L_UpperSide_Vetex[0] = Lip_L_UpperSide[0]
            self.TopolDefine_window.Lip_L_UpperSide_Btn.setStyleSheet(self.green_color)
            print('Lip_L_UpperSide Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left UpperSide Vertex')
            cmds.error('Please Select Lip Left UpperSide Vertex')
            self.TopolDefine_window.Lip_L_UpperSide_Btn.setStyleSheet(self.red_color)
        return

    def lip_left_upper_side_02_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_L_UpperSide_02 = cmds.ls(os=True, fl=True)
        if len(Lip_L_UpperSide_02) != 0:
            self.HeadMesh = Lip_L_UpperSide_02[0].split('.')[0]
            self.Lip_L_UpperSide_02_Vetex = Lip_L_UpperSide_02
            self.Lip_L_UpperSide_02_Vetex[0] = Lip_L_UpperSide_02[0]
            self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setStyleSheet(self.green_color)
            print('Lip_L_UpperSide_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left UpperSide 02 Vertex')
            cmds.error('Please Select Lip Left UpperSide 02 Vertex')
            self.TopolDefine_window.Lip_L_UpperSide_02_Btn.setStyleSheet(self.red_color)
        return

    def lip_left_upper_outer_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_L_UpperOuter = cmds.ls(os=True, fl=True)
        if len(Lip_L_UpperOuter) != 0:
            self.HeadMesh = Lip_L_UpperOuter[0].split('.')[0]
            self.Lip_L_UpperOuter_Vetex = Lip_L_UpperOuter
            self.Lip_L_UpperOuter_Vetex[0] = Lip_L_UpperOuter[0]
            self.TopolDefine_window.Lip_L_UpperOuter_Btn.setStyleSheet(self.green_color)
            print('Lip_L_UpperOuter Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left UpperOuter Vertex')
            cmds.error('Please Select Lip Left UpperSide Vertex')
            self.TopolDefine_window.Lip_L_UpperOuter_Btn.setStyleSheet(self.red_color)
        return

    def lip_left_lower_side_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_L_LowerSide = cmds.ls(os=True, fl=True)
        if len(Lip_L_LowerSide) != 0:
            self.HeadMesh = Lip_L_LowerSide[0].split('.')[0]
            self.Lip_L_LowerSide_Vetex = Lip_L_LowerSide
            self.Lip_L_LowerSide_Vetex[0] = Lip_L_LowerSide[0]
            self.TopolDefine_window.Lip_L_LowerSide_Btn.setStyleSheet(self.green_color)
            print('Lip_L_LowerSide Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left LowerSide Vertex')
            cmds.error('Please Select Lip Left LowerSide Vertex')
            self.TopolDefine_window.Lip_L_LowerSide_Btn.setStyleSheet(self.red_color)
        return

    def lip_left_lower_side_02_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_L_LowerSide_02 = cmds.ls(os=True, fl=True)
        if len(Lip_L_LowerSide_02) != 0:
            self.HeadMesh = Lip_L_LowerSide_02[0].split('.')[0]
            self.Lip_L_LowerSide_02_Vetex = Lip_L_LowerSide_02
            self.Lip_L_LowerSide_02_Vetex[0] = Lip_L_LowerSide_02[0]
            self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setStyleSheet(self.green_color)
            print('Lip_L_LowerSide_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left LowerSide 02 Vertex')
            cmds.error('Please Select Lip Left LowerSide 02 Vertex')
            self.TopolDefine_window.Lip_L_LowerSide_02_Btn.setStyleSheet(self.red_color)
        return

    def lip_left_lower_outer_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_L_LowerOuter = cmds.ls(os=True, fl=True)
        if len(Lip_L_LowerOuter) != 0:
            self.HeadMesh = Lip_L_LowerOuter[0].split('.')[0]
            self.Lip_L_LowerOuter_Vetex = Lip_L_LowerOuter
            self.Lip_L_LowerOuter_Vetex[0] = Lip_L_LowerOuter[0]
            self.TopolDefine_window.Lip_L_LowerOuter_Btn.setStyleSheet(self.green_color)
            print('Lip_L_LowerOuter Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Left LowerOuter Vertex')
            cmds.error('Please Select Lip Left LowerSide Vertex')
            self.TopolDefine_window.Lip_L_LowerOuter_Btn.setStyleSheet(self.red_color)
        return

    def lip_right_upper_side_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_R_UpperSide = cmds.ls(os=True, fl=True)
        if len(Lip_R_UpperSide) != 0:
            self.HeadMesh = Lip_R_UpperSide[0].split('.')[0]
            self.Lip_R_UpperSide_Vetex = Lip_R_UpperSide
            self.Lip_R_UpperSide_Vetex[0] = Lip_R_UpperSide[0]
            self.TopolDefine_window.Lip_R_UpperSide_Btn.setStyleSheet(self.green_color)
            print('Lip_R_UpperSide Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right UpperSide Vertex')
            cmds.error('Please Select Lip Right UpperSide Vertex')
            self.TopolDefine_window.Lip_R_UpperSide_Btn.setStyleSheet(self.red_color)
        return

    def lip_right_upper_side_02_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_R_UpperSide_02 = cmds.ls(os=True, fl=True)
        if len(Lip_R_UpperSide_02) != 0:
            self.HeadMesh = Lip_R_UpperSide_02[0].split('.')[0]
            self.Lip_R_UpperSide_02_Vetex = Lip_R_UpperSide_02
            self.Lip_R_UpperSide_02_Vetex[0] = Lip_R_UpperSide_02[0]
            self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setStyleSheet(self.green_color)
            print('Lip_R_UpperSide_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right UpperSide 02 Vertex')
            cmds.error('Please Select Lip Right UpperSide 02 Vertex')
            self.TopolDefine_window.Lip_R_UpperSide_02_Btn.setStyleSheet(self.red_color)
        return

    def lip_right_upper_outer_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_R_UpperOuter = cmds.ls(os=True, fl=True)
        if len(Lip_R_UpperOuter) != 0:
            self.HeadMesh = Lip_R_UpperOuter[0].split('.')[0]
            self.Lip_R_UpperOuter_Vetex = Lip_R_UpperOuter
            self.Lip_R_UpperOuter_Vetex[0] = Lip_R_UpperOuter[0]
            self.TopolDefine_window.Lip_R_UpperOuter_Btn.setStyleSheet(self.green_color)
            print('Lip_R_UpperOuter Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right UpperOuter Vertex')
            cmds.error('Please Select Lip Right UpperSide Vertex')
            self.TopolDefine_window.Lip_R_UpperOuter_Btn.setStyleSheet(self.red_color)
        return

    def lip_right_lower_side_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_R_LowerSide = cmds.ls(os=True, fl=True)
        if len(Lip_R_LowerSide) != 0:
            self.HeadMesh = Lip_R_LowerSide[0].split('.')[0]
            self.Lip_R_LowerSide_Vetex = Lip_R_LowerSide
            self.Lip_R_LowerSide_Vetex[0] = Lip_R_LowerSide[0]
            self.TopolDefine_window.Lip_R_LowerSide_Btn.setStyleSheet(self.green_color)
            print('Lip_R_LowerSide Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right LowerSide Vertex')
            cmds.error('Please Select Lip Right LowerSide Vertex')
            self.TopolDefine_window.Lip_R_LowerSide_Btn.setStyleSheet(self.red_color)
        return

    def lip_right_lower_side_02_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_R_LowerSide_02 = cmds.ls(os=True, fl=True)
        if len(Lip_R_LowerSide_02) != 0:
            self.HeadMesh = Lip_R_LowerSide_02[0].split('.')[0]
            self.Lip_R_LowerSide_02_Vetex = Lip_R_LowerSide_02
            self.Lip_R_LowerSide_02_Vetex[0] = Lip_R_LowerSide_02[0]
            self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setStyleSheet(self.green_color)
            print('Lip_R_LowerSide_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right LowerSide 02 Vertex')
            cmds.error('Please Select Lip Right LowerSide 02 Vertex')
            self.TopolDefine_window.Lip_R_LowerSide_02_Btn.setStyleSheet(self.red_color)
        return

    def lip_right_lower_outer_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_R_LowerOuter = cmds.ls(os=True, fl=True)
        if len(Lip_R_LowerOuter) != 0:
            self.HeadMesh = Lip_R_LowerOuter[0].split('.')[0]
            self.Lip_R_LowerOuter_Vetex = Lip_R_LowerOuter
            self.Lip_R_LowerOuter_Vetex[0] = Lip_R_LowerOuter[0]
            self.TopolDefine_window.Lip_R_LowerOuter_Btn.setStyleSheet(self.green_color)
            print('Lip_R_LowerOuter Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Right LowerOuter Vertex')
            cmds.error('Please Select Lip Right LowerSide Vertex')
            self.TopolDefine_window.Lip_R_LowerOuter_Btn.setStyleSheet(self.red_color)
        return

    def lip_lock_check_command(self, *args):
        if self.ui.LipTopolCheckBox.isChecked() is True:
            self.ui.LipTopolCheckBox.setChecked(False)
        else:
            self.ui.LipTopolCheckBox.setChecked(True)

    def jaw_topology_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        JawTopolSel = cmds.ls(os=True, fl=True)
        if len(JawTopolSel) != 0:
            self.HeadMesh = JawTopolSel[0].split('.')[0]
            self.JawVetex = JawTopolSel
            self.JawVetex[0] = JawTopolSel[0]
            self.ui.JawTopolBtn.setStyleSheet(self.green_color)
            print('Jaw Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Jaw Topology')
            cmds.error('Please Select Jaw Topology')
        if len(self.JawVetex) != 0 and len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            self.ui.JawTopolCheckBox.setChecked(True)
        return

    def lip_jaw_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Lip_Jaw = cmds.ls(os=True, fl=True)
        if len(Lip_Jaw) != 0:
            self.HeadMesh = Lip_Jaw[0].split('.')[0]
            self.Lip_Jaw_Vetex = Lip_Jaw
            self.Lip_Jaw_Vetex[0] = Lip_Jaw[0]
            self.TopolDefine_window.Lip_Jaw_Btn.setStyleSheet(self.green_color)
            print('Lip_Jaw Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Lip Jaw Vertex')
            cmds.error('Please Select Lip Jaw Vertex')
            self.TopolDefine_window.Lip_Jaw_Btn.setStyleSheet(self.red_color)
        return

    def jaw_lock_check_command(self, *args):
        if self.ui.JawTopolCheckBox.isChecked() is True:
            self.ui.JawTopolCheckBox.setChecked(False)
        else:
            self.ui.JawTopolCheckBox.setChecked(True)

    def eye_topology_left_command(self, *args):
        EyeTopolLSel = cmds.ls(sl=True, fl=True)
        if len(EyeTopolLSel) != 0:
            self.HeadMesh = EyeTopolLSel[0].split('.')[0]
            cmds.select(EyeTopolLSel)
            mel.eval('ConvertSelectionToVertices')
            self.EyeLVetex = cmds.ls(sl=True)
            self.ui.EyeTopolLBtn.setStyleSheet(self.green_color)
            print('Left Eye Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Left Eye Topology')
            cmds.error('Please Select Left Eye Topology')
        if len(self.EyeLVetex) != 0 and len(self.EyeRVetex) != 0:
            self.ui.EyeTopolCheckBox.setChecked(True)
        return

    def eye_topology_right_command(self, *args):
        EyeTopolRSel = cmds.ls(sl=True, fl=True)
        if len(EyeTopolRSel) != 0:
            self.HeadMesh = EyeTopolRSel[0].split('.')[0]
            cmds.select(EyeTopolRSel)
            mel.eval('ConvertSelectionToVertices')
            self.EyeRVetex = cmds.ls(sl=True)
            self.ui.EyeTopolRBtn.setStyleSheet(self.green_color)
            print('Right Eye Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Right Eye Topology')
            cmds.error('Please Select Right Eye Topology')
        if len(self.EyeLVetex) != 0 and len(self.EyeRVetex) != 0:
            self.ui.EyeTopolCheckBox.setChecked(True)
        return

    def eye_left_blink_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_blink = cmds.ls(os=True, fl=True)
        if len(Eye_L_blink) != 0:
            self.HeadMesh = Eye_L_blink[0].split('.')[0]
            self.Eye_L_blink_Vetex = Eye_L_blink
            self.Eye_L_blink_Vetex[0] = Eye_L_blink[0]
            self.TopolDefine_window.Eye_L_blink_Btn.setStyleSheet(self.green_color)
            print('Eye_L_blink Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left Blink Vertex')
            cmds.error('Please Select Eye Left Blink Vertex')
            self.TopolDefine_window.Eye_L_blink_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_blink_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_blink = cmds.ls(os=True, fl=True)
        if len(Eye_R_blink) != 0:
            self.HeadMesh = Eye_R_blink[0].split('.')[0]
            self.Eye_R_blink_Vetex = Eye_R_blink
            self.Eye_R_blink_Vetex[0] = Eye_R_blink[0]
            self.TopolDefine_window.Eye_R_blink_Btn.setStyleSheet(self.green_color)
            print('Eye_R_blink Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right Blink Vertex')
            cmds.error('Please Select Eye Right Blink Vertex')
            self.TopolDefine_window.Eye_R_blink_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_lower = cmds.ls(os=True, fl=True)
        if len(Eye_L_lower) != 0:
            self.HeadMesh = Eye_L_lower[0].split('.')[0]
            self.Eye_L_lower_Vetex = Eye_L_lower
            self.Eye_L_lower_Vetex[0] = Eye_L_lower[0]
            self.TopolDefine_window.Eye_L_lower_Btn.setStyleSheet(self.green_color)
            print('Eye_L_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left Lower Vertex')
            cmds.error('Please Select Eye Left Lower Vertex')
            self.TopolDefine_window.Eye_L_lower_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_lower = cmds.ls(os=True, fl=True)
        if len(Eye_R_lower) != 0:
            self.HeadMesh = Eye_R_lower[0].split('.')[0]
            cmds.select(Eye_R_lower)
            self.Eye_R_lower_Vetex = Eye_R_lower
            self.Eye_R_lower_Vetex[0] = Eye_R_lower[0]
            self.TopolDefine_window.Eye_R_lower_Btn.setStyleSheet(self.green_color)
            print('Eye_R_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right Lower Vertex')
            cmds.error('Please Select Eye Right Lower Vertex')
            self.TopolDefine_window.Eye_R_lower_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_lacrimal_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_lacrimal = cmds.ls(os=True, fl=True)
        if len(Eye_L_lacrimal) != 0:
            self.HeadMesh = Eye_L_lacrimal[0].split('.')[0]
            self.Eye_L_lacrimal_Vetex = Eye_L_lacrimal
            self.Eye_L_lacrimal_Vetex[0] = Eye_L_lacrimal[0]
            self.TopolDefine_window.Eye_L_lacrimal_Btn.setStyleSheet(self.green_color)
            print('Eye_L_lacrimal Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left lacrimal Vertex')
            cmds.error('Please Select Eye Left lacrimal Vertex')
            self.TopolDefine_window.Eye_L_lacrimal_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_lacrimal_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_lacrimal_upper = cmds.ls(os=True, fl=True)
        if len(Eye_L_lacrimal_upper) != 0:
            self.HeadMesh = Eye_L_lacrimal_upper[0].split('.')[0]
            self.Eye_L_lacrimal_upper_Vetex = Eye_L_lacrimal_upper
            self.Eye_L_lacrimal_upper_Vetex[0] = Eye_L_lacrimal_upper[0]
            self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setStyleSheet(self.green_color)
            print('Eye_L_lacrimal_upper Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left lacrimal_upper Vertex')
            cmds.error('Please Select Eye Left lacrimal_upper Vertex')
            self.TopolDefine_window.Eye_L_lacrimal_upper_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_lacrimal_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_lacrimal_lower = cmds.ls(os=True, fl=True)
        if len(Eye_L_lacrimal_lower) != 0:
            self.HeadMesh = Eye_L_lacrimal_lower[0].split('.')[0]
            self.Eye_L_lacrimal_lower_Vetex = Eye_L_lacrimal_lower
            self.Eye_L_lacrimal_lower_Vetex[0] = Eye_L_lacrimal_lower[0]
            self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setStyleSheet(self.green_color)
            print('Eye_L_lacrimal_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left lacrimal_lower Vertex')
            cmds.error('Please Select Eye Left lacrimal_lower Vertex')
            self.TopolDefine_window.Eye_L_lacrimal_lower_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_lacrimal_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_lacrimal = cmds.ls(os=True, fl=True)
        if len(Eye_R_lacrimal) != 0:
            self.HeadMesh = Eye_R_lacrimal[0].split('.')[0]
            cmds.select(Eye_R_lacrimal)
            self.Eye_R_lacrimal_Vetex = Eye_R_lacrimal
            self.Eye_R_lacrimal_Vetex[0] = Eye_R_lacrimal[0]
            self.TopolDefine_window.Eye_R_lacrimal_Btn.setStyleSheet(self.green_color)
            print('Eye_R_lacrimal Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right lacrimal Vertex')
            cmds.error('Please Select Eye Right lacrimal Vertex')
            self.TopolDefine_window.Eye_R_lacrimal_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_lacrimal_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_lacrimal_upper = cmds.ls(os=True, fl=True)
        if len(Eye_R_lacrimal_upper) != 0:
            self.HeadMesh = Eye_R_lacrimal_upper[0].split('.')[0]
            cmds.select(Eye_R_lacrimal_upper)
            self.Eye_R_lacrimal_upper_Vetex = Eye_R_lacrimal_upper
            self.Eye_R_lacrimal_upper_Vetex[0] = Eye_R_lacrimal_upper[0]
            self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setStyleSheet(self.green_color)
            print('Eye_R_lacrimal_upper Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right lacrimal_upper Vertex')
            cmds.error('Please Select Eye Right lacrimal_upper Vertex')
            self.TopolDefine_window.Eye_R_lacrimal_upper_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_lacrimal_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_lacrimal_lower = cmds.ls(os=True, fl=True)
        if len(Eye_R_lacrimal_lower) != 0:
            self.HeadMesh = Eye_R_lacrimal_lower[0].split('.')[0]
            cmds.select(Eye_R_lacrimal_lower)
            self.Eye_R_lacrimal_lower_Vetex = Eye_R_lacrimal_lower
            self.Eye_R_lacrimal_lower_Vetex[0] = Eye_R_lacrimal_lower[0]
            self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setStyleSheet(self.green_color)
            print('Eye_R_lacrimal_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right lacrimal_lower Vertex')
            cmds.error('Please Select Eye Right lacrimal_lower Vertex')
            self.TopolDefine_window.Eye_R_lacrimal_lower_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_back_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_back = cmds.ls(os=True, fl=True)
        if len(Eye_L_back) != 0:
            self.HeadMesh = Eye_L_back[0].split('.')[0]
            self.Eye_L_back_Vetex = Eye_L_back
            self.Eye_L_back_Vetex[0] = Eye_L_back[0]
            self.TopolDefine_window.Eye_L_back_Btn.setStyleSheet(self.green_color)
            print('Eye_L_back Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left back Vertex')
            cmds.error('Please Select Eye Left back Vertex')
            self.TopolDefine_window.Eye_L_back_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_back_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_back_upper = cmds.ls(os=True, fl=True)
        if len(Eye_L_back_upper) != 0:
            self.HeadMesh = Eye_L_back_upper[0].split('.')[0]
            self.Eye_L_back_upper_Vetex = Eye_L_back_upper
            self.Eye_L_back_upper_Vetex[0] = Eye_L_back_upper[0]
            self.TopolDefine_window.Eye_L_back_upper_Btn.setStyleSheet(self.green_color)
            print('Eye_L_back_upper Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left back_upper Vertex')
            cmds.error('Please Select Eye Left back_upper Vertex')
            self.TopolDefine_window.Eye_L_back_upper_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_back_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_back_lower = cmds.ls(os=True, fl=True)
        if len(Eye_L_back_lower) != 0:
            self.HeadMesh = Eye_L_back_lower[0].split('.')[0]
            self.Eye_L_back_lower_Vetex = Eye_L_back_lower
            self.Eye_L_back_lower_Vetex[0] = Eye_L_back_lower[0]
            self.TopolDefine_window.Eye_L_back_lower_Btn.setStyleSheet(self.green_color)
            print('Eye_L_back_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left back_lower Vertex')
            cmds.error('Please Select Eye Left back_lower Vertex')
            self.TopolDefine_window.Eye_L_back_lower_Btn.setStyleSheet(self.red_color)
        return

    def eye_left_double_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_L_double = cmds.ls(os=True, fl=True)
        if len(Eye_L_double) != 0:
            self.HeadMesh = Eye_L_double[0].split('.')[0]
            self.Eye_L_double_Vetex = Eye_L_double
            self.Eye_L_double_Vetex[0] = Eye_L_double[0]
            self.TopolDefine_window.Eye_L_double_Btn.setStyleSheet(self.green_color)
            print('Eye_L_double Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Left double eyelid Vertex')
            cmds.error('Please Select Eye Left double eyelid Vertex')
            self.TopolDefine_window.Eye_L_double_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_back_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_back = cmds.ls(os=True, fl=True)
        if len(Eye_R_back) != 0:
            self.HeadMesh = Eye_R_back[0].split('.')[0]
            self.Eye_R_back_Vetex = Eye_R_back
            self.Eye_R_back_Vetex[0] = Eye_R_back[0]
            self.TopolDefine_window.Eye_R_back_Btn.setStyleSheet(self.green_color)
            print('Eye_R_back Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right back Vertex')
            cmds.error('Please Select Eye Right back Vertex')
            self.TopolDefine_window.Eye_R_back_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_back_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_back_upper = cmds.ls(os=True, fl=True)
        if len(Eye_R_back_upper) != 0:
            self.HeadMesh = Eye_R_back_upper[0].split('.')[0]
            self.Eye_R_back_upper_Vetex = Eye_R_back_upper
            self.Eye_R_back_upper_Vetex[0] = Eye_R_back_upper[0]
            self.TopolDefine_window.Eye_R_back_upper_Btn.setStyleSheet(self.green_color)
            print('Eye_R_back_upper Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right back_upper Vertex')
            cmds.error('Please Select Eye Right back_upper Vertex')
            self.TopolDefine_window.Eye_R_back_upper_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_back_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_back_lower = cmds.ls(os=True, fl=True)
        if len(Eye_R_back_lower) != 0:
            self.HeadMesh = Eye_R_back_lower[0].split('.')[0]
            self.Eye_R_back_lower_Vetex = Eye_R_back_lower
            self.Eye_R_back_lower_Vetex[0] = Eye_R_back_lower[0]
            self.TopolDefine_window.Eye_R_back_lower_Btn.setStyleSheet(self.green_color)
            print('Eye_R_back_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right back_lower Vertex')
            cmds.error('Please Select Eye Right back_lower Vertex')
            self.TopolDefine_window.Eye_R_back_lower_Btn.setStyleSheet(self.red_color)
        return

    def eye_right_double_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Eye_R_double = cmds.ls(os=True, fl=True)
        if len(Eye_R_double) != 0:
            self.HeadMesh = Eye_R_double[0].split('.')[0]
            self.Eye_R_double_Vetex = Eye_R_double
            self.Eye_R_double_Vetex[0] = Eye_R_double[0]
            self.TopolDefine_window.Eye_R_double_Btn.setStyleSheet(self.green_color)
            print('Eye_R_double Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Eye Right double eyelid Vertex')
            cmds.error('Please Select Eye Right double eyelid Vertex')
            self.TopolDefine_window.Eye_R_double_Btn.setStyleSheet(self.red_color)
        return

    def eye_lock_check_command(self, *args):
        if self.ui.EyeTopolCheckBox.isChecked() is True:
            self.ui.EyeTopolCheckBox.setChecked(False)
        else:
            self.ui.EyeTopolCheckBox.setChecked(True)

    def eye_grow_command(self, *args):
        L_Eye_vertex_count = len(self.EyeLVetex)
        if cmds.objExists('Skin_L_eye_lacrimal_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_jnt.liw', 0)
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_upper_jnt.liw', 0)
        if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_lower_jnt.liw', 0)
        if cmds.objExists('Skin_L_eye_back_jnt'):
            cmds.setAttr('Skin_L_eye_back_jnt.liw', 0)
        if cmds.objExists('Skin_L_eye_back_upper_jnt'):
            cmds.setAttr('Skin_L_eye_back_upper_jnt.liw', 0)
        if cmds.objExists('Skin_L_eye_back_lower_jnt'):
            cmds.setAttr('Skin_L_eye_back_lower_jnt.liw', 0)
        if cmds.objExists('Skin_R_eye_lacrimal_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_jnt.liw', 0)
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_upper_jnt.liw', 0)
        if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_lower_jnt.liw', 0)
        if cmds.objExists('Skin_R_eye_back_jnt'):
            cmds.setAttr('Skin_R_eye_back_jnt.liw', 0)
        if cmds.objExists('Skin_R_eye_back_upper_jnt'):
            cmds.setAttr('Skin_R_eye_back_upper_jnt.liw', 0)
        if cmds.objExists('Skin_R_eye_back_lower_jnt'):
            cmds.setAttr('Skin_R_eye_back_lower_jnt.liw', 0)
        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        if len(self.Eye_C_Grow_vertex) != 0:
            if len(self.Temp) == 0:
                if cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_blink_jnt':
                    self.Temp = self.Eye_L_blink_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_lower_jnt':
                    self.Temp = self.Eye_L_lower_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_blink_jnt':
                    self.Temp = self.Eye_R_blink_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_lower_jnt':
                    self.Temp = self.Eye_R_lower_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_lacrimal_upper_jnt':
                    self.Temp = self.Eye_L_lacrimal_upper_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_lacrimal_lower_jnt':
                    self.Temp = self.Eye_L_lacrimal_lower_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_back_upper_jnt':
                    self.Temp = self.Eye_L_back_upper_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_back_lower_jnt':
                    self.Temp = self.Eye_L_back_lower_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_lacrimal_upper_jnt':
                    self.Temp = self.Eye_R_lacrimal_upper_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_lacrimal_lower_jnt':
                    self.Temp = self.Eye_R_lacrimal_lower_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_back_upper_jnt':
                    self.Temp = self.Eye_R_back_upper_Vetex[0]
                elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_back_lower_jnt':
                    self.Temp = self.Eye_R_back_lower_Vetex[0]
            mel.eval('GrowPolygonSelectionRegion')
            cmds.select(self.Eye_C_Grow_vertex, self.Temp, d=True)
            self.Temp = self.Eye_C_Grow_vertex
            self.Eye_C_Grow_vertex = cmds.ls(sl=True)
        if len(self.Eye_C_Grow_vertex) == 0:
            if cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_blink_jnt':
                cmds.select(self.Eye_L_blink_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_lower_jnt':
                cmds.select(self.Eye_L_lower_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_blink_jnt':
                cmds.select(self.Eye_R_blink_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_lower_jnt':
                cmds.select(self.Eye_R_lower_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_lacrimal_upper_jnt':
                cmds.select(self.Eye_L_lacrimal_upper_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_lacrimal_lower_jnt':
                cmds.select(self.Eye_L_lacrimal_lower_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_back_upper_jnt':
                cmds.select(self.Eye_L_back_upper_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_L_eye_back_lower_jnt':
                cmds.select(self.Eye_L_back_lower_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_lacrimal_upper_jnt':
                cmds.select(self.Eye_R_lacrimal_upper_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_lacrimal_lower_jnt':
                cmds.select(self.Eye_R_lacrimal_lower_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_back_upper_jnt':
                cmds.select(self.Eye_R_back_upper_Vetex[0])
            elif cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, inf=True) == 'Skin_R_eye_back_lower_jnt':
                cmds.select(self.Eye_R_back_lower_Vetex[0])
            mel.eval('GrowPolygonSelectionRegion')
            self.Eye_C_Grow_vertex = cmds.ls(sl=True)
            cmds.select(self.Eye_C_Grow_vertex)
            self.Temp = ''

    def eye_reset_grow_command(self, *args):
        self.Eye_C_Grow_vertex = ''
        print('Grow vertex selection reset')

    def cheek_topology_left_command(self, *args):
        CheekTopolLSel = cmds.ls(sl=True, fl=True)
        if len(CheekTopolLSel) != 0:
            self.HeadMesh = CheekTopolLSel[0].split('.')[0]
            cmds.select(CheekTopolLSel)
            mel.eval('ConvertSelectionToVertices')
            self.CheekLVetex = cmds.ls(sl=True)
            self.ui.CheekTopolLBtn.setStyleSheet(self.green_color)
            print('Left Cheek Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Left Cheek Topology')
            cmds.error('Please Select Left Cheek Topology')
        if len(self.CheekLVetex) != 0 and len(self.CheekRVetex) != 0:
            self.ui.CheekTopolCheckBox.setChecked(True)
        return

    def cheek_topology_right_command(self, *args):
        CheekTopolRSel = cmds.ls(sl=True, fl=True)
        if len(CheekTopolRSel) != 0:
            self.HeadMesh = CheekTopolRSel[0].split('.')[0]
            cmds.select(CheekTopolRSel)
            mel.eval('ConvertSelectionToVertices')
            self.CheekRVetex = cmds.ls(sl=True)
            self.ui.CheekTopolRBtn.setStyleSheet(self.green_color)
            print('Right Cheek Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Right Cheek Topology')
            cmds.error('Please Select Right Cheek Topology')
        if len(self.CheekLVetex) != 0 and len(self.CheekRVetex) != 0:
            self.ui.CheekTopolCheckBox.setChecked(True)
        return

    def cheek_left_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_L = cmds.ls(os=True, fl=True)
        if len(Cheek_L) != 0:
            self.HeadMesh = Cheek_L[0].split('.')[0]
            self.Cheek_L_Vetex = Cheek_L
            self.Cheek_L_Vetex[0] = Cheek_L[0]
            self.TopolDefine_window.Cheek_L_Btn.setStyleSheet(self.green_color)
            print('Cheek_L Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Left Vertex')
            cmds.error('Please Select Cheek Left Vertex')
            self.TopolDefine_window.Cheek_L_Btn.setStyleSheet(self.red_color)
        return

    def cheek_left_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_L_upper = cmds.ls(os=True, fl=True)
        if len(Cheek_L_upper) != 0:
            self.HeadMesh = Cheek_L_upper[0].split('.')[0]
            self.Cheek_L_upper_Vetex = Cheek_L_upper
            self.Cheek_L_upper_Vetex[0] = Cheek_L_upper[0]
            self.TopolDefine_window.Cheek_L_upper_Btn.setStyleSheet(self.green_color)
            print('Cheek_L_upper Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Left Upper Vertex')
            cmds.error('Please Select Cheek Left Upper Vertex')
            self.TopolDefine_window.Cheek_L_upper_Btn.setStyleSheet(self.red_color)
        return

    def cheek_left_outer_orbicularis_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_L_outer_orbicularis = cmds.ls(os=True, fl=True)
        if len(Cheek_L_outer_orbicularis) != 0:
            self.HeadMesh = Cheek_L_outer_orbicularis[0].split('.')[0]
            self.Cheek_L_outer_orbicularis_Vetex = Cheek_L_outer_orbicularis
            self.Cheek_L_outer_orbicularis_Vetex[0] = Cheek_L_outer_orbicularis[0]
            self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setStyleSheet(self.green_color)
            print('Cheek_L_outer_orbicularis Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Left outer_orbicularis Vertex')
            cmds.error('Please Select Cheek Left outer_orbicularis Vertex')
            self.TopolDefine_window.Cheek_L_outer_orbicularis_Btn.setStyleSheet(self.red_color)
        return

    def cheek_left_inner_orbicularis_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_L_inner_orbicularis = cmds.ls(os=True, fl=True)
        if len(Cheek_L_inner_orbicularis) != 0:
            self.HeadMesh = Cheek_L_inner_orbicularis[0].split('.')[0]
            self.Cheek_L_inner_orbicularis_Vetex = Cheek_L_inner_orbicularis
            self.Cheek_L_inner_orbicularis_Vetex[0] = Cheek_L_inner_orbicularis[0]
            self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setStyleSheet(self.green_color)
            print('Cheek_L_inner_orbicularis Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Left inner_orbicularis Vertex')
            cmds.error('Please Select Cheek Left inner_orbicularis Vertex')
            self.TopolDefine_window.Cheek_L_inner_orbicularis_Btn.setStyleSheet(self.red_color)
        return

    def cheek_left_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_L_lower = cmds.ls(os=True, fl=True)
        if len(Cheek_L_lower) != 0:
            self.HeadMesh = Cheek_L_lower[0].split('.')[0]
            self.Cheek_L_lower_Vetex = Cheek_L_lower
            self.Cheek_L_lower_Vetex[0] = Cheek_L_lower[0]
            self.TopolDefine_window.Cheek_L_lower_Btn.setStyleSheet(self.green_color)
            print('Cheek_L_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Left Lower Vertex')
            cmds.error('Please Select Cheek Left Lower Vertex')
            self.TopolDefine_window.Cheek_L_lower_Btn.setStyleSheet(self.red_color)
        return

    def cheek_left_lip_lid_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_L_lip_lid = cmds.ls(os=True, fl=True)
        if len(Cheek_L_lip_lid) != 0:
            self.HeadMesh = Cheek_L_lip_lid[0].split('.')[0]
            self.Cheek_L_lip_lid_Vetex = Cheek_L_lip_lid
            self.Cheek_L_lip_lid_Vetex[0] = Cheek_L_lip_lid[0]
            self.TopolDefine_window.Cheek_L_lip_lid_Btn.setStyleSheet(self.green_color)
            print('Cheek_L_lip_lid Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Left Liplid Vertex')
            cmds.error('Please Select Cheek Left Liplid Vertex')
            self.TopolDefine_window.Cheek_L_lip_lid_Btn.setStyleSheet(self.red_color)
        return

    def cheek_right_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_R = cmds.ls(os=True, fl=True)
        if len(Cheek_R) != 0:
            self.HeadMesh = Cheek_R[0].split('.')[0]
            self.Cheek_R_Vetex = Cheek_R
            self.Cheek_R_Vetex[0] = Cheek_R[0]
            self.TopolDefine_window.Cheek_R_Btn.setStyleSheet(self.green_color)
            print('Cheek_R Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Right Vertex')
            cmds.error('Please Select Cheek Right Vertex')
            self.TopolDefine_window.Cheek_R_Btn.setStyleSheet(self.red_color)
        return

    def cheek_right_upper_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_R_upper = cmds.ls(os=True, fl=True)
        if len(Cheek_R_upper) != 0:
            self.HeadMesh = Cheek_R_upper[0].split('.')[0]
            self.Cheek_R_upper_Vetex = Cheek_R_upper
            self.Cheek_R_upper_Vetex[0] = Cheek_R_upper[0]
            self.TopolDefine_window.Cheek_R_upper_Btn.setStyleSheet(self.green_color)
            print('Cheek_R_upper Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Right Upper Vertex')
            cmds.error('Please Select Cheek Right Upper Vertex')
            self.TopolDefine_window.Cheek_R_upper_Btn.setStyleSheet(self.red_color)
        return

    def cheek_right_outer_orbicularis_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_R_outer_orbicularis = cmds.ls(os=True, fl=True)
        if len(Cheek_R_outer_orbicularis) != 0:
            self.HeadMesh = Cheek_R_outer_orbicularis[0].split('.')[0]
            self.Cheek_R_outer_orbicularis_Vetex = Cheek_R_outer_orbicularis
            self.Cheek_R_outer_orbicularis_Vetex[0] = Cheek_R_outer_orbicularis[0]
            self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setStyleSheet(self.green_color)
            print('Cheek_R_outer_orbicularis Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Right outer_orbicularis Vertex')
            cmds.error('Please Select Cheek Right outer_orbicularis Vertex')
            self.TopolDefine_window.Cheek_R_outer_orbicularis_Btn.setStyleSheet(self.red_color)
        return

    def cheek_right_inner_orbicularis_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_R_inner_orbicularis = cmds.ls(os=True, fl=True)
        if len(Cheek_R_inner_orbicularis) != 0:
            self.HeadMesh = Cheek_R_inner_orbicularis[0].split('.')[0]
            self.Cheek_R_inner_orbicularis_Vetex = Cheek_R_inner_orbicularis
            self.Cheek_R_inner_orbicularis_Vetex[0] = Cheek_R_inner_orbicularis[0]
            self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setStyleSheet(self.green_color)
            print('Cheek_R_inner_orbicularis Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Right inner_orbicularis Vertex')
            cmds.error('Please Select Cheek Right inner_orbicularis Vertex')
            self.TopolDefine_window.Cheek_R_inner_orbicularis_Btn.setStyleSheet(self.red_color)
        return

    def cheek_right_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_R_lower = cmds.ls(os=True, fl=True)
        if len(Cheek_R_lower) != 0:
            self.HeadMesh = Cheek_R_lower[0].split('.')[0]
            self.Cheek_R_lower_Vetex = Cheek_R_lower
            self.Cheek_R_lower_Vetex[0] = Cheek_R_lower[0]
            self.TopolDefine_window.Cheek_R_lower_Btn.setStyleSheet(self.green_color)
            print('Cheek_R_lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Right Lower Vertex')
            cmds.error('Please Select Cheek Right Lower Vertex')
            self.TopolDefine_window.Cheek_R_lower_Btn.setStyleSheet(self.red_color)
        return

    def cheek_right_lip_lid_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Cheek_R_lip_lid = cmds.ls(os=True, fl=True)
        if len(Cheek_R_lip_lid) != 0:
            self.HeadMesh = Cheek_R_lip_lid[0].split('.')[0]
            self.Cheek_R_lip_lid_Vetex = Cheek_R_lip_lid
            self.Cheek_R_lip_lid_Vetex[0] = Cheek_R_lip_lid[0]
            self.TopolDefine_window.Cheek_R_lip_lid_Btn.setStyleSheet(self.green_color)
            print('Cheek_R_lip_lid Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Cheek Right Liplid Vertex')
            cmds.error('Please Select Cheek Right Liplid Vertex')
            self.TopolDefine_window.Cheek_R_lip_lid_Btn.setStyleSheet(self.red_color)
        return

    def cheek_lock_check_command(self, *args):
        if self.ui.CheekTopolCheckBox.isChecked() is True:
            self.ui.CheekTopolCheckBox.setChecked(False)
        else:
            self.ui.CheekTopolCheckBox.setChecked(True)

    def nose_topology_command(self, *args):
        NoseTopolSel = cmds.ls(sl=True, fl=True)
        if len(NoseTopolSel) != 0:
            self.HeadMesh = NoseTopolSel[0].split('.')[0]
            cmds.select(NoseTopolSel)
            mel.eval('ConvertSelectionToVertices')
            self.NoseVetex = cmds.ls(sl=True)
            self.ui.NoseTopolBtn.setStyleSheet(self.green_color)
            print('Nose Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Topology')
            cmds.error('Please Select Nose Topology')
        if len(self.NoseVetex) != 0:
            self.ui.NoseTopolCheckBox.setChecked(True)
        return

    def nose_left_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_L = cmds.ls(os=True, fl=True)
        if len(Nose_L) != 0:
            self.HeadMesh = Nose_L[0].split('.')[0]
            self.Nose_L_Vetex = Nose_L
            self.Nose_L_Vetex[0] = Nose_L[0]
            self.TopolDefine_window.Nose_L_Btn.setStyleSheet(self.green_color)
            print('Nose_L Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Left Vertex')
            cmds.error('Please Select Nose Left Vertex')
            self.TopolDefine_window.Nose_L_Btn.setStyleSheet(self.red_color)
        return

    def nose_left_nasalis_transverse_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_L_nasalis_transverse = cmds.ls(os=True, fl=True)
        if len(Nose_L_nasalis_transverse) != 0:
            self.HeadMesh = Nose_L_nasalis_transverse[0].split('.')[0]
            self.Nose_L_nasalis_transverse_Vetex = Nose_L_nasalis_transverse
            self.Nose_L_nasalis_transverse_Vetex[0] = Nose_L_nasalis_transverse[0]
            self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setStyleSheet(self.green_color)
            print('Nose_L_nasalis_transverse Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Left nasalis_transverse Vertex')
            cmds.error('Please Select Nose Left nasalis_transverse Vertex')
            self.TopolDefine_window.Nose_L_nasalis_transverse_Btn.setStyleSheet(self.red_color)
        return

    def nose_left_procerus_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_L_procerus = cmds.ls(os=True, fl=True)
        if len(Nose_L_procerus) != 0:
            self.HeadMesh = Nose_L_procerus[0].split('.')[0]
            self.Nose_L_procerus_Vetex = Nose_L_procerus
            self.Nose_L_procerus_Vetex[0] = Nose_L_procerus[0]
            self.TopolDefine_window.Nose_L_procerus_Btn.setStyleSheet(self.green_color)
            print('Nose_L_procerus Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Left procerus Vertex')
            cmds.error('Please Select Nose Left procerus Vertex')
            self.TopolDefine_window.Nose_L_procerus_Btn.setStyleSheet(self.red_color)
        return

    def nose_left_nasolabial_fold_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_L_nasolabial_fold = cmds.ls(os=True, fl=True)
        if len(Nose_L_nasolabial_fold) != 0:
            self.HeadMesh = Nose_L_nasolabial_fold[0].split('.')[0]
            self.Nose_L_nasolabial_fold_Vetex = Nose_L_nasolabial_fold
            self.Nose_L_nasolabial_fold_Vetex[0] = Nose_L_nasolabial_fold[0]
            self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setStyleSheet(self.green_color)
            print('Nose_L_nasolabial_fold Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Left nasolabial_fold Vertex')
            cmds.error('Please Select Nose Left nasolabial_fold Vertex')
            self.TopolDefine_window.Nose_L_nasolabial_fold_Btn.setStyleSheet(self.red_color)
        return

    def nose_right_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_R = cmds.ls(os=True, fl=True)
        if len(Nose_R) != 0:
            self.HeadMesh = Nose_R[0].split('.')[0]
            self.Nose_R_Vetex = Nose_R
            self.Nose_R_Vetex[0] = Nose_R[0]
            self.TopolDefine_window.Nose_R_Btn.setStyleSheet(self.green_color)
            print('Nose_R Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Right Vertex')
            cmds.error('Please Select Nose Right Vertex')
            self.TopolDefine_window.Nose_R_Btn.setStyleSheet(self.red_color)
        return

    def nose_right_nasalis_transverse_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_R_nasalis_transverse = cmds.ls(os=True, fl=True)
        if len(Nose_R_nasalis_transverse) != 0:
            self.HeadMesh = Nose_R_nasalis_transverse[0].split('.')[0]
            self.Nose_R_nasalis_transverse_Vetex = Nose_R_nasalis_transverse
            self.Nose_R_nasalis_transverse_Vetex[0] = Nose_R_nasalis_transverse[0]
            self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setStyleSheet(self.green_color)
            print('Nose_R_nasalis_transverse Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Right nasalis_transverse Vertex')
            cmds.error('Please Select Nose Right nasalis_transverse Vertex')
            self.TopolDefine_window.Nose_R_nasalis_transverse_Btn.setStyleSheet(self.red_color)
        return

    def nose_right_procerus_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_R_procerus = cmds.ls(os=True, fl=True)
        if len(Nose_R_procerus) != 0:
            self.HeadMesh = Nose_R_procerus[0].split('.')[0]
            self.Nose_R_procerus_Vetex = Nose_R_procerus
            self.Nose_R_procerus_Vetex[0] = Nose_R_procerus[0]
            self.TopolDefine_window.Nose_R_procerus_Btn.setStyleSheet(self.green_color)
            print('Nose_R_procerus Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Right procerus Vertex')
            cmds.error('Please Select Nose Right procerus Vertex')
            self.TopolDefine_window.Nose_R_procerus_Btn.setStyleSheet(self.red_color)
        return

    def nose_right_nasolabial_fold_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_R_nasolabial_fold = cmds.ls(os=True, fl=True)
        if len(Nose_R_nasolabial_fold) != 0:
            self.HeadMesh = Nose_R_nasolabial_fold[0].split('.')[0]
            self.Nose_R_nasolabial_fold_Vetex = Nose_R_nasolabial_fold
            self.Nose_R_nasolabial_fold_Vetex[0] = Nose_R_nasolabial_fold[0]
            self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setStyleSheet(self.green_color)
            print('Nose_R_nasolabial_fold Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Right nasolabial_fold Vertex')
            cmds.error('Please Select Nose Right nasolabial_fold Vertex')
            self.TopolDefine_window.Nose_R_nasolabial_fold_Btn.setStyleSheet(self.red_color)
        return

    def nose_center_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_Center = cmds.ls(os=True, fl=True)
        if len(Nose_Center) != 0:
            self.HeadMesh = Nose_Center[0].split('.')[0]
            self.Nose_Center_Vetex = Nose_Center
            self.Nose_Center_Vetex[0] = Nose_Center[0]
            self.TopolDefine_window.Nose_Center_Btn.setStyleSheet(self.green_color)
            print('Nose_Center Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Center Vertex')
            cmds.error('Please Select Nose Center Vertex')
            self.TopolDefine_window.Nose_Center_Btn.setStyleSheet(self.red_color)
        return

    def nose_lower_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_Lower = cmds.ls(os=True, fl=True)
        if len(Nose_Lower) != 0:
            self.HeadMesh = Nose_Lower[0].split('.')[0]
            self.Nose_Lower_Vetex = Nose_Lower
            self.Nose_Lower_Vetex[0] = Nose_Lower[0]
            self.TopolDefine_window.Nose_Lower_Btn.setStyleSheet(self.green_color)
            print('Nose_Lower Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose Lower Vertex')
            cmds.error('Please Select Nose Lower Vertex')
            self.TopolDefine_window.Nose_Lower_Btn.setStyleSheet(self.red_color)
        return

    def nose_depressor_septi_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Nose_depressor_septi = cmds.ls(os=True, fl=True)
        if len(Nose_depressor_septi) != 0:
            self.HeadMesh = Nose_depressor_septi[0].split('.')[0]
            self.Nose_depressor_septi_Vetex = Nose_depressor_septi
            self.Nose_depressor_septi_Vetex[0] = Nose_depressor_septi[0]
            self.TopolDefine_window.Nose_depressor_septi_Btn.setStyleSheet(self.green_color)
            print('Nose_depressor_septi Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Nose depressor_septi Vertex')
            cmds.error('Please Select Nose depressor_septi Vertex')
            self.TopolDefine_window.Nose_depressor_septi_Btn.setStyleSheet(self.red_color)
        return

    def nose_lock_check_command(self, *args):
        if self.ui.NoseTopolCheckBox.isChecked() is True:
            self.ui.NoseTopolCheckBox.setChecked(False)
        else:
            self.ui.NoseTopolCheckBox.setChecked(True)

    def brow_topology_left_command(self, *args):
        BrowTopolLSel = cmds.ls(sl=True, fl=True)
        if len(BrowTopolLSel) != 0:
            self.HeadMesh = BrowTopolLSel[0].split('.')[0]
            cmds.select(BrowTopolLSel)
            mel.eval('ConvertSelectionToVertices')
            self.BrowLVetex = cmds.ls(sl=True)
            self.ui.BrowTopolLBtn.setStyleSheet(self.green_color)
            print('Brow Left Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left Topology')
            cmds.error('Please Select Brow Left Topology')
        if len(self.BrowLVetex) != 0 and len(self.BrowRVetex) != 0:
            self.ui.BrowTopolCheckBox.setChecked(True)
        return

    def brow_topology_right_command(self, *args):
        BrowTopolRSel = cmds.ls(sl=True, fl=True)
        if len(BrowTopolRSel) != 0:
            self.HeadMesh = BrowTopolRSel[0].split('.')[0]
            cmds.select(BrowTopolRSel)
            mel.eval('ConvertSelectionToVertices')
            self.BrowRVetex = cmds.ls(sl=True)
            self.ui.BrowTopolRBtn.setStyleSheet(self.green_color)
            print('Brow Right Boundary Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right Topology')
            cmds.error('Please Select Brow Right Topology')
        if len(self.BrowLVetex) != 0 and len(self.BrowRVetex) != 0:
            self.ui.BrowTopolCheckBox.setChecked(True)
        return

    def brow_left_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_L = cmds.ls(os=True, fl=True)
        if len(Brow_L) != 0:
            self.HeadMesh = Brow_L[0].split('.')[0]
            self.Brow_L_Vetex = Brow_L
            self.Brow_L_Vetex[0] = Brow_L[0]
            self.TopolDefine_window.Brow_L_Btn.setStyleSheet(self.green_color)
            print('Brow_L Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left Vertex')
            cmds.error('Please Select Brow Left Vertex')
            self.TopolDefine_window.Brow_L_Btn.setStyleSheet(self.red_color)
        return

    def brow_left_medial_fibers_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_L_medial_fibers = cmds.ls(os=True, fl=True)
        if len(Brow_L_medial_fibers) != 0:
            self.HeadMesh = Brow_L_medial_fibers[0].split('.')[0]
            self.Brow_L_medial_fibers_Vetex = Brow_L_medial_fibers
            self.Brow_L_medial_fibers_Vetex[0] = Brow_L_medial_fibers[0]
            self.TopolDefine_window.Brow_L_medial_fibers_Btn.setStyleSheet(self.green_color)
            print('Brow_L medial_fibers Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left medial_fibers Vertex')
            cmds.error('Please Select Brow Left medial_fibers Vertex')
            self.TopolDefine_window.Brow_L_medial_fibers_Btn.setStyleSheet(self.red_color)
        return

    def brow_left_lateral_fibers_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_L_lateral_fibers = cmds.ls(os=True, fl=True)
        if len(Brow_L_lateral_fibers) != 0:
            self.HeadMesh = Brow_L_lateral_fibers[0].split('.')[0]
            self.Brow_L_lateral_fibers_Vetex = Brow_L_lateral_fibers
            self.Brow_L_lateral_fibers_Vetex[0] = Brow_L_lateral_fibers[0]
            self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setStyleSheet(self.green_color)
            print('Brow_L lateral_fibers Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left lateral_fibers Vertex')
            cmds.error('Please Select Brow Left lateral_fibers Vertex')
            self.TopolDefine_window.Brow_L_lateral_fibers_Btn.setStyleSheet(self.red_color)
        return

    def brow_left_procerus_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_L_procerus = cmds.ls(os=True, fl=True)
        if len(Brow_L_procerus) != 0:
            self.HeadMesh = Brow_L_procerus[0].split('.')[0]
            self.Brow_L_procerus_Vetex = Brow_L_procerus
            self.Brow_L_procerus_Vetex[0] = Brow_L_procerus[0]
            self.TopolDefine_window.Brow_L_procerus_Btn.setStyleSheet(self.green_color)
            print('Brow_L procerus Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left procerus Vertex')
            cmds.error('Please Select Brow Left procerus Vertex')
            self.TopolDefine_window.Brow_L_procerus_Btn.setStyleSheet(self.red_color)
        return

    def brow_right_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_R = cmds.ls(os=True, fl=True)
        if len(Brow_R) != 0:
            self.HeadMesh = Brow_R[0].split('.')[0]
            self.Brow_R_Vetex = Brow_R
            self.Brow_R_Vetex[0] = Brow_R[0]
            self.TopolDefine_window.Brow_R_Btn.setStyleSheet(self.green_color)
            print('Brow_R Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right Vertex')
            cmds.error('Please Select Brow Right Vertex')
            self.TopolDefine_window.Brow_R_Btn.setStyleSheet(self.red_color)
        return

    def brow_right_medial_fibers_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_R_medial_fibers = cmds.ls(os=True, fl=True)
        if len(Brow_R_medial_fibers) != 0:
            self.HeadMesh = Brow_R_medial_fibers[0].split('.')[0]
            self.Brow_R_medial_fibers_Vetex = Brow_R_medial_fibers
            self.Brow_R_medial_fibers_Vetex[0] = Brow_R_medial_fibers[0]
            self.TopolDefine_window.Brow_R_medial_fibers_Btn.setStyleSheet(self.green_color)
            print('Brow_R medial_fibers Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right medial_fibers Vertex')
            cmds.error('Please Select Brow Right medial_fibers Vertex')
            self.TopolDefine_window.Brow_R_medial_fibers_Btn.setStyleSheet(self.red_color)
        return

    def brow_right_lateral_fibers_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_R_lateral_fibers = cmds.ls(os=True, fl=True)
        if len(Brow_R_lateral_fibers) != 0:
            self.HeadMesh = Brow_R_lateral_fibers[0].split('.')[0]
            self.Brow_R_lateral_fibers_Vetex = Brow_R_lateral_fibers
            self.Brow_R_lateral_fibers_Vetex[0] = Brow_R_lateral_fibers[0]
            self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setStyleSheet(self.green_color)
            print('Brow_R lateral_fibers Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right lateral_fibers Vertex')
            cmds.error('Please Select Brow Right lateral_fibers Vertex')
            self.TopolDefine_window.Brow_R_lateral_fibers_Btn.setStyleSheet(self.red_color)
        return

    def brow_right_procerus_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_R_procerus = cmds.ls(os=True, fl=True)
        if len(Brow_R_procerus) != 0:
            self.HeadMesh = Brow_R_procerus[0].split('.')[0]
            self.Brow_R_procerus_Vetex = Brow_R_procerus
            self.Brow_R_procerus_Vetex[0] = Brow_R_procerus[0]
            self.TopolDefine_window.Brow_R_procerus_Btn.setStyleSheet(self.green_color)
            print('Brow_R procerus Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right procerus Vertex')
            cmds.error('Please Select Brow Right procerus Vertex')
            self.TopolDefine_window.Brow_R_procerus_Btn.setStyleSheet(self.red_color)
        return

    def brow_left_02_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_L_02 = cmds.ls(os=True, fl=True)
        if len(Brow_L_02) != 0:
            self.HeadMesh = Brow_L_02[0].split('.')[0]
            self.Brow_L_02_Vetex = Brow_L_02
            self.Brow_L_02_Vetex[0] = Brow_L_02[0]
            self.TopolDefine_window.Brow_L_02_Btn.setStyleSheet(self.green_color)
            print('Brow_L_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left 02 Vertex')
            cmds.error('Please Select Brow Left 02 Vertex')
            self.TopolDefine_window.Brow_L_02_Btn.setStyleSheet(self.red_color)
        return

    def brow_right_02_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_R_02 = cmds.ls(os=True, fl=True)
        if len(Brow_R_02) != 0:
            self.HeadMesh = Brow_R_02[0].split('.')[0]
            self.Brow_R_02_Vetex = Brow_R_02
            self.Brow_R_02_Vetex[0] = Brow_R_02[0]
            self.TopolDefine_window.Brow_R_02_Btn.setStyleSheet(self.green_color)
            print('Brow_R_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right 02 Vertex')
            cmds.error('Please Select Brow Right 02 Vertex')
            self.TopolDefine_window.Brow_R_02_Btn.setStyleSheet(self.red_color)
        return

    def brow_left_03_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_L_03 = cmds.ls(os=True, fl=True)
        if len(Brow_L_03) != 0:
            self.HeadMesh = Brow_L_03[0].split('.')[0]
            self.Brow_L_03_Vetex = Brow_L_03
            self.Brow_L_03_Vetex[0] = Brow_L_03[0]
            self.TopolDefine_window.Brow_L_03_Btn.setStyleSheet(self.green_color)
            print('Brow_L_03 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Left 03 Vertex')
            cmds.error('Please Select Brow Left 03 Vertex')
            self.TopolDefine_window.Brow_L_03_Btn.setStyleSheet(self.red_color)
        return

    def brow_right_03_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_R_03 = cmds.ls(os=True, fl=True)
        if len(Brow_R_03) != 0:
            self.HeadMesh = Brow_R_03[0].split('.')[0]
            self.Brow_R_03_Vetex = Brow_R_03
            self.Brow_R_03_Vetex[0] = Brow_R_03[0]
            self.TopolDefine_window.Brow_R_03_Btn.setStyleSheet(self.green_color)
            print('Brow_R_03 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Right 03 Vertex')
            cmds.error('Please Select Brow Right 03 Vertex')
            self.TopolDefine_window.Brow_R_03_Btn.setStyleSheet(self.red_color)
        return

    def brow_center_command(self, *args):
        mel.eval('ConvertSelectionToVertices')
        Brow_Center = cmds.ls(os=True, fl=True)
        if len(Brow_Center) != 0:
            self.HeadMesh = Brow_Center[0].split('.')[0]
            self.Brow_Center_Vetex = Brow_Center
            self.Brow_Center_Vetex[0] = Brow_Center[0]
            self.TopolDefine_window.Brow_Center_Btn.setStyleSheet(self.green_color)
            print('Brow_Center Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Brow Center Vertex')
            cmds.error('Please Select Brow Center Vertex')
            self.TopolDefine_window.Brow_Center_Btn.setStyleSheet(self.red_color)
        return

    def brow_lock_check_command(self, *args):
        if self.ui.BrowTopolCheckBox.isChecked() is True:
            self.ui.BrowTopolCheckBox.setChecked(False)
        else:
            self.ui.BrowTopolCheckBox.setChecked(True)

    # todo oral setup command
    def oral_upper_teeth_command(self, *args):
        Oral_Upper_teeth = cmds.ls(os=True, fl=True)
        if len(Oral_Upper_teeth) != 0:
            self.UpperTeethMesh = Oral_Upper_teeth[0].split('.')[0]
            self.Oral_Upper_teeth_Vetex = Oral_Upper_teeth
            self.Oral_Upper_teeth_Vetex[0] = Oral_Upper_teeth[0]
            self.TopolDefine_window.Oral_Upper_teeth_Btn.setStyleSheet(self.green_color)
            print('Oral_Upper_teeth Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Oral Upper Teeth Mesh')
            cmds.error('Please Select Oral Upper Teeth Mesh')
            self.TopolDefine_window.Oral_Upper_teeth_Btn.setStyleSheet(self.red_color)
        return

    def oral_lower_teeth_command(self, *args):
        Oral_Lower_teeth = cmds.ls(os=True, fl=True)
        if len(Oral_Lower_teeth) != 0:
            self.LowerTeethMesh = Oral_Lower_teeth[0].split('.')[0]
            self.Oral_Lower_teeth_Vetex = Oral_Lower_teeth
            self.Oral_Lower_teeth_Vetex[0] = Oral_Lower_teeth[0]
            self.TopolDefine_window.Oral_Lower_teeth_Btn.setStyleSheet(self.green_color)
            print('Oral_Lower_teeth Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Oral Lower Teeth Mesh')
            cmds.error('Please Select Oral Lower Teeth Mesh')
            self.TopolDefine_window.Oral_Lower_teeth_Btn.setStyleSheet(self.red_color)
        return

    def oral_tongue_command(self, *args):
        Oral_Tongue = cmds.ls(os=True, fl=True)
        if len(Oral_Tongue) != 0:
            self.TongueMesh = Oral_Tongue[0].split('.')[0]
            self.Oral_Tongue_Vetex = Oral_Tongue
            self.Oral_Tongue_Vetex[0] = Oral_Tongue[0]
            self.TopolDefine_window.Oral_Tongue_Btn.setStyleSheet(self.green_color)
            print('Oral_Tongue Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Oral Tongue Vertex')
            cmds.error('Please Select Oral Tongue Vertex')
            self.TopolDefine_window.Oral_Tongue_Btn.setStyleSheet(self.red_color)
        return

    def oral_tongue_02_command(self, *args):
        Oral_Tongue_02 = cmds.ls(os=True, fl=True)
        if len(Oral_Tongue_02) != 0:
            self.TongueMesh = Oral_Tongue_02[0].split('.')[0]
            self.Oral_Tongue_02_Vetex = Oral_Tongue_02
            self.Oral_Tongue_02_Vetex[0] = Oral_Tongue_02[0]
            self.TopolDefine_window.Oral_Tongue_02_Btn.setStyleSheet(self.green_color)
            print('Oral_Tongue_02 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Oral Tongue 02 Vertex')
            cmds.error('Please Select Oral Tongue 02 Vertex')
            self.TopolDefine_window.Oral_Tongue_02_Btn.setStyleSheet(self.red_color)
        return

    def oral_tongue_03_command(self, *args):
        Oral_Tongue_03 = cmds.ls(os=True, fl=True)
        if len(Oral_Tongue_03) != 0:
            self.TongueMesh = Oral_Tongue_03[0].split('.')[0]
            self.Oral_Tongue_03_Vetex = Oral_Tongue_03
            self.Oral_Tongue_03_Vetex[0] = Oral_Tongue_03[0]
            self.TopolDefine_window.Oral_Tongue_03_Btn.setStyleSheet(self.green_color)
            print('Oral_Tongue_03 Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Oral Tongue 03 Vertex')
            cmds.error('Please Select Oral Tongue 03 Vertex')
            self.TopolDefine_window.Oral_Tongue_03_Btn.setStyleSheet(self.red_color)
        return

    # todo eye ball setup command
    def eye_ball_left_command(self, *args):
        EyeBall_L = cmds.ls(os=True, fl=True)
        if len(EyeBall_L) != 0:
            self.L_EyeballMesh = EyeBall_L[0].split('.')[0]
            self.EyeBall_L_Vetex = EyeBall_L
            self.EyeBall_L_Vetex[0] = EyeBall_L[0]
            self.TopolDefine_window.EyeBall_L_Btn.setStyleSheet(self.green_color)
            print('EyeBall_L Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Left EyeBall Mesh')
            cmds.error('Please Select Left EyeBall Mesh')
            self.TopolDefine_window.EyeBall_L_Btn.setStyleSheet(self.red_color)
        return

    def eye_ball_right_command(self, *args):
        EyeBall_R = cmds.ls(os=True, fl=True)
        if len(EyeBall_R) != 0:
            self.R_EyeballMesh = EyeBall_R[0].split('.')[0]
            self.EyeBall_R_Vetex = EyeBall_R
            self.EyeBall_R_Vetex[0] = EyeBall_R[0]
            self.TopolDefine_window.EyeBall_R_Btn.setStyleSheet(self.green_color)
            print('EyeBall_R Selected')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Select Right EyeBall Mesh')
            cmds.error('Please Select Right EyeBall Mesh')
            self.TopolDefine_window.EyeBall_R_Btn.setStyleSheet(self.red_color)
        return

    def match_joint_command(self, *args):
        Joint_Sel = cmds.ls(sl=True)
        if len(Joint_Sel) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'No selection Object exists!')
            cmds.error('No selection Object exists!')
        if cmds.objExists('FitScale_ctrl'):
            pass
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Not this moment, this function always works on before the create rig system')
            cmds.error('Not this moment, this function always works on before the create rig system')
        Scale_check = (cmds.getAttr('FitScale_ctrl.scaleX') + cmds.getAttr('FitScale_ctrl.scaleY') + cmds.getAttr('FitScale_ctrl.scaleZ')) / 3
        for each in Joint_Sel:
            if each == 'L_lip_corner_jnt':
                if len(self.LipCorner_L_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipCorner_L_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_lower_corner_jnt':
                if len(self.LipCorner_lower_L_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipCorner_lower_L_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'upper_lip_jnt':
                if len(self.LipUpper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipUpper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'Lower_lip_jnt':
                if len(self.LipLower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipLower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'Lower_lip_outer_jnt':
                if len(self.LipLower_Outer_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipLower_Outer_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_upper_side_jnt':
                if len(self.Lip_L_UpperSide_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_L_UpperSide_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_upper_side_02_jnt':
                if len(self.Lip_L_UpperSide_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_L_UpperSide_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_upper_outer_jnt':
                if len(self.Lip_L_UpperOuter_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_L_UpperOuter_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_lower_side_jnt':
                if len(self.Lip_L_LowerSide_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_L_LowerSide_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_lower_side_02_jnt':
                if len(self.Lip_L_LowerSide_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_L_LowerSide_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lip_lower_outer_jnt':
                if len(self.Lip_L_LowerOuter_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_L_LowerOuter_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_corner_jnt':
                if len(self.LipCorner_R_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipCorner_R_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_lower_corner_jnt':
                if len(self.LipCorner_lower_R_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.LipCorner_lower_R_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_upper_side_jnt':
                if len(self.Lip_R_UpperSide_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_R_UpperSide_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_upper_side_02_jnt':
                if len(self.Lip_R_UpperSide_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_R_UpperSide_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_upper_outer_jnt':
                if len(self.Lip_R_UpperOuter_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_R_UpperOuter_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_lower_side_jnt':
                if len(self.Lip_R_LowerSide_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_R_LowerSide_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_lower_side_02_jnt':
                if len(self.Lip_R_LowerSide_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_R_LowerSide_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lip_lower_outer_jnt':
                if len(self.Lip_R_LowerOuter_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_R_LowerOuter_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == JAW_MASTER_JOINT_NAME:
                if len(self.Lip_Jaw_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Lip_Jaw_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_blink_jnt':
                if len(self.Eye_L_blink_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_blink_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_lower_jnt':
                if len(self.Eye_L_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_lacrimal_jnt':
                if len(self.Eye_L_lacrimal_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_lacrimal_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_lacrimal_upper_jnt':
                if len(self.Eye_L_lacrimal_upper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_lacrimal_upper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_lacrimal_lower_jnt':
                if len(self.Eye_L_lacrimal_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_lacrimal_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_back_jnt':
                if len(self.Eye_L_back_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_back_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_back_upper_jnt':
                if len(self.Eye_L_back_upper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_back_upper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_back_lower_jnt':
                if len(self.Eye_L_back_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_back_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_eye_double_jnt':
                if len(self.Eye_L_double_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_L_double_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_blink_jnt':
                if len(self.Eye_R_blink_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_blink_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_lower_jnt':
                if len(self.Eye_R_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_lacrimal_jnt':
                if len(self.Eye_R_lacrimal_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_lacrimal_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_lacrimal_upper_jnt':
                if len(self.Eye_R_lacrimal_upper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_lacrimal_upper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_lacrimal_lower_jnt':
                if len(self.Eye_R_lacrimal_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_lacrimal_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_back_jnt':
                if len(self.Eye_R_back_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_back_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_back_upper_jnt':
                if len(self.Eye_R_back_upper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_back_upper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_back_lower_jnt':
                if len(self.Eye_R_back_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_back_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_eye_double_jnt':
                if len(self.Eye_R_double_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Eye_R_double_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_cheek_jnt':
                if len(self.Cheek_L_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_L_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_upper_cheek_jnt':
                if len(self.Cheek_L_upper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_L_upper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_outer_orbicularis_cheek_jnt':
                if len(self.Cheek_L_outer_orbicularis_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_L_outer_orbicularis_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_inner_orbicularis_cheek_jnt':
                if len(self.Cheek_L_inner_orbicularis_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_L_inner_orbicularis_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lower_cheek_jnt':
                if len(self.Cheek_L_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_L_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lower_liplid_jnt':
                if len(self.Cheek_L_lip_lid_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_L_lip_lid_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_cheek_jnt':
                if len(self.Cheek_R_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_R_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_upper_cheek_jnt':
                if len(self.Cheek_R_upper_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_R_upper_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_outer_orbicularis_cheek_jnt':
                if len(self.Cheek_R_outer_orbicularis_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_R_outer_orbicularis_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_inner_orbicularis_cheek_jnt':
                if len(self.Cheek_R_inner_orbicularis_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_R_inner_orbicularis_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lower_cheek_jnt':
                if len(self.Cheek_R_lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_R_lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lower_liplid_jnt':
                if len(self.Cheek_R_lip_lid_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Cheek_R_lip_lid_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_nose_jnt':
                if len(self.Nose_L_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_L_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_nasalis_transverse_nose_jnt':
                if len(self.Nose_L_nasalis_transverse_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_L_nasalis_transverse_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_procerus_nose_jnt':
                if len(self.Nose_L_procerus_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_L_procerus_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_nasolabial_fold_nose_jnt':
                if len(self.Nose_L_nasolabial_fold_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_L_nasolabial_fold_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_nose_jnt':
                if len(self.Nose_R_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_R_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_nasalis_transverse_nose_jnt':
                if len(self.Nose_R_nasalis_transverse_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_R_nasalis_transverse_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_procerus_nose_jnt':
                if len(self.Nose_R_procerus_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_R_procerus_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_nasolabial_fold_nose_jnt':
                if len(self.Nose_R_nasolabial_fold_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_R_nasolabial_fold_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'nose_jnt':
                if len(self.Nose_Center_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_Center_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'lower_nose_jnt':
                if len(self.Nose_Lower_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_Lower_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'depressor_septi_nose_jnt':
                if len(self.Nose_depressor_septi_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Nose_depressor_septi_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_brow_jnt':
                if len(self.Brow_L_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_L_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_brow_02_jnt':
                if len(self.Brow_L_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_L_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_brow_03_jnt':
                if len(self.Brow_L_03_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_L_03_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_medial_fibers_brow_jnt':
                if len(self.Brow_L_medial_fibers_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_L_medial_fibers_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_lateral_fibers_brow_jnt':
                if len(self.Brow_L_lateral_fibers_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_L_lateral_fibers_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'L_procerus_brow_jnt':
                if len(self.Brow_L_procerus_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_L_procerus_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'center_brow_jnt':
                if len(self.Brow_Center_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_Center_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_brow_jnt':
                if len(self.Brow_R_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_R_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_brow_02_jnt':
                if len(self.Brow_R_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_R_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_brow_03_jnt':
                if len(self.Brow_R_03_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_R_03_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_medial_fibers_brow_jnt':
                if len(self.Brow_R_medial_fibers_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_R_medial_fibers_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_lateral_fibers_brow_jnt':
                if len(self.Brow_R_lateral_fibers_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_R_lateral_fibers_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'R_procerus_fibers_brow_jnt':
                if len(self.Brow_R_procerus_fibers_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_R_procerus_fibers_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'center_brow_jnt':
                if len(self.Brow_Center_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Brow_Center_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, 0, -0.3 * Scale_check, each, r=True)
            if each == 'Upper_teeth_jnt':
                if len(self.Oral_Upper_teeth_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.pointConstraint(self.UpperTeethMesh, each)
                    cmds.delete(each + '_pointConstraint1')
                    cmds.select(each)
            if each == 'Lower_teeth_jnt':
                if len(self.Oral_Lower_teeth_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.pointConstraint(self.LowerTeethMesh, each)
                    cmds.delete(each + '_pointConstraint1')
                    cmds.select(each)
            if each == 'Tongue_jnt':
                if len(self.Oral_Tongue_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Oral_Tongue_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, -0.3 * Scale_check, 0, each, r=True)
            if each == 'Tongue_02_jnt':
                if len(self.Oral_Tongue_02_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Oral_Tongue_02_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, -0.3 * Scale_check, 0, each, r=True)
            if each == 'Tongue_03_jnt':
                if len(self.Oral_Tongue_03_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.select(each, self.Oral_Tongue_03_Vetex[0], add=True)
                    sel = cmds.ls(sl=True)
                    position = cmds.xform(sel[1], q=True, ws=True, t=True)
                    cmds.xform(sel[0], ws=True, t=position)
                    cmds.select(each)
                    cmds.move(0, -0.3 * Scale_check, 0, each, r=True)
            if each == 'L_eye_ball_jnt':
                if len(self.EyeBall_L_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.pointConstraint(self.L_EyeballMesh, each)
                    cmds.delete(each + '_pointConstraint1')
                    cmds.select(each)
            if each == 'R_eye_ball_jnt':
                if len(self.EyeBall_R_Vetex) != 0:
                    cmds.select(cl=True)
                    cmds.pointConstraint(self.R_EyeballMesh, each)
                    cmds.delete(each + '_pointConstraint1')
                    cmds.select(each)
        return

    def head_joint_command(self, *args):
        sel = cmds.ls(sl=True)
        if len(sel) != 0:
            if len(sel) == 1:
                self.head_joint = sel[0]
                print('Head joint define complete')
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', 'キャラクターボディのヘッドジョイントの項目を1つ選択してください。')
                cmds.error('キャラクターボディのヘッドジョイントの項目を1つ選択してください。')
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'キャラクターボディのヘッドジョイントを選択してください')
            cmds.error('キャラクターボディのヘッドジョイントを選択してください')
        return

    def set_max_influence_command(self, *args):
        sel = cmds.ls(sl=True)
        for each in sel:
            each_skincluster = mel.eval('findRelatedSkinCluster ' + each)
            if len(each_skincluster) != 0:
                cmds.select(each)
                mel.eval('$MaxInfluence = ' + str(
                    self.ui.min_value_edit.value()) + ';' + 'string $Selection[] = `ls -sl`;' + 'string $Skin = `findRelatedSkinCluster $Selection[0]`;' + 'int $VertsCount[] = `polyEvaluate -v $Selection[0]`;' + 'int $i = 0;' + 'for(; $i < ($VertsCount[0] + 1); $i++)' + '{' + 'string $Vertex = $Selection[0] + ".vtx[" + $i + "]";' + 'float $Weights[] = `skinPercent -ignoreBelow 0.0001 -query -value $Skin $Vertex`;' + 'if(size($Weights) > $MaxInfluence)' + '{' + 'int $j;' + 'float $Max[]; for($j = 0; $j < size($Weights); $j++) $Max[$j] = 0.0;' + 'for($W in $Weights)' + '{' + 'int $k;' + 'for($j = size($Weights); $j >= 0 && $W > $Max[$j]; $j--); $j++;' + 'for($k = size($Weights); $k > $j; $k--)' + '{' + '$Max[$k] = $Max[$k - 1];' + '}' + '$Max[$k] = $W;' + '}' + 'float $PruneValue = $Max[$MaxInfluence] + 0.0001;\n' + 'skinPercent -pruneWeights $PruneValue $Skin $Vertex;' + '}' + '}')
                set_maxinflu = each_skincluster + '.maxInfluences'
                cmds.setAttr(set_maxinflu, self.ui.min_value_edit.value())
                cmds.select(each)
                mel.eval('removeUnusedInfluences')
                cmds.skinPercent(each_skincluster, each, pruneWeights=0.001)
                QtWidgets.QMessageBox.information(None, 'Information', '' + each + ' is set to ' + str(self.ui.min_value_edit.value()) + ' joints per vertex')
                print('' + each + ' is set to ' + str(self.ui.min_value_edit.value()) + ' joints per vertex')
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', '' + each + ' はスキンオブジェクトではありません。最大影響力を設定したいスキンメッシュを選択してください。')
                cmds.error('' + each + ' はスキンオブジェクトではありません。最大影響力を設定したいスキンメッシュを選択してください。')

        return

    # todo auto skin build start
    def skin_build_command(self, *args):
        cmds.select(cl=True)
        max_influence_value = self.ui.min_value_edit.value()
        if len(self.HeadMesh) != 0:
            Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
            if len(Head_SkinCluster) == 0:
                cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, self.HeadMesh, add=True)
                if max_influence_value < 3:
                    cmds.skinCluster(tsb=True, dr=4, mi=8, omi=True, rui=True)
                else:
                    cmds.skinCluster(tsb=True, dr=4, mi=max_influence_value, omi=True, rui=True)
        self.all_vertex_check()
        self.unlock_check()
        if self.ui.BrowTopolCheckBox.isChecked() is True and len(self.BrowLVetex) != 0 and len(self.BrowRVetex) != 0:
            self.lock_parts()
            if self.Skin_Brow_vetex_Check == 1 and self.Skin_Brow_vetex_UnLock == 1:
                self.brow_all_skin()
                self.ui.BrowTopolCheckBox.setChecked(False)
                if cmds.objExists('Eye_All_Ctrl_grp'):
                    self.ui.EyeTopolCheckBox.setEnabled(True)
                else:
                    self.ui.EyeTopolCheckBox.setChecked(False)
                    self.ui.EyeTopolCheckBox.setEnabled(False)
                    if cmds.objExists('Nose_All_Ctrl_grp'):
                        self.ui.NoseTopolCheckBox.setEnabled(True)
                    else:
                        self.ui.NoseTopolCheckBox.setChecked(False)
                        self.ui.NoseTopolCheckBox.setEnabled(False)
                        if cmds.objExists('Cheek_All_Ctrl_grp'):
                            self.ui.CheekTopolCheckBox.setEnabled(True)
                        else:
                            self.ui.CheekTopolCheckBox.setChecked(False)
                            self.ui.CheekTopolCheckBox.setEnabled(False)
                            if cmds.objExists('Lip_All_Ctrl_grp'):
                                if cmds.objExists('Lip_Master_Ctrl_grp'):
                                    self.ui.LipTopolCheckBox.setEnabled(True)
                                else:
                                    self.ui.LipTopolCheckBox.setChecked(False)
                                    self.ui.LipTopolCheckBox.setEnabled(False)
                                    self.ui.JawTopolCheckBox.setEnabled(True)
            elif self.Skin_Brow_vetex_Check == 0 and self.Skin_Brow_vetex_UnLock == 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Face ボタンをクリックし、キャラクター「Brow」のトポロジーセットを完成させてください。")
            elif self.Skin_Brow_vetex_Check == 1 and self.Skin_Brow_vetex_UnLock == 0:
                pass
        elif self.ui.BrowTopolCheckBox.isChecked() is True and len(self.BrowLVetex) == 0 and len(self.BrowRVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクター上でBrow Topologyを選択し、'L Boundary' または 'R Boundary' ボタンをチェックボックスにチェックが入るまでクリックしてください。")
        self.unlock_check()
        if self.ui.EyeTopolCheckBox.isChecked() is True and len(self.EyeLVetex) != 0 and len(self.EyeRVetex) != 0:
            self.lock_parts()
            if self.Skin_Eye_vetex_Check == 1 and self.Skin_Eye_vetex_UnLock == 1:
                self.eye_all_skin()
                self.ui.EyeTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setEnabled(False)
                if cmds.objExists('Nose_All_Ctrl_grp'):
                    self.ui.NoseTopolCheckBox.setEnabled(True)
                else:
                    self.ui.NoseTopolCheckBox.setChecked(False)
                    self.ui.NoseTopolCheckBox.setEnabled(False)
                    if cmds.objExists('Cheek_All_Ctrl_grp'):
                        self.ui.CheekTopolCheckBox.setEnabled(True)
                    else:
                        self.ui.CheekTopolCheckBox.setChecked(False)
                        self.ui.CheekTopolCheckBox.setEnabled(False)
                        if cmds.objExists('Lip_All_Ctrl_grp'):
                            if cmds.objExists('Lip_Master_Ctrl_grp'):
                                self.ui.LipTopolCheckBox.setEnabled(True)
                            else:
                                self.ui.LipTopolCheckBox.setChecked(False)
                                self.ui.LipTopolCheckBox.setEnabled(False)
                                self.ui.JawTopolCheckBox.setEnabled(True)
            elif self.Skin_Eye_vetex_Check == 0 and self.Skin_Eye_vetex_UnLock == 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクター「目」のトポロジーセットを完成させてください。")
            elif self.Skin_Eye_vetex_Check == 1 and self.Skin_Eye_vetex_UnLock == 0:
                pass
        elif self.ui.EyeTopolCheckBox.isChecked() is True and len(self.EyeLVetex) == 0 and len(self.EyeRVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクター上でBrow Topologyを選択し、'L Boundary' または 'R Boundary' ボタンをチェックボックスにチェックが入るまでクリックしてください。")
        self.unlock_check()
        if self.ui.NoseTopolCheckBox.isChecked() is True and len(self.NoseVetex) != 0:
            self.lock_parts()
            if self.Skin_Nose_vetex_Check == 1 and self.Skin_Nose_vetex_UnLock == 1:
                self.nose_all_skin()
                self.ui.NoseTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setEnabled(False)
                self.ui.EyeTopolCheckBox.setChecked(False)
                self.ui.EyeTopolCheckBox.setEnabled(False)
                if cmds.objExists('Cheek_All_Ctrl_grp'):
                    self.ui.CheekTopolCheckBox.setEnabled(True)
                else:
                    self.ui.CheekTopolCheckBox.setChecked(False)
                    self.ui.CheekTopolCheckBox.setEnabled(False)
                    if cmds.objExists('Lip_All_Ctrl_grp'):
                        if cmds.objExists('Lip_Master_Ctrl_grp'):
                            self.ui.LipTopolCheckBox.setEnabled(True)
                        else:
                            self.ui.LipTopolCheckBox.setChecked(False)
                            self.ui.LipTopolCheckBox.setEnabled(False)
                            self.ui.JawTopolCheckBox.setEnabled(True)
            elif self.Skin_Nose_vetex_Check == 0 and self.Skin_Nose_vetex_UnLock == 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクター「鼻」のトポロジーセットを完成させてください。")
            elif self.Skin_Nose_vetex_Check == 1 and self.Skin_Nose_vetex_UnLock == 0:
                pass
        elif self.ui.NoseTopolCheckBox.isChecked() is True and len(self.NoseVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクターの鼻のトポロジーを選択し、チェックボックスにチェックが入るまで「Boundary」ボタンをクリックしてください。")
        self.unlock_check()
        if self.ui.CheekTopolCheckBox.isChecked() is True and len(self.CheekLVetex) != 0 and len(self.CheekRVetex) != 0:
            self.lock_parts()
            if self.Skin_Cheek_vetex_Check == 1 and self.Skin_Cheek_vetex_UnLock == 1:
                self.cheek_all_skin()
                self.ui.CheekTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setEnabled(False)
                self.ui.EyeTopolCheckBox.setChecked(False)
                self.ui.EyeTopolCheckBox.setEnabled(False)
                self.ui.NoseTopolCheckBox.setChecked(False)
                self.ui.NoseTopolCheckBox.setEnabled(False)
                if cmds.objExists('Lip_All_Ctrl_grp'):
                    if cmds.objExists('Lip_Master_Ctrl_grp'):
                        self.ui.LipTopolCheckBox.setEnabled(True)
                    else:
                        self.ui.LipTopolCheckBox.setChecked(False)
                        self.ui.LipTopolCheckBox.setEnabled(False)
                        self.ui.JawTopolCheckBox.setEnabled(True)
            elif self.Skin_Cheek_vetex_Check == 0 and self.Skin_Cheek_vetex_UnLock == 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクター「Cheek」のトポロジーセットを完成させてください。")
            elif self.Skin_Cheek_vetex_Check == 1 and self.Skin_Cheek_vetex_UnLock == 0:
                pass
        elif self.ui.CheekTopolCheckBox.isChecked() is True and len(self.CheekLVetex) == 0 and len(self.CheekRVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクターのチークトポロジーを選択し、チェックボックスにチェックが入るまで「Lバウンダリー」または「Rバウンダリー」ボタンをクリックしてください。")
        self.unlock_check()
        if self.ui.LipTopolCheckBox.isChecked() is True and len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            self.lock_parts()
            if self.Skin_Lip_vetex_Check == 1 and self.Skin_Lip_vetex_UnLock == 1:
                self.lip_all_skin()
                self.ui.LipTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setEnabled(False)
                self.ui.EyeTopolCheckBox.setChecked(False)
                self.ui.EyeTopolCheckBox.setEnabled(False)
                self.ui.NoseTopolCheckBox.setChecked(False)
                self.ui.NoseTopolCheckBox.setEnabled(False)
                self.ui.CheekTopolCheckBox.setChecked(False)
                self.ui.CheekTopolCheckBox.setEnabled(False)
                if cmds.objExists('Jaw_Master_Ctrl_grp'):
                    self.ui.JawTopolCheckBox.setEnabled(True)
                else:
                    self.ui.JawTopolCheckBox.setChecked(False)
                    self.ui.JawTopolCheckBox.setEnabled(False)
            elif self.Skin_Lip_vetex_Check == 0 and self.Skin_Lip_vetex_UnLock == 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクター「Lip」のトポロジーセットを完成させてください。")
            elif self.Skin_Lip_vetex_Check == 1 and self.Skin_Lip_vetex_UnLock == 0:
                pass
        elif self.ui.LipTopolCheckBox.isChecked() is True and len(self.LipUpVetex) == 0 and len(self.LipDownVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクターのリップトポロジーを選択し、チェックボックスにチェックが入るまで「LipUp」または「LipDown」ボタンをクリックしてください。")
        self.unlock_check()
        if self.ui.JawTopolCheckBox.isChecked() is True and len(self.JawVetex) != 0 and len(self.LipUpVetex) != 0 and len(self.LipDownVetex) != 0:
            self.lock_parts()
            if self.Skin_Jaw_vetex_Check == 1 and self.Skin_Jaw_vetex_UnLock == 1:
                self.jaw_all_skin()
                self.ui.JawTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setChecked(False)
                self.ui.BrowTopolCheckBox.setEnabled(False)
                self.ui.EyeTopolCheckBox.setChecked(False)
                self.ui.EyeTopolCheckBox.setEnabled(False)
                self.ui.NoseTopolCheckBox.setChecked(False)
                self.ui.NoseTopolCheckBox.setEnabled(False)
                self.ui.CheekTopolCheckBox.setChecked(False)
                self.ui.CheekTopolCheckBox.setEnabled(False)
                self.ui.LipTopolCheckBox.setChecked(False)
                self.ui.LipTopolCheckBox.setEnabled(False)
            elif self.Skin_Jaw_vetex_Check == 0 and self.Skin_Jaw_vetex_UnLock == 1:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクター「Jaw」のトポロジーセットを完成させてください。")
            elif self.Skin_Jaw_vetex_Check == 1 and self.Skin_Jaw_vetex_UnLock == 0:
                pass
        elif self.ui.JawTopolCheckBox.isChecked() is True and len(self.JawVetex) == 0 and len(self.LipUpVetex) == 0 and len(self.LipDownVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクターで顎の境界を選択し、チェックボックスにチェックが入るまで「boundary」ボタンをクリックしてください。")
        elif self.ui.JawTopolCheckBox.isChecked() is True and len(self.JawVetex) != 0 and len(self.LipUpVetex) == 0 and len(self.LipDownVetex) == 0:
            QtWidgets.QMessageBox.warning(None, 'Warning', "キャラクターのリップトポロジーを選択し、チェックボックスにチェックが入るまで「LipUp」または「LipDown」ボタンをクリックしてください。 Jaw Skinningを行う場合は、以下のようになります。")
        if len(self.HeadMesh) != 0:
            Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
            Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)

        if len(self.Oral_Upper_teeth_Vetex) != 0:
            if self.Skin_Upper_teeth_vetex_Check == 1:
                self.upper_teeth_skin()
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクターの「上歯」のメッシュを定義してください。")
        if len(self.Oral_Lower_teeth_Vetex) != 0:
            if self.Skin_Lower_teeth_vetex_Check == 1:
                self.lower_teeth_skin()
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクターの「下の歯」メッシュを定義してください。")
        if len(self.Oral_Tongue_Vetex) != 0:
            if self.Skin_Tongue_vetex_Check == 1:
                self.tongue_skin()
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクター「Tongue」のメッシュを定義してください。")
        if len(self.EyeBall_L_Vetex) != 0:
            if self.Skin_EyeBall_L_vetex_Check == 1:
                self.eye_ball_left_skin()
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックして、キャラクターの「左眼球」メッシュを定義してください。")
        if len(self.EyeBall_R_Vetex) != 0:
            if self.Skin_EyeBall_R_vetex_Check == 1:
                self.eye_ball_right_skin()
            else:
                QtWidgets.QMessageBox.warning(None, 'Warning', "Define All Faceボタンをクリックし、キャラクターの「右目」メッシュを定義してください。")
        self.create_facial_mesh_group()
        return

    def symmetry_command(self, *args):
        self.create_symmetry_joint()
        self.non_symmetry_check = True

    def symmetry_joint(self):
        cmds.parent('FitScale_ctrl_grp', w=True)
        cmds.hide('FitScale_ctrl')
        self.ctrl_scale = (cmds.getAttr('FitScale_ctrl_grp.scaleX') + cmds.getAttr('FitScale_ctrl_grp.scaleY') + cmds.getAttr('FitScale_ctrl_grp.scaleZ')) / 3
        mel.eval('float $sX = `getAttr FitScale_ctrl_grp.scaleX`')
        mel.eval('float $sY = `getAttr FitScale_ctrl_grp.scaleY`')
        mel.eval('float $sZ = `getAttr FitScale_ctrl_grp.scaleZ`')
        mel.eval('float $sumXYZ = ($sX + $sY + $sZ)/3')
        A = cmds.getAttr('FitScale_ctrl_grp.scaleX')
        B = cmds.getAttr('FitScale_ctrl_grp.scaleY')
        C = cmds.getAttr('FitScale_ctrl_grp.scaleZ')
        cmds.group(em=True, n='scale_check_grp')
        cmds.setAttr('scale_check_grp.scaleX', A)
        cmds.setAttr('scale_check_grp.scaleY', B)
        cmds.setAttr('scale_check_grp.scaleZ', C)
        if cmds.objExists(JAW_MASTER_JOINT_NAME):
            cmds.setAttr('Jaw_master_jnt.tx', lock=False)
        cmds.makeIdentity('FitScale_ctrl_grp', apply=True, t=True, r=False, scale=True)
        if cmds.objExists(JAW_MASTER_JOINT_NAME):
            cmds.setAttr('Jaw_master_jnt.tx', lock=True)
        cmds.select('*_jnt')
        Joint_sel = cmds.ls(selection=True)
        for each in Joint_sel:
            new_radius = each + '.radius'
            cmds.setAttr(new_radius, self.jntRadius * self.ctrl_scale)

        if cmds.objExists('Sym_set'):
            cmds.group(em=True, n='Facial_jnt_Sym_grp_L')
            cmds.select('Sym_set')
            cmds.select('Facial_jnt_Sym_grp_L', add=True)
            cmds.parent()
            cmds.duplicate('Facial_jnt_Sym_grp_L', n='Facial_jnt_Sym_grp_R')
            cmds.setAttr('Facial_jnt_Sym_grp_R.scaleX', -1)
            cmds.makeIdentity('Facial_jnt_Sym_grp_R', apply=True, scale=True)
            cmds.select('Facial_jnt_Sym_grp_R', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')

    def brow_all_skin(self):
        Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
        HeadFullVertex = self.HeadMesh + '.vtx[*]'
        cmds.select(HeadFullVertex)
        HeadFullCount = len(cmds.ls(sl=True, fl=True))
        cmds.select(cl=True)
        Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        cmds.select('Skin_*brow*_jnt')
        Brow_sel = cmds.ls(sl=True)
        cmds.select(self.BrowLVetex)
        Brow_L_vertex_count = len(cmds.ls(sl=True, fl=True))
        cmds.select(self.BrowRVetex)
        Brow_R_vertex_count = len(cmds.ls(sl=True, fl=True))
        list_jnt = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        list_Brow_jnt_check = 0
        if len(list_jnt) != 1:
            for each in Brow_sel:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_Brow_jnt_check = 1

        if list_Brow_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=Brow_sel)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=Brow_sel)
        elif list_Brow_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=Brow_sel)

        for each in Brow_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 1)

        if cmds.objExists('Skin_L_brow_jnt'):
            cmds.setAttr('Skin_L_brow_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Brow_L_Vetex)
            if cmds.objExists('Skin_L_medial_fibers_brow_jnt') is False:
                for i in range(int(Brow_L_vertex_count / 60 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(Brow_L_vertex_count / 60)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            if cmds.objExists('Skin_L_medial_fibers_brow_jnt') is False:
                for i in range(int(Brow_L_vertex_count / 60 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(Brow_L_vertex_count / 60)):
                    mel.eval('GrowPolygonSelectionRegion')
            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            opvalue = 0.8
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.select(self.Brow_L_Vetex[0])
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_jnt', clear=1)
            mel.eval('GrowPolygonSelectionRegion')
            cmds.select(self.Brow_L_Vetex[0], d=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.5)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_jnt', clear=1)
            self.Temp = ''
            for i in range(int(Brow_L_vertex_count / 60 + 1)):
                if len(self.Temp) == 0:
                    self.Temp = self.Brow_L_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.5)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_jnt', clear=1)

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.7:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_brow_jnt.liw', 1)
        if cmds.objExists('Skin_L_medial_fibers_brow_jnt'):
            cmds.setAttr('Skin_L_medial_fibers_brow_jnt.liw', 1)
            cmds.setAttr('Skin_L_brow_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_L_medial_fibers_Vetex)
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_medial_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_medial_fibers_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_medial_fibers_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_medial_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_medial_fibers_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_medial_fibers_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_medial_fibers_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_brow_jnt.liw', 1)
        if cmds.objExists('Skin_L_lateral_fibers_brow_jnt'):
            cmds.setAttr('Skin_L_lateral_fibers_brow_jnt.liw', 1)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_L_lateral_fibers_Vetex)
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lateral_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lateral_fibers_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lateral_fibers_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lateral_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lateral_fibers_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lateral_fibers_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lateral_fibers_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_L_procerus_brow_jnt'):
            cmds.setAttr('Skin_L_procerus_brow_jnt.liw', 1)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_L_procerus_Vetex)
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_procerus_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_procerus_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_procerus_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_procerus_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_procerus_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_procerus_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_procerus_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_L_brow_02_jnt'):
            cmds.setAttr('Skin_L_brow_02_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.select(self.Brow_L_02_Vetex)
            for i in range(int(Brow_L_vertex_count / 60 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_brow_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_02_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_brow_02_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_brow_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_02_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.37:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_02_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_02_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_brow_02_jnt.liw', 1)
        if cmds.objExists('Skin_L_brow_03_jnt'):
            cmds.setAttr('Skin_L_brow_03_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_L_03_Vetex)
            for i in range(int(Brow_L_vertex_count / 60 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_brow_03_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_03_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_brow_03_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_brow_03_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_03_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.43:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_brow_03_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_brow_03_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_brow_03_jnt.liw', 1)
        if cmds.objExists('Skin_center_brow_jnt'):
            cmds.setAttr('Skin_center_brow_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_Center_Vetex)
            for i in range(int(Brow_L_vertex_count / 60 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_center_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_center_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_center_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_center_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_center_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.37:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_center_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_center_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
            cmds.setAttr('Skin_center_brow_jnt.liw', 0)

        for each in Brow_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 0)
        if cmds.objExists('Skin_L_brow_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_brow_jnt')
            mel.eval('artSkinInflListChanging Skin_Head_master_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_L_vertex_count / 60 + 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)
        for each in Brow_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 1)

        if cmds.objExists('Skin_R_brow_jnt'):
            cmds.setAttr('Skin_R_brow_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Brow_R_Vetex)
            if cmds.objExists('Skin_R_medial_fibers_brow_jnt') is False:
                for i in range(int(Brow_R_vertex_count / 60 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(Brow_R_vertex_count / 60)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            if cmds.objExists('Skin_R_medial_fibers_brow_jnt') is False:
                for i in range(int(Brow_R_vertex_count / 60 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(Brow_R_vertex_count / 60)):
                    mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            opvalue = 0.8
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.select(self.Brow_R_Vetex[0])
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_jnt', clear=1)
            mel.eval('GrowPolygonSelectionRegion')
            cmds.select(self.Brow_R_Vetex[0], d=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.5)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_jnt', clear=1)
            self.Temp = ''
            for i in range(int(Brow_R_vertex_count / 60 + 1)):
                if len(self.Temp) == 0:
                    self.Temp = self.Brow_R_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.5)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_jnt', clear=1)

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.7:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
            cmds.setAttr('Skin_R_brow_jnt.liw', 1)
        if cmds.objExists('Skin_R_medial_fibers_brow_jnt'):
            cmds.setAttr('Skin_R_medial_fibers_brow_jnt.liw', 1)
            cmds.setAttr('Skin_R_brow_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_R_medial_fibers_Vetex)
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_medial_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_medial_fibers_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_medial_fibers_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_medial_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_medial_fibers_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_medial_fibers_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_medial_fibers_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_brow_jnt.liw', 1)
        if cmds.objExists('Skin_R_lateral_fibers_brow_jnt'):
            cmds.setAttr('Skin_R_lateral_fibers_brow_jnt.liw', 1)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_R_lateral_fibers_Vetex)
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lateral_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lateral_fibers_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lateral_fibers_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lateral_fibers_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lateral_fibers_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lateral_fibers_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lateral_fibers_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
        if cmds.objExists('Skin_R_procerus_brow_jnt'):
            cmds.setAttr('Skin_R_procerus_brow_jnt.liw', 1)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_R_procerus_Vetex)
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_procerus_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_procerus_brow_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_procerus_brow_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_procerus_brow_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_procerus_brow_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_procerus_brow_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_procerus_brow_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
        if cmds.objExists('Skin_R_brow_02_jnt'):
            cmds.setAttr('Skin_R_brow_02_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.select(self.Brow_R_02_Vetex)
            for i in range(int(Brow_R_vertex_count / 60 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_brow_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_02_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_brow_02_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_brow_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_02_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.37:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_02_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_02_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_brow_02_jnt.liw', 1)
        if cmds.objExists('Skin_R_brow_03_jnt'):
            cmds.setAttr('Skin_R_brow_03_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Brow_R_03_Vetex)
            for i in range(int(Brow_R_vertex_count / 60 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_brow_03_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_03_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_brow_03_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_brow_03_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_R_vertex_count / 60)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_03_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.43:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_brow_03_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_brow_03_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
            cmds.setAttr('Skin_R_brow_03_jnt.liw', 1)

        for each in Brow_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 0)
        if cmds.objExists('Skin_R_brow_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_brow_jnt')
            mel.eval('artSkinInflListChanging '+ SKIN_HEAD_MASTER_JOINT_NAME +' 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Brow_R_vertex_count / 60 + 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)
        for each in Brow_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 1)

    def eye_all_skin(self):
        Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
        HeadFullVertex = self.HeadMesh + '.vtx[*]'
        cmds.select(HeadFullVertex)
        HeadFullCount = len(cmds.ls(sl=True, fl=True))
        Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        cmds.select('Skin_L*_eye_*_jnt')
        if cmds.objExists('Skin_L_eye_ball_jnt'):
            cmds.select('Skin_L_eye_ball_jnt', d=True)
        L_Eye_sel = cmds.ls(sl=True)
        cmds.select('Skin_R*_eye_*_jnt')
        if cmds.objExists('Skin_R_eye_ball_jnt'):
            cmds.select('Skin_R_eye_ball_jnt', d=True)
        R_Eye_sel = cmds.ls(sl=True)
        cmds.select(self.EyeLVetex)
        L_Eye_vertex_count = len(cmds.ls(sl=True, fl=True))
        cmds.select(self.EyeRVetex)
        R_Eye_vertex_count = len(cmds.ls(sl=True, fl=True))
        list_jnt = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        list_L_Eye_jnt_check = 0
        if len(list_jnt) != 1:
            for each in L_Eye_sel:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_L_Eye_jnt_check = 1

        if list_L_Eye_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=L_Eye_sel)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=L_Eye_sel)
        elif list_L_Eye_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=L_Eye_sel)
        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
        cmds.select(self.Eye_L_blink_Vetex)
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt') == False and cmds.objExists('Skin_L_eye_back_upper_jnt') == False:
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')
        else:
            for i in range(int(L_Eye_vertex_count / 200)):
                mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_L_eye_blink_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_blink_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_L_eye_blink_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt') == False and cmds.objExists('Skin_L_eye_back_upper_jnt') == False:
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')
        else:
            for i in range(int(L_Eye_vertex_count / 200)):
                mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_blink_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.65:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_blink_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        for i in range(int(L_Eye_vertex_count / 289 * 10 + 2)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_L_blink_Vetex)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_blink_jnt')

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.select(self.Eye_L_blink_Vetex)
        for i in range(int(L_Eye_vertex_count / 289 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        for i in range(int(L_Eye_vertex_count / 289 + 1)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)

        opvalue = 1
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
        opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
        cmds.select(self.Eye_L_blink_Vetex)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
        mel.eval('GrowPolygonSelectionRegion')
        cmds.select(self.Eye_L_blink_Vetex, d=True)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
        opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
        self.Temp = ''
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt') == False and cmds.objExists('Skin_L_eye_back_upper_jnt') == False:
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                if len(self.Temp) == 0:
                    self.Temp = self.Eye_L_blink_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)

        else:
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                if len(self.Temp) == 0:
                    self.Temp = self.Eye_L_blink_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
        cmds.select(self.Eye_L_blink_Vetex)
        mel.eval('GrowPolygonSelectionRegion')
        for i in range(int(L_Eye_vertex_count / 289 * 2 - 2)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)

        if cmds.objExists('Skin_L_eye_lower_jnt'):
            cmds.select(self.Eye_L_lower_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 * 2 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
        if cmds.objExists('Skin_L_eye_lower_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_L_lower_Vetex)
            if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt') == False and cmds.objExists('Skin_L_eye_back_lower_jnt') == False:
                for i in range(int(L_Eye_vertex_count / 289 + 3)):
                    mel.eval('GrowPolygonSelectionRegion')

            else:
                for i in range(int(L_Eye_vertex_count / 289 + 2)):
                    mel.eval('GrowPolygonSelectionRegion')
            mel.eval('artSkinInflListChanging Skin_L_eye_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_lower_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt') == False and cmds.objExists('Skin_L_eye_back_lower_jnt') == False:
                for i in range(int(L_Eye_vertex_count / 289 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(L_Eye_vertex_count / 289 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lower_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.65:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lower_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            opvalue = 1
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.select(self.Eye_L_lower_Vetex)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)
            mel.eval('GrowPolygonSelectionRegion')
            cmds.select(self.Eye_L_lower_Vetex, d=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.4)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)
            self.Temp = ''
            if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt') == False and cmds.objExists('Skin_L_eye_back_lower_jnt') == False:
                for i in range(int(L_Eye_vertex_count / 289 + 2)):
                    if len(self.Temp) == 0:
                        self.Temp = self.Eye_L_lower_Vetex[0]
                    minus = cmds.ls(sl=True)
                    cmds.select(minus)
                    mel.eval('GrowPolygonSelectionRegion')
                    cmds.select(minus, self.Temp, d=True)
                    self.Temp = minus
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.8)
                    opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)
            else:
                for i in range(int(L_Eye_vertex_count / 289 + 1)):
                    if len(self.Temp) == 0:
                        self.Temp = self.Eye_L_lower_Vetex[0]
                    minus = cmds.ls(sl=True)
                    cmds.select(minus)
                    mel.eval('GrowPolygonSelectionRegion')
                    cmds.select(minus, self.Temp, d=True)
                    self.Temp = minus
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.8)
                    opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(self.Eye_L_lower_Vetex)
            mel.eval('GrowPolygonSelectionRegion')
            for i in range(int(L_Eye_vertex_count / 289 * 2 - 1)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)

            cmds.select(self.Eye_L_blink_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 + 3)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lower_jnt', clear=1)
        if cmds.objExists('Skin_L_eye_lacrimal_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_L_lacrimal_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_eye_lacrimal_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lacrimal_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_lacrimal_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_lacrimal_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lacrimal_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.6:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lacrimal_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lacrimal_jnt',
                                                     query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt'):
            cmds.setAttr('Skin_L_eye_blink_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_L_lacrimal_upper_Vetex)
            for i in range(int(L_Eye_vertex_count / 289)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_L_blink_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_L_eye_lacrimal_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lacrimal_upper_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_lacrimal_upper_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_lacrimal_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lacrimal_upper_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lacrimal_upper_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lacrimal_upper_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_eye_blink_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt'):
            cmds.setAttr('Skin_L_eye_lower_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_L_lacrimal_lower_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_L_lower_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_L_eye_lacrimal_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lacrimal_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_lacrimal_lower_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_lacrimal_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lacrimal_lower_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_lacrimal_lower_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_lacrimal_lower_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_eye_lower_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_back_jnt'):
            cmds.setAttr('Skin_L_eye_back_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_L_back_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_eye_back_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_back_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_back_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_back_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_back_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.6:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_back_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_back_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_L_eye_back_upper_jnt'):
            cmds.setAttr('Skin_L_eye_blink_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_L_back_upper_Vetex)
            for i in range(int(L_Eye_vertex_count / 289)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_L_blink_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_L_eye_back_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_back_upper_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_back_upper_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_back_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_back_upper_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_back_upper_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_back_upper_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_eye_blink_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_back_lower_jnt'):
            cmds.setAttr('Skin_L_eye_lower_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_L_back_lower_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_L_lower_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_L_eye_back_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_back_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_back_lower_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_back_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_back_lower_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_back_lower_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_back_lower_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_eye_lower_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_double_jnt'):
            cmds.setAttr('Skin_L_eye_double_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Eye_L_double_Vetex)
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_eye_double_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_double_jnt', clear=1)
            cmds.select(self.EyeRVetex)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_double_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_eye_double_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_eye_double_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_double_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.45:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_double_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_eye_double_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_L_eye_lacrimal_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_lacrimal_upper_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_upper_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_lacrimal_lower_jnt'):
            cmds.setAttr('Skin_L_eye_lacrimal_lower_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_back_jnt'):
            cmds.setAttr('Skin_L_eye_back_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_back_upper_jnt'):
            cmds.setAttr('Skin_L_eye_back_upper_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_back_lower_jnt'):
            cmds.setAttr('Skin_L_eye_back_lower_jnt.liw', 1)
        if cmds.objExists('Skin_L_eye_double_jnt'):
            cmds.setAttr('Skin_L_eye_double_jnt.liw', 1)
        list_R_Eye_jnt_check = 0
        if len(list_jnt) != 1:
            for each in R_Eye_sel:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_R_Eye_jnt_check = 1

        if list_R_Eye_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=R_Eye_sel)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=R_Eye_sel)
        elif list_R_Eye_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=R_Eye_sel)
        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
        cmds.select(self.Eye_R_blink_Vetex)
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt') == False and cmds.objExists(
                'Skin_R_eye_back_upper_jnt') == False:
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')
        else:
            for i in range(int(R_Eye_vertex_count / 200)):
                mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_R_eye_blink_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_blink_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_R_eye_blink_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt') == False and cmds.objExists('Skin_R_eye_back_upper_jnt') == False:
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')
        else:
            for i in range(int(R_Eye_vertex_count / 200)):
                mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_blink_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.65:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_blink_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight

            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        for i in range(int(R_Eye_vertex_count / 289 * 10 + 2)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_R_blink_Vetex)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_blink_jnt')

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.select(self.Eye_R_blink_Vetex)
        for i in range(int(R_Eye_vertex_count / 289 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        for i in range(int(R_Eye_vertex_count / 289 + 1)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)

        opvalue = 1
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
        opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
        cmds.select(self.Eye_R_blink_Vetex)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_eye_blink_jnt', clear=1)
        mel.eval('GrowPolygonSelectionRegion')
        cmds.select(self.Eye_R_blink_Vetex, d=True)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
        opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)
        self.Temp = ''
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt') == False and cmds.objExists('Skin_R_eye_back_upper_jnt') == False:
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                if len(self.Temp) == 0:
                    self.Temp = self.Eye_R_blink_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)

        else:
            for i in range(int(R_Eye_vertex_count / 289 + 1)):
                if len(self.Temp) == 0:
                    self.Temp = self.Eye_R_blink_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
        cmds.select(self.Eye_R_blink_Vetex)
        mel.eval('GrowPolygonSelectionRegion')
        for i in range(int(R_Eye_vertex_count / 289 * 2 - 2)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)

        if cmds.objExists('Skin_R_eye_lower_jnt'):
            cmds.select(self.Eye_R_lower_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 * 2 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            for i in range(int(R_Eye_vertex_count / 289 * 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_blink_jnt', clear=1)

        if cmds.objExists('Skin_R_eye_lower_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_R_lower_Vetex)
            if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt') == False and cmds.objExists('Skin_R_eye_back_lower_jnt') == False:
                for i in range(int(L_Eye_vertex_count / 289 + 3)):
                    mel.eval('GrowPolygonSelectionRegion')

            else:
                for i in range(int(L_Eye_vertex_count / 289 + 2)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_eye_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_lower_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt') == False and cmds.objExists('Skin_R_eye_back_lower_jnt') == False:
                for i in range(int(R_Eye_vertex_count / 289 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            else:
                for i in range(int(R_Eye_vertex_count / 289 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lower_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.65:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lower_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            opvalue = 1
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.select(self.Eye_R_lower_Vetex)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)
            mel.eval('GrowPolygonSelectionRegion')
            cmds.select(self.Eye_R_lower_Vetex, d=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.4)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)
            self.Temp = ''
            if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt') == False and cmds.objExists('Skin_R_eye_back_lower_jnt') == False:
                for i in range(int(R_Eye_vertex_count / 289 + 2)):
                    if len(self.Temp) == 0:
                        self.Temp = self.Eye_R_lower_Vetex[0]
                    minus = cmds.ls(sl=True)
                    cmds.select(minus)
                    mel.eval('GrowPolygonSelectionRegion')
                    cmds.select(minus, self.Temp, d=True)
                    self.Temp = minus
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.8)
                    opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)

            else:
                for i in range(int(R_Eye_vertex_count / 289 + 1)):
                    if len(self.Temp) == 0:
                        self.Temp = self.Eye_R_lower_Vetex[0]
                    minus = cmds.ls(sl=True)
                    cmds.select(minus)
                    mel.eval('GrowPolygonSelectionRegion')
                    cmds.select(minus, self.Temp, d=True)
                    self.Temp = minus
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 1.8)
                    opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(self.Eye_R_lower_Vetex)
            mel.eval('GrowPolygonSelectionRegion')
            for i in range(int(R_Eye_vertex_count / 289 * 2 - 1)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)

            cmds.select(self.Eye_R_blink_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 + 3)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            for i in range(int(R_Eye_vertex_count / 289 * 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lower_jnt', clear=1)

        if cmds.objExists('Skin_R_eye_lacrimal_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_R_lacrimal_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_eye_lacrimal_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lacrimal_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_lacrimal_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_lacrimal_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lacrimal_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.6:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lacrimal_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lacrimal_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt'):
            cmds.setAttr('Skin_R_eye_blink_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_R_lacrimal_upper_Vetex)
            for i in range(int(R_Eye_vertex_count / 289)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_R_blink_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_R_eye_lacrimal_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lacrimal_upper_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_lacrimal_upper_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_lacrimal_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lacrimal_upper_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lacrimal_upper_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lacrimal_upper_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_eye_blink_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt'):
            cmds.setAttr('Skin_R_eye_lower_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_R_lacrimal_lower_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_R_lower_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_R_eye_lacrimal_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lacrimal_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_lacrimal_lower_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_lacrimal_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lacrimal_lower_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_lacrimal_lower_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_lacrimal_lower_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_eye_lower_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_back_jnt'):
            cmds.setAttr('Skin_R_eye_back_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.select(self.Eye_R_back_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_eye_back_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_back_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_back_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_back_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_back_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.6:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_back_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_back_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_R_eye_back_upper_jnt'):
            cmds.setAttr('Skin_R_eye_blink_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_R_back_upper_Vetex)
            for i in range(int(R_Eye_vertex_count / 289)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_R_blink_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_R_eye_back_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_back_upper_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_back_upper_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_back_upper_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_back_upper_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_back_upper_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_back_upper_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_eye_blink_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_back_lower_jnt'):
            cmds.setAttr('Skin_R_eye_lower_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Eye_R_back_lower_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            cmds.select(self.Eye_R_lower_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_R_eye_back_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_back_lower_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_back_lower_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_back_lower_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_back_lower_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_back_lower_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_back_lower_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_eye_lower_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_double_jnt'):
            cmds.setAttr('Skin_R_eye_double_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Eye_R_double_Vetex)
            for i in range(int(R_Eye_vertex_count / 289 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_eye_double_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_double_jnt', clear=1)
            cmds.select(self.EyeLVetex)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_double_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.3)
            cmds.select(cl=True)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_eye_double_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_eye_double_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Eye_vertex_count / 289 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_double_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.45:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_eye_double_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_eye_double_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

        if cmds.objExists('Skin_R_eye_lacrimal_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_lacrimal_upper_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_upper_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_lacrimal_lower_jnt'):
            cmds.setAttr('Skin_R_eye_lacrimal_lower_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_back_jnt'):
            cmds.setAttr('Skin_R_eye_back_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_back_upper_jnt'):
            cmds.setAttr('Skin_R_eye_back_upper_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_back_lower_jnt'):
            cmds.setAttr('Skin_R_eye_back_lower_jnt.liw', 1)
        if cmds.objExists('Skin_R_eye_double_jnt'):
            cmds.setAttr('Skin_R_eye_double_jnt.liw', 1)

    def nose_all_skin(self):
        Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
        HeadFullVertex = self.HeadMesh + '.vtx[*]'
        cmds.select(HeadFullVertex)
        HeadFullCount = len(cmds.ls(sl=True, fl=True))
        cmds.select(cl=True)
        Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        cmds.select('Skin_*nose_jnt')
        Nose_sel = cmds.ls(sl=True)
        cmds.select(self.NoseVetex)
        Nose_vertex_count = len(cmds.ls(sl=True, fl=True))
        list_jnt = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        list_Nose_jnt_check = 0
        if len(list_jnt) != 1:
            for each in Nose_sel:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_Nose_jnt_check = 1

        if list_Nose_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=Nose_sel)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=Nose_sel)
        elif list_Nose_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=Nose_sel)
        for each in Nose_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 0)

        if cmds.objExists('Skin_L_nose_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Nose_L_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.57:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_nose_jnt.liw', 1)
        if cmds.objExists('Skin_L_nasalis_transverse_nose_jnt'):
            cmds.setAttr('Skin_L_nose_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_L_nasalis_transverse_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_nasalis_transverse_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_nasalis_transverse_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_nasalis_transverse_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_nasalis_transverse_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_nasalis_transverse_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_nasalis_transverse_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_nasalis_transverse_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_nose_jnt.liw', 1)
        if cmds.objExists('Skin_L_procerus_nose_jnt'):
            cmds.setAttr('Skin_L_nose_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_L_procerus_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_procerus_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_procerus_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_procerus_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_procerus_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_procerus_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_procerus_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_procerus_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_nose_jnt.liw', 1)
        if cmds.objExists('Skin_L_nasolabial_fold_nose_jnt'):
            cmds.setAttr('Skin_L_nose_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_L_nasolabial_fold_Vetex)
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_nasolabial_fold_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_nasolabial_fold_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_nasolabial_fold_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_nasolabial_fold_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_nasolabial_fold_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_nasolabial_fold_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_nasolabial_fold_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_nose_jnt.liw', 1)
        if cmds.objExists('Skin_R_nose_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Nose_R_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.57:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_nose_jnt.liw', 1)
        if cmds.objExists('Skin_R_nasalis_transverse_nose_jnt'):
            cmds.setAttr('Skin_R_nose_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_R_nasalis_transverse_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_nasalis_transverse_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_nasalis_transverse_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_nasalis_transverse_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_nasalis_transverse_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_nasalis_transverse_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_nasalis_transverse_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_nasalis_transverse_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_nose_jnt.liw', 1)
        if cmds.objExists('Skin_R_procerus_nose_jnt'):
            cmds.setAttr('Skin_R_nose_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_R_procerus_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_procerus_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_procerus_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_procerus_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_procerus_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_procerus_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_procerus_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_procerus_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_nose_jnt.liw', 1)
        if cmds.objExists('Skin_R_nasolabial_fold_nose_jnt'):
            cmds.setAttr('Skin_R_nose_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_R_nasolabial_fold_Vetex)
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_nasolabial_fold_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_nasolabial_fold_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_nasolabial_fold_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_nasolabial_fold_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_nasolabial_fold_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_nasolabial_fold_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_nasolabial_fold_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_nose_jnt.liw', 1)
        if cmds.objExists('Skin_nose_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Nose_Center_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.57:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_nose_jnt.liw', 1)
        if cmds.objExists('Skin_lower_nose_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_Lower_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_lower_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_lower_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_lower_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_lower_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_lower_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.4:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_lower_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_lower_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight

                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            opvalue = 1.0
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.select(self.Nose_Lower_Vetex[0])
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_lower_nose_jnt', clear=1)
            mel.eval('GrowPolygonSelectionRegion')
            cmds.select(self.Nose_Lower_Vetex[0], d=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
            opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_lower_nose_jnt', clear=1)
            self.Temp = ''
            for i in range(int(Nose_vertex_count / 300 + 2)):
                if len(self.Temp) == 0:
                    self.Temp = self.Nose_Lower_Vetex[0]
                minus = cmds.ls(sl=True)
                cmds.select(minus)
                mel.eval('GrowPolygonSelectionRegion')
                cmds.select(minus, self.Temp, d=True)
                self.Temp = minus
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=opvalue / 2)
                opvalue = cmds.artAttrSkinPaintCtx(cmds.currentCtx(), q=True, op=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_lower_nose_jnt', clear=1)

        if cmds.objExists('Skin_depressor_septi_nose_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Nose_depressor_septi_Vetex)
            for i in range(int(Nose_vertex_count / 300 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_depressor_septi_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_depressor_septi_nose_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_depressor_septi_nose_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_depressor_septi_nose_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(Nose_vertex_count / 300)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_depressor_septi_nose_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.4:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_depressor_septi_nose_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_depressor_septi_nose_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

    def cheek_all_skin(self):
        Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
        HeadFullVertex = self.HeadMesh + '.vtx[*]'
        cmds.select(HeadFullVertex)
        HeadFullCount = len(cmds.ls(sl=True, fl=True))
        cmds.select('Skin*lip*jnt')
        if cmds.objExists('Skin_*_lower_liplid_jnt'):
            cmds.select('Skin_*_lower_liplid_jnt', d=True)
        LipAllselect = cmds.ls(sl=True)
        cmds.select(cl=True)
        Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        cmds.select('Skin_L*_cheek_jnt')
        if cmds.objExists('Skin_L_lower_liplid_jnt'):
            cmds.select('Skin_L_lower_liplid_jnt', add=True)
        L_Cheek_sel = cmds.ls(sl=True)
        cmds.select('Skin_R*_cheek_jnt')
        if cmds.objExists('Skin_R_lower_liplid_jnt'):
            cmds.select('Skin_R_lower_liplid_jnt', add=True)
        R_Cheek_sel = cmds.ls(sl=True)
        cmds.select(self.CheekLVetex)
        L_Cheek_vertex_count = len(cmds.ls(sl=True, fl=True))
        cmds.select(self.CheekRVetex)
        R_Cheek_vertex_count = len(cmds.ls(sl=True, fl=True))
        list_jnt = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        list_L_Cheek_jnt_check = 0
        if len(list_jnt) != 1:
            for each in L_Cheek_sel:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_L_Cheek_jnt_check = 1

        if list_L_Cheek_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=L_Cheek_sel)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=L_Cheek_sel)
        elif list_L_Cheek_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=L_Cheek_sel)
        for each in L_Cheek_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 1)

        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
        cmds.setAttr('Skin_L_cheek_jnt.liw', 0)
        cmds.select(self.Cheek_L_Vetex)
        for i in range(int(L_Cheek_vertex_count / 82 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_L_cheek_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_cheek_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_cheek_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_L_cheek_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(L_Cheek_vertex_count / 82 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_cheek_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.635:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_cheek_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_cheek_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight

            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.setAttr('Skin_L_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_L_upper_cheek_jnt'):
            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_L_eye_lower_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 0)

            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_L_nose_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 0)

            cmds.setAttr('Skin_L_upper_cheek_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Cheek_L_upper_Vetex)
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_upper_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_upper_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_upper_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_upper_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_upper_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.55:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_upper_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_upper_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_L_eye_lower_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 1)

            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_L_nose_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 1)

            cmds.setAttr('Skin_L_upper_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_L_outer_orbicularis_cheek_jnt'):
            cmds.setAttr('Skin_L_upper_cheek_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Cheek_L_outer_orbicularis_Vetex)
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_outer_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_outer_orbicularis_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_outer_orbicularis_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_outer_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_outer_orbicularis_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_outer_orbicularis_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_outer_orbicularis_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_upper_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_L_inner_orbicularis_cheek_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Cheek_L_inner_orbicularis_Vetex)
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_inner_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_inner_orbicularis_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_inner_orbicularis_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_inner_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_inner_orbicularis_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_inner_orbicularis_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_inner_orbicularis_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_outer_orbicularis_cheek_jnt') or cmds.objExists('Skin_L_inner_orbicularis_cheek_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.select('Skin_L_outer_orbicularis_cheek_jnt', 'Skin_L_inner_orbicularis_cheek_jnt')
            orbicularis_cheek_joint = cmds.ls(sl=True)
            for each in orbicularis_cheek_joint:
                cmds.skinCluster(Head_SkinCluster, edit=True, siv=each)
                for a in orbicularis_cheek_joint:
                    mel.eval('artSkinInflListChanging ' + a + ' 1')
                    mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                    mel.eval('mayaHasRenderSetup')
                    for i in range(int(L_Cheek_vertex_count / 82 + 2)):
                        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=a, clear=1)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lower_cheek_jnt'):
            cmds.setAttr('Skin_L_lower_cheek_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Cheek_L_lower_Vetex)
            for i in range(int(L_Cheek_vertex_count / 82 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lower_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lower_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lower_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lower_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lower_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.55:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lower_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lower_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_lower_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_L_lower_liplid_jnt'):
            cmds.setAttr('Skin_L_lower_liplid_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Cheek_L_lip_lid_Vetex)
            for i in range(int(L_Cheek_vertex_count / 82 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lower_liplid_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lower_liplid_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lower_liplid_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lower_liplid_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(L_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lower_liplid_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.45:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lower_liplid_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lower_liplid_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_L_lower_liplid_jnt.liw', 1)
        list_R_Cheek_jnt_check = 0
        if len(list_jnt) != 1:
            for each in R_Cheek_sel:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_R_Cheek_jnt_check = 1

        if list_R_Cheek_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=R_Cheek_sel)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=R_Cheek_sel)
        elif list_R_Cheek_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=R_Cheek_sel)
        for each in R_Cheek_sel:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 1)

        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
        cmds.setAttr('Skin_R_cheek_jnt.liw', 0)
        cmds.select(self.Cheek_R_Vetex)
        for i in range(int(R_Cheek_vertex_count / 82 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_R_cheek_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_cheek_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_cheek_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_R_cheek_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(R_Cheek_vertex_count / 82 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_cheek_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.635:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_cheek_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_cheek_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.setAttr('Skin_R_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_R_upper_cheek_jnt'):
            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_R_eye_lower_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 0)

            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_R_nose_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 0)

            cmds.setAttr('Skin_R_upper_cheek_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Cheek_R_upper_Vetex)
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_upper_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_upper_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_upper_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_upper_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_upper_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.55:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_upper_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_upper_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_R_eye_lower_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 1)
            if len(Skin_joint) != 0:
                for each in Skin_joint:
                    if each == 'Skin_R_nose_jnt':
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 1)
            cmds.setAttr('Skin_R_upper_cheek_jnt.liw', 1)

        if cmds.objExists('Skin_R_outer_orbicularis_cheek_jnt'):
            cmds.setAttr('Skin_R_upper_cheek_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Cheek_R_outer_orbicularis_Vetex)
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_outer_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_outer_orbicularis_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_outer_orbicularis_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_outer_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_outer_orbicularis_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_outer_orbicularis_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_outer_orbicularis_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_upper_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_R_inner_orbicularis_cheek_jnt'):
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Cheek_R_inner_orbicularis_Vetex)
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_inner_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_inner_orbicularis_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_inner_orbicularis_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_inner_orbicularis_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_inner_orbicularis_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.5:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_inner_orbicularis_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_inner_orbicularis_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_outer_orbicularis_cheek_jnt') or cmds.objExists('Skin_R_inner_orbicularis_cheek_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.select('Skin_R_outer_orbicularis_cheek_jnt', 'Skin_R_inner_orbicularis_cheek_jnt')
            orbicularis_cheek_joint = cmds.ls(sl=True)
            for each in orbicularis_cheek_joint:
                cmds.skinCluster(Head_SkinCluster, edit=True, siv=each)
                for a in orbicularis_cheek_joint:
                    mel.eval('artSkinInflListChanging ' + a + ' 1')
                    mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                    mel.eval('mayaHasRenderSetup')
                    for i in range(int(R_Cheek_vertex_count / 82 + 2)):
                        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=a, clear=1)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lower_cheek_jnt'):
            cmds.setAttr('Skin_R_lower_cheek_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
            cmds.select(self.Cheek_R_lower_Vetex)
            for i in range(int(R_Cheek_vertex_count / 82 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lower_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lower_cheek_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lower_cheek_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lower_cheek_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lower_cheek_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.55:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lower_cheek_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lower_cheek_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.setAttr('Skin_R_lower_cheek_jnt.liw', 1)
        if cmds.objExists('Skin_R_lower_liplid_jnt'):
            cmds.setAttr('Skin_R_lower_liplid_jnt.liw', 0)
            if cmds.currentCtx() != 'artAttrSkinContext':
                mel.eval('ArtPaintSkinWeightsTool;')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.Cheek_R_lip_lid_Vetex)
            for i in range(int(R_Cheek_vertex_count / 82 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lower_liplid_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lower_liplid_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lower_liplid_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lower_liplid_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(R_Cheek_vertex_count / 82 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lower_liplid_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.45:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lower_liplid_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lower_liplid_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)
            cmds.setAttr('Skin_R_lower_liplid_jnt.liw', 1)

    def lip_all_skin(self):
        Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
        HeadFullVertex = self.HeadMesh + '.vtx[*]'
        cmds.select(self.LipUpVetex)
        LipUp_vertex_count = len(cmds.ls(sl=True, fl=True))
        cmds.select(cl=True)
        cmds.select(self.LipDownVetex)
        LipDown_vertex_count = len(cmds.ls(sl=True, fl=True))
        cmds.select(cl=True)
        if cmds.objExists('Skin_L*_cheek_jnt'):
            cmds.select('Skin_L*_cheek_jnt')
            if cmds.objExists('Skin_L_lower_liplid_jnt'):
                cmds.select('Skin_L_lower_liplid_jnt', add=True)
            L_Cheek_sel = cmds.ls(sl=True)
        if cmds.objExists('Skin_R*_cheek_jnt'):
            cmds.select('Skin_R*_cheek_jnt')
            if cmds.objExists('Skin_R_lower_liplid_jnt'):
                cmds.select('Skin_R_lower_liplid_jnt', add=True)
            R_Cheek_sel = cmds.ls(sl=True)
        cmds.select(cl=True)
        Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        cmds.select('Skin*lip*jnt')
        if cmds.objExists('Skin_*_lower_liplid_jnt'):
            cmds.select('Skin_*_lower_liplid_jnt', d=True)
        LipAllselect = cmds.ls(sl=True)
        cmds.select('Skin*lip*jnt')
        if cmds.objExists('Skin*lower*jnt'):
            cmds.select('Skin*lower*jnt', d=True)
        if cmds.objExists('Skin_Lower_lip_jnt'):
            cmds.select('Skin_Lower_lip_jnt', d=True)
        if cmds.objExists('Skin_Lower_lip_outer_jnt'):
            cmds.select('Skin_Lower_lip_outer_jnt', d=True)
        UpperLipselect = cmds.ls(sl=True)
        cmds.select(cl=True)
        if cmds.objExists('Skin*lip*lower*jnt'):
            cmds.select('Skin*lip*lower*jnt')
        if cmds.objExists('Skin_Lower_lip_jnt'):
            cmds.select('Skin_Lower_lip_jnt', add=True)
        if cmds.objExists('Skin_Lower_lip_outer_jnt'):
            cmds.select('Skin_Lower_lip_outer_jnt', add=True)
        LowerLipselect = cmds.ls(sl=True)
        list_jnt = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        list_Lip_jnt_check = 0
        if len(list_jnt) != 1:
            for each in LipAllselect:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_Lip_jnt_check = 1

        if list_Lip_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=LipAllselect)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=LipAllselect)
        elif list_Lip_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=LipAllselect)
        for each in LipAllselect:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 0)

        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        if cmds.objExists('Skin_L_lip_lower_corner_jnt'):
            cmds.select(cl=True)
            cmds.select('Skin_L_lip_corner_jnt', 'Skin_L_lip_lower_corner_jnt', add=True)
        else:
            cmds.select(cl=True)
            cmds.select('Skin_L_lip_corner_jnt')
        L_lip_corner_jnt_sel = cmds.ls(sl=True)
        if cmds.objExists('Skin_R_lip_lower_corner_jnt'):
            cmds.select(cl=True)
            cmds.select('Skin_R_lip_corner_jnt', 'Skin_R_lip_lower_corner_jnt', add=True)
        else:
            cmds.select(cl=True)
            cmds.select('Skin_R_lip_corner_jnt')
        R_lip_corner_jnt_sel = cmds.ls(sl=True)
        for each in LipAllselect:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 0)

        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == 'Skin_lower_nose_jnt' or each == 'Skin_L_nose_jnt' or each == 'Skin_R_nose_jnt':
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
        cmds.select(self.LipCorner_L_Vetex)
        for i in range(int(LipUp_vertex_count / 399 + 2)):
            mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_L_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_corner_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_corner_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_L_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(LipDown_vertex_count / 315 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_corner_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.56:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_corner_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_corner_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight

            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_lower_corner_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.LipCorner_lower_L_Vetex)
            for i in range(int(LipUp_vertex_count / 399 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_corner_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_lower_corner_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_corner_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.535:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_corner_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_corner_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.7)
        cmds.select(self.LipCorner_R_Vetex)
        for i in range(int(LipUp_vertex_count / 399 + 2)):
            mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_R_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_corner_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_corner_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_R_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(LipDown_vertex_count / 315 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_corner_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.56:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_corner_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_corner_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_lower_corner_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.LipCorner_lower_R_Vetex)
            for i in range(int(LipUp_vertex_count / 399 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_corner_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_lower_corner_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_corner_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.535:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_corner_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_corner_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_upper_side_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_L_UpperSide_Vetex)
            if cmds.objExists('Skin_L_lip_upper_side_02_jnt') is False:
                for i in range(int(LipUp_vertex_count / 399 + 2)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(LipUp_vertex_count / 399 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_upper_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_side_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_upper_side_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_upper_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_upper_side_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_side_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_upper_side_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_upper_side_02_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_L_UpperSide_02_Vetex)
            for i in range(int(LipUp_vertex_count / 399 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_upper_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_side_02_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_upper_side_02_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_upper_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_upper_side_02_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_side_02_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_upper_side_02_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_upper_outer_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_L_UpperOuter_Vetex)
            for i in range(int(LipUp_vertex_count / 399 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_upper_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_outer_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_upper_outer_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_upper_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_upper_outer_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_outer_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_upper_outer_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_upper_side_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_R_UpperSide_Vetex)
            if cmds.objExists('Skin_R_lip_upper_side_02_jnt') is False:
                for i in range(int(LipUp_vertex_count / 399 + 2)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(LipUp_vertex_count / 399 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_upper_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_side_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_upper_side_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_upper_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_upper_side_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_side_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_upper_side_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_upper_side_02_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_R_UpperSide_02_Vetex)
            for i in range(int(LipUp_vertex_count / 399 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_upper_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_side_02_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_upper_side_02_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_upper_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_upper_side_02_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_side_02_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_upper_side_02_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_upper_outer_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_R_UpperOuter_Vetex)
            for i in range(int(LipUp_vertex_count / 399 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_upper_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_outer_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_upper_outer_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_upper_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_upper_outer_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_outer_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_upper_outer_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_lower_side_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_L_LowerSide_Vetex)
            if cmds.objExists('Skin_L_lip_lower_side_02_jnt') is False:
                for i in range(int(LipDown_vertex_count / 315 + 2)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(LipDown_vertex_count / 315 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_side_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_lower_side_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_side_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_side_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_side_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_lower_side_02_jnt'):
            cmds.setAttr('Skin_L_lip_lower_side_jnt.liw', 1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_L_LowerSide_02_Vetex)
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_side_02_jnt', clear=1)
            cmds.setAttr('Skin_L_lip_lower_side_jnt.liw', 0)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_lower_side_02_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_side_02_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_side_02_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_side_02_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_lower_outer_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_L_LowerOuter_Vetex)
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_lower_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_outer_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_lower_outer_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_outer_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_outer_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_outer_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_lower_side_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_R_LowerSide_Vetex)
            if cmds.objExists('Skin_R_lip_lower_side_02_jnt') is False:
                for i in range(int(LipDown_vertex_count / 315 + 2)):
                    mel.eval('GrowPolygonSelectionRegion')
            else:
                for i in range(int(LipDown_vertex_count / 315 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_side_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_lower_side_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_side_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_side_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_side_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_lower_side_02_jnt'):
            cmds.setAttr('Skin_R_lip_lower_side_jnt.liw', 1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_R_LowerSide_02_Vetex)
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_side_02_jnt', clear=1)
            cmds.setAttr('Skin_R_lip_lower_side_jnt.liw', 0)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_lower_side_02_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_02_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_side_02_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_side_02_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_side_02_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_lower_outer_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.Lip_R_LowerOuter_Vetex)
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_lower_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_outer_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_lower_outer_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_outer_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_outer_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_outer_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
        cmds.select(self.LipUpper_Vetex)
        if cmds.objExists('Skin_L_lip_upper_side_02_jnt') == False and cmds.objExists('Skin_R_lip_upper_side_02_jnt') == False:
            for i in range(int(LipUp_vertex_count / 399 + 2)):
                mel.eval('GrowPolygonSelectionRegion')
        else:
            for i in range(int(LipUp_vertex_count / 399 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_upper_lip_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_upper_lip_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_upper_lip_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_upper_lip_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(LipDown_vertex_count / 315 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_upper_lip_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.535:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_upper_lip_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_upper_lip_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
        cmds.select(self.LipLower_Vetex)
        if cmds.objExists('Skin_L_lip_lower_side_02_jnt') == False and cmds.objExists('Skin_R_lip_lower_side_02_jnt') == False:
            for i in range(int(LipDown_vertex_count / 315 + 2)):
                mel.eval('GrowPolygonSelectionRegion')
        else:
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_Lower_lip_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_Lower_lip_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_Lower_lip_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        mel.eval('artSkinInflListChanging Skin_Lower_lip_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(LipDown_vertex_count / 315 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_Lower_lip_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.535:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_Lower_lip_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_Lower_lip_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_Lower_lip_outer_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.6)
            cmds.select(self.LipLower_Outer_Vetex)
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_Lower_lip_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_Lower_lip_outer_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_Lower_lip_outer_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            mel.eval('artSkinInflListChanging Skin_Lower_lip_outer_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_Lower_lip_outer_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.535:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_Lower_lip_outer_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_Lower_lip_outer_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.15)
        for each in LipAllselect:
            cmds.skinCluster(Head_SkinCluster, edit=True, siv=each)
            for a in LipAllselect:
                mel.eval('artSkinInflListChanging ' + a + ' 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(LipUp_vertex_count / 399 * 2 + 1)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=a, clear=1)

        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
        cmds.select(self.LipCorner_L_Vetex)
        cmds.select(self.LipDownVetex, d=True)
        for i in range(int(LipUp_vertex_count / 399 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_L_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_corner_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_corner_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        cmds.select(self.LipDownVetex, d=True)
        mel.eval('artSkinInflListChanging Skin_L_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(LipDown_vertex_count / 315 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_corner_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.76:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_corner_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_corner_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
        cmds.select(self.LipDownVetex)
        cmds.select(self.LipCorner_L_Vetex, d=True)
        mel.eval('artSkinInflListChanging Skin_L_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_corner_jnt', clear=1)
        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_L_lip_lower_corner_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.LipCorner_lower_L_Vetex)
            cmds.select(self.LipUpVetex, d=True)
            for i in range(int(LipUp_vertex_count / 399 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_L_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_corner_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_lower_corner_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            cmds.select(self.LipUpVetex, d=True)
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_corner_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_corner_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_L_lip_lower_corner_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.select(self.LipUpVetex)
            cmds.select(self.LipCorner_lower_L_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_corner_jnt', clear=1)
            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
        cmds.select(self.LipCorner_R_Vetex)
        cmds.select(self.LipDownVetex, d=True)
        for i in range(int(LipUp_vertex_count / 399 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        mel.eval('artSkinInflListChanging Skin_R_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_corner_jnt', clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_corner_jnt')
        each_Siv = cmds.ls(sl=True)
        cmds.select(each_Siv)
        cmds.select(self.LipDownVetex, d=True)
        mel.eval('artSkinInflListChanging Skin_R_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(LipDown_vertex_count / 315 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        max_weight = 0
        for a in each_Siv:
            vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_corner_jnt', query=True)
            if vertex_weight >= max_weight:
                max_weight = vertex_weight

        max_count = 0
        while max_weight > 0.76:
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_corner_jnt', clear=1)
            max_weight_check = max_weight
            max_weight2 = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_corner_jnt', query=True)
                if vertex_weight >= max_weight2:
                    max_weight2 = vertex_weight
            max_weight = max_weight2
            if max_weight == max_weight_check:
                max_count = max_count + 1
            if max_count > 8:
                break
            print(max_weight)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
        cmds.select(self.LipDownVetex)
        cmds.select(self.LipCorner_R_Vetex, d=True)
        mel.eval('artSkinInflListChanging Skin_R_lip_corner_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_corner_jnt', clear=1)
        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        if cmds.objExists('Skin_R_lip_lower_corner_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.8)
            cmds.select(self.LipCorner_lower_R_Vetex)
            cmds.select(self.LipUpVetex, d=True)
            for i in range(int(LipUp_vertex_count / 399 + 2)):
                mel.eval('GrowPolygonSelectionRegion')

            mel.eval('artSkinInflListChanging Skin_R_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_corner_jnt', clear=1)
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_lower_corner_jnt')
            each_Siv = cmds.ls(sl=True)
            cmds.select(each_Siv)
            cmds.select(self.LipUpVetex, d=True)
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipDown_vertex_count / 315 + 1)):
                mel.eval('GrowPolygonSelectionRegion')

            max_weight = 0
            for a in each_Siv:
                vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_corner_jnt', query=True)
                if vertex_weight >= max_weight:
                    max_weight = vertex_weight

            max_count = 0
            while max_weight > 0.735:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_corner_jnt', clear=1)
                max_weight_check = max_weight
                max_weight2 = 0
                for a in each_Siv:
                    vertex_weight = cmds.skinPercent(Head_SkinCluster, a, transform='Skin_R_lip_lower_corner_jnt', query=True)
                    if vertex_weight >= max_weight2:
                        max_weight2 = vertex_weight
                max_weight = max_weight2
                if max_weight == max_weight_check:
                    max_count = max_count + 1
                if max_count > 8:
                    break
                print(max_weight)

            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
            cmds.select(self.LipUpVetex)
            cmds.select(self.LipCorner_lower_R_Vetex, d=True)
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_corner_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_corner_jnt', clear=1)
            cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        for each in L_lip_corner_jnt_sel:
            cmds.skinCluster(Head_SkinCluster, edit=True, siv=each)
            for a in L_lip_corner_jnt_sel:
                mel.eval('artSkinInflListChanging ' + a + ' 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(LipDown_vertex_count / 315 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=each, clear=1)

        for each in R_lip_corner_jnt_sel:
            cmds.skinCluster(Head_SkinCluster, edit=True, siv=each)
            for a in R_lip_corner_jnt_sel:
                mel.eval('artSkinInflListChanging ' + a + ' 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(LipDown_vertex_count / 315 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=each, clear=1)

        if cmds.objExists('Skin_L_lip_lower_side_02_jnt') and cmds.objExists('Skin_R_lip_lower_side_02_jnt'):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lip_lower_side_02_jnt')
            mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipUp_vertex_count / 399 * 2 + 1)):
                #cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=a, clear=1)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=i, clear=1)

            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lip_lower_side_02_jnt')
            mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipUp_vertex_count / 399 * 2 + 1)):
                #cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=a, clear=1)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=i, clear=1)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.25)
        for each in LipAllselect:
            cmds.skinCluster(Head_SkinCluster, edit=True, siv=each)
            mel.eval('artSkinInflListChanging Skin_Head_master_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(LipUp_vertex_count / 399 * 2 + 1)):
                #cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=a, clear=1)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=i, clear=1)

        cmds.skinPercent(Head_SkinCluster, self.HeadMesh, pruneWeights=0.01)
        for each in LipAllselect:
            each_liw = each + '.liw'
            cmds.setAttr(each_liw, 1)

        cmds.select(UpperLipselect)
        cmds.select('Skin_*_lip_corner_jnt', d=True)
        Upperline_sel = cmds.ls(sl=True)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
        for each in Upperline_sel:
            cmds.select(self.LipDownVetex)
            mel.eval('artSkinInflListChanging ' + each + ' 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=each, clear=1)

        if len(self.EyeLVetex) != 0 and len(self.EyeRVetex) != 0:
            for each in LipAllselect:
                cmds.select(self.EyeLVetex, self.EyeRVetex)
                mel.eval('artSkinInflListChanging ' + each + ' 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=each, clear=1)

    def jaw_all_skin(self):
        Head_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.HeadMesh)
        HeadFullVertex = self.HeadMesh + '.vtx[*]'
        cmds.select(HeadFullVertex)
        HeadFullCount = len(cmds.ls(sl=True, fl=True))
        Skin_joint = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        if cmds.objExists('Skin*lip*lower*jnt'):
            cmds.select('Skin*lip*lower*jnt')
            if cmds.objExists('Skin_Lower_lip_jnt'):
                cmds.select('Skin_Lower_lip_jnt', add=True)
            LowerLipselect = cmds.ls(sl=True)
        if cmds.objExists('Skin_L*_cheek_jnt'):
            cmds.select('Skin_L*_cheek_jnt')
            if cmds.objExists('Skin_L_lower_liplid_jnt'):
                cmds.select('Skin_L_lower_liplid_jnt', add=True)
            L_Cheek_sel = cmds.ls(sl=True)
        if cmds.objExists('Skin_R*_cheek_jnt'):
            cmds.select('Skin_R*_cheek_jnt')
            if cmds.objExists('Skin_R_lower_liplid_jnt'):
                cmds.select('Skin_R_lower_liplid_jnt', add=True)
            R_Cheek_sel = cmds.ls(sl=True)
        cmds.select(SKIN_JAW_MASTER_JOINT_NAME)
        jaw_jnt = cmds.ls(sl=True)
        list_jnt = cmds.skinCluster(Head_SkinCluster, q=True, inf=True)
        list_Jaw_jnt_check = 0
        if len(list_jnt) != 1:
            for each in jaw_jnt:
                for i in range(len(list_jnt)):
                    if list_jnt[i] == each:
                        list_Jaw_jnt_check = 1

        if list_Jaw_jnt_check == 1:
            cmds.skinCluster(Head_SkinCluster, e=True, ri=SKIN_JAW_MASTER_JOINT_NAME)
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=SKIN_JAW_MASTER_JOINT_NAME)
        elif list_Jaw_jnt_check == 0:
            cmds.skinCluster(Head_SkinCluster, edit=True, dr=0, ps=0, ns=0.1, lw=True, ai=SKIN_JAW_MASTER_JOINT_NAME)
        cmds.setAttr('Skin_Jaw_master_jnt.liw', 0)
        if cmds.currentCtx() != 'artAttrSkinContext':
            mel.eval('ArtPaintSkinWeightsTool;')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
        cmds.select(self.JawVetex)
        cmds.select(self.LipUpVetex, d=True)
        mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)
        cmds.select(self.JawVetex)
        Jaw_vertex_count = len(cmds.ls(sl=True, fl=True))
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
        cmds.skinCluster(Head_SkinCluster, edit=True, siv=SKIN_JAW_MASTER_JOINT_NAME)
        mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(Jaw_vertex_count / 786 * 4 + 4)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)

        cmds.skinCluster(Head_SkinCluster, edit=True, siv=SKIN_HEAD_MASTER_JOINT_NAME)
        mel.eval('artSkinInflListChanging Skin_Head_master_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        for i in range(int(HeadFullCount / 3744 * 2 + 2)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)

        if cmds.objExists('Skin_L_lip_corner_jnt'):
            if len(self.LipCorner_L_Vetex) != 0:
                cmds.select('Skin*lip*jnt')
                if cmds.objExists('Skin_*_lower_liplid_jnt'):
                    cmds.select('Skin_*_lower_liplid_jnt', d=True)
                LipAllselect = cmds.ls(sl=True)
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
                for each in LipAllselect:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)

                if cmds.objExists('Skin_L*_cheek_jnt'):
                    for each in L_Cheek_sel:
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 0)

                cmds.select(self.LipCorner_L_Vetex)
                for i in range(int(Jaw_vertex_count / 786 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

                mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(Jaw_vertex_count / 786 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)

                for each in LipAllselect:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

                if cmds.objExists('Skin_L*_cheek_jnt'):
                    for each in L_Cheek_sel:
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 1)

        if cmds.objExists('Skin_R_lip_corner_jnt'):
            if len(self.LipCorner_R_Vetex) != 0:
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
                for each in LipAllselect:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)

                if cmds.objExists('Skin_R*_cheek_jnt'):
                    for each in R_Cheek_sel:
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 0)

                cmds.select(self.LipCorner_R_Vetex)
                for i in range(int(Jaw_vertex_count / 786 + 1)):
                    mel.eval('GrowPolygonSelectionRegion')

                mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(Jaw_vertex_count / 786 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)

                for each in LipAllselect:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

                if cmds.objExists('Skin_R*_cheek_jnt'):
                    for each in R_Cheek_sel:
                        each_liw = each + '.liw'
                        cmds.setAttr(each_liw, 1)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=0.5)
        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)

        if cmds.objExists('Skin_L_lower_liplid_jnt'):
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_L_lower_liplid_jnt')
            mel.eval('artSkinInflListChanging Skin_Head_master_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)

            mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)

            if cmds.objExists('Skin_L_lip_corner_jnt'):
                mel.eval('artSkinInflListChanging Skin_L_lip_corner_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_corner_jnt', clear=1)

            if cmds.objExists('Skin_L_lip_lower_corner_jnt'):
                mel.eval('artSkinInflListChanging Skin_L_lip_lower_corner_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_corner_jnt', clear=1)

            if cmds.objExists('Skin_L_lip_upper_side_jnt'):
                mel.eval('artSkinInflListChanging Skin_L_lip_upper_side_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_side_jnt', clear=1)

            if cmds.objExists('Skin_L_lip_lower_side_jnt'):
                mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_side_jnt', clear=1)

            if cmds.objExists('Skin_L_lip_upper_side_02_jnt'):
                mel.eval('artSkinInflListChanging Skin_L_lip_upper_side_02_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_upper_side_02_jnt', clear=1)

            if cmds.objExists('Skin_L_lip_lower_side_02_jnt'):
                mel.eval('artSkinInflListChanging Skin_L_lip_lower_side_02_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_L_lip_lower_side_02_jnt', clear=1)

        if cmds.objExists('Skin_R_lower_liplid_jnt'):
            cmds.skinCluster(Head_SkinCluster, edit=True, siv='Skin_R_lower_liplid_jnt')
            mel.eval('artSkinInflListChanging Skin_Head_master_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_HEAD_MASTER_JOINT_NAME, clear=1)

            mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
            mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
            mel.eval('mayaHasRenderSetup')
            for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)

            if cmds.objExists('Skin_R_lip_corner_jnt'):
                mel.eval('artSkinInflListChanging Skin_R_lip_corner_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_corner_jnt', clear=1)

            if cmds.objExists('Skin_R_lip_lower_corner_jnt'):
                mel.eval('artSkinInflListChanging Skin_R_lip_lower_corner_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_corner_jnt', clear=1)

            if cmds.objExists('Skin_R_lip_upper_side_jnt'):
                mel.eval('artSkinInflListChanging Skin_R_lip_upper_side_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_side_jnt', clear=1)

            if cmds.objExists('Skin_R_lip_lower_side_jnt'):
                mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_side_jnt', clear=1)

            if cmds.objExists('Skin_R_lip_upper_side_02_jnt'):
                mel.eval('artSkinInflListChanging Skin_R_lip_upper_side_02_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_upper_side_02_jnt', clear=1)

            if cmds.objExists('Skin_R_lip_lower_side_02_jnt'):
                mel.eval('artSkinInflListChanging Skin_R_lip_lower_side_02_jnt 1')
                mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
                mel.eval('mayaHasRenderSetup')
                for i in range(int(HeadFullCount / 3744 * 2 + 2)):
                    cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf='Skin_R_lip_lower_side_02_jnt', clear=1)

        if len(Skin_joint) != 0:
            for each in Skin_joint:
                if each == SKIN_HEAD_MASTER_JOINT_NAME or each == SKIN_JAW_MASTER_JOINT_NAME:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 0)
                else:
                    each_liw = each + '.liw'
                    cmds.setAttr(each_liw, 1)

        if cmds.objExists('Skin*lip*lower*jnt'):
            for each in LowerLipselect:
                each_liw = each + '.liw'
                cmds.setAttr(each_liw, 0)

        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
        cmds.select(self.JawVetex[0])
        for i in range(int(Jaw_vertex_count / 786 * 2 + 2)):
            mel.eval('GrowPolygonSelectionRegion')

        # JAW_MASTER_JOINT_NAME
        mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='smooth')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=1, op=1)
        for i in range(int(Jaw_vertex_count / 786 + 2)):
            mel.eval('GrowPolygonSelectionRegion')
        for i in range(int(Jaw_vertex_count / 786 * 2 + 2)):
            cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)

        if cmds.objExists('Skin*lip*lower*jnt'):
            for each in LowerLipselect:
                each_liw = each + '.liw'
                cmds.setAttr(each_liw, 1)

        cmds.select(self.JawVetex)
        for i in range(int(Jaw_vertex_count / 786 + 1)):
            mel.eval('GrowPolygonSelectionRegion')

        jaw_part = cmds.ls(sl=True)
        cmds.select(HeadFullVertex)
        cmds.select(jaw_part, d=True)
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, selectedattroper='absolute')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=True, value=0, op=1)
        mel.eval('artSkinInflListChanging Skin_Jaw_master_jnt 1')
        mel.eval('artSkinInflListChanged artAttrSkinPaintCtx')
        mel.eval('mayaHasRenderSetup')
        cmds.artAttrSkinPaintCtx(cmds.currentCtx(), e=1, inf=SKIN_JAW_MASTER_JOINT_NAME, clear=1)
        cmds.select(cl=True)
        cmds.setAttr('Skin_Jaw_master_jnt.liw', 1)

    def upper_teeth_skin(self):
        if cmds.objExists('Skin_Upper_teeth_jnt'):
            UpperTeeth_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.UpperTeethMesh)
            if UpperTeeth_SkinCluster != '':
                cmds.skinCluster(UpperTeeth_SkinCluster, edit=True, unbind=True)
            cmds.select(cl=True)
            cmds.select('Skin_Upper_teeth_jnt', self.UpperTeethMesh, add=True)
            cmds.skinCluster(tsb=True, dr=4, mi=5, omi=True, rui=True)
        else:
            print("You don't have 'Skin_Upper_teeth_jnt'")

    def lower_teeth_skin(self):
        if cmds.objExists('Skin_Lower_teeth_jnt'):
            LowerTeeth_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.LowerTeethMesh)
            if LowerTeeth_SkinCluster != '':
                cmds.skinCluster(LowerTeeth_SkinCluster, edit=True, unbind=True)
            cmds.select(cl=True)
            cmds.select('Skin_Lower_teeth_jnt', self.LowerTeethMesh, add=True)
            cmds.skinCluster(tsb=True, dr=4, mi=5, omi=True, rui=True)
        else:
            print("You don't have 'Skin_Lower_teeth_jnt'")

    def tongue_skin(self):
        if cmds.objExists('Skin_Tongue_jnt'):
            Tongue_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.TongueMesh)
            if Tongue_SkinCluster != '':
                cmds.skinCluster(Tongue_SkinCluster, edit=True, unbind=True)
            cmds.select(cl=True)
            cmds.select('Skin_Tongue_*jnt', self.TongueMesh, add=True)
            cmds.skinCluster(tsb=True, dr=4, mi=5, omi=True, rui=True)
        else:
            print("You don't have 'Skin_Tongue_jnt'")

    def eye_ball_left_skin(self):
        if cmds.objExists('Skin_L_eye_ball_jnt'):
            L_Eyeball_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.L_EyeballMesh)
            if L_Eyeball_SkinCluster != '':
                cmds.skinCluster(L_Eyeball_SkinCluster, edit=True, unbind=True)
            cmds.select(cl=True)
            cmds.select('Skin_L_eye_ball_jnt', self.L_EyeballMesh, add=True)
            cmds.skinCluster(tsb=True, dr=4, mi=5, omi=True, rui=True)
        else:
            print("You don't have 'Skin_L_eye_ball_jnt'")

    def eye_ball_right_skin(self):
        if cmds.objExists('Skin_R_eye_ball_jnt'):
            R_Eyeball_SkinCluster = mel.eval('findRelatedSkinCluster ' + self.R_EyeballMesh)
            if R_Eyeball_SkinCluster != '':
                cmds.skinCluster(R_Eyeball_SkinCluster, edit=True, unbind=True)
            cmds.select(cl=True)
            cmds.select('Skin_R_eye_ball_jnt', self.R_EyeballMesh, add=True)
            cmds.skinCluster(tsb=True, dr=4, mi=5, omi=True, rui=True)
        else:
            print("You don't have 'Skin_R_eye_ball_jnt'")

    def create_joint(self):
        self.create_joint_check = True
        cmds.select(clear=True)
        if len(self.head_joint) != 0:
            cmds.duplicate(self.head_joint, po=True, n=HEAD_MASTER_JOINT_NAME)
            Parent_head = cmds.listRelatives(HEAD_MASTER_JOINT_NAME, p=True)
            if Parent_head is None:
                pass
            else:
                cmds.parent(HEAD_MASTER_JOINT_NAME, w=True)
            head_jnt_parent = cmds.listRelatives(HEAD_MASTER_JOINT_NAME, parent=True)
            if head_jnt_parent is not None:
                cmds.select(head_jnt_parent[0])
                cmds.makeIdentity(apply=True, t=True, r=False, s=True, pn=True)
                cmds.parent(HEAD_MASTER_JOINT_NAME, w=True)
                cmds.delete(head_jnt_parent[0])
            cmds.setAttr(HEAD_MASTER_JOINT_NAME + '.translateX', 0)
            cmds.setAttr(HEAD_MASTER_JOINT_NAME + '.translateY', 184.193)
            cmds.setAttr(HEAD_MASTER_JOINT_NAME + '.translateZ', 4.003)
        else:
            QtWidgets.QMessageBox.warning(None, 'Warning', 'Please Define your head joint!')
            cmds.error('Please Define your head joint!')

        cmds.setAttr(HEAD_MASTER_JOINT_NAME + '.type', 18)
        mel.eval('setAttr -type "string" ' + HEAD_MASTER_JOINT_NAME + '.otherType "Head"')
        if self.ui.BrowCheckBox.isChecked() is True:
            self.create_brow_joint()
        if self.ui.EyeCheckBox.isChecked() is True:
            self.create_eye_joint()
        if self.ui.EyeTargetCheckBox.isChecked() is True:
            self.create_eye_target_joint()
        if self.ui.NoseCheckBox.isChecked() is True:
            self.create_nose_joint()
        if self.ui.CheekCheckBox.isChecked() is True:
            self.create_cheek_joint()
        if self.ui.LipCheckBox.isChecked() is True:
            self.create_lip_joint()
        if self.ui.OralCavityCheckBox.isChecked() is True:
            self.create_oral_cavity_joint()
        self.ui.BrowCheckBox.setEnabled(False)
        self.ui.EyeCheckBox.setEnabled(False)
        self.ui.EyeTargetCheckBox.setEnabled(False)
        self.ui.NoseCheckBox.setEnabled(False)
        self.ui.CheekCheckBox.setEnabled(False)
        self.ui.LipCheckBox.setEnabled(False)
        self.ui.OralCavityCheckBox.setEnabled(False)
        self.ui.LipOption.setEnabled(False)
        self.ui.CheekOption.setEnabled(False)
        self.ui.NoseOption.setEnabled(False)
        self.ui.BrowOption.setEnabled(False)
        self.ui.EyeOption.setEnabled(False)
        self.ui.OralOption.setEnabled(False)
        if cmds.objExists('L_*_jnt'):
            cmds.select('L_*_jnt')
            L_sel = cmds.ls(selection=True)
            cmds.sets(L_sel, n='Sym_set')
        cmds.group('*_jnt', n='FitScale_ctrl_grp')
        spY = cmds.getAttr('FitScale_ctrl_grp.scalePivotY')
        spZ = cmds.getAttr('FitScale_ctrl_grp.scalePivotZ')
        cmds.select('FitScale_ctrl_grp')
        cmds.xform(piv=(0, spY, spZ))
        cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=10, n='FitScale_ctrl')
        cmds.pointConstraint('FitScale_ctrl_grp', 'FitScale_ctrl')
        cmds.delete('FitScale_ctrl_pointConstraint1')
        cmds.parent('FitScale_ctrl_grp', 'FitScale_ctrl')
        cmds.select('FitScale_ctrl')
        cmds.xform(cp=True)
        cmds.move(-2.46, 0, 0, 'FitScale_ctrl.cv[6]', r=True)
        cmds.move(2.46, 0, 0, 'FitScale_ctrl.cv[4]', r=True)
        cmds.move(0, 6, 0, 'FitScale_ctrl.cv[0:2]', r=True)
        cmds.setAttr('FitScale_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('FitScale_ctrlShape.overrideColor', 17)
        cmds.parent(HEAD_MASTER_JOINT_NAME, w=True)
        cmds.parentConstraint(HEAD_MASTER_JOINT_NAME, 'FitScale_ctrl', mo=True)
        cmds.pointConstraint(self.head_joint, HEAD_MASTER_JOINT_NAME)
        cmds.delete('FitScale_ctrl_parentConstraint1')
        cmds.delete(HEAD_MASTER_JOINT_NAME + '_pointConstraint1')
        cmds.parent(HEAD_MASTER_JOINT_NAME, 'FitScale_ctrl_grp')
        cmds.select(cl=True)
        cmds.select('FitScale_ctrl', self.head_joint, add=True)
        sel = cmds.ls(sl=True)
        position = cmds.xform(sel[1], q=True, ws=True, rp=True)
        cmds.xform(sel[0], ws=True, rp=position, piv=position)
        cmds.select(cl=True)
        cmds.select('FitScale_ctrl_grp', self.head_joint, add=True)
        sel = cmds.ls(sl=True)
        position = cmds.xform(sel[1], q=True, ws=True, rp=True)
        cmds.xform(sel[0], ws=True, rp=position, piv=position)
        return

    def create_brow_joint(self):
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_brow_jnt', p=(3.583, 192.301, 14.633), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_brow_02_jnt', p=(5.06, 192.24, 13.965), rad=self.jntRadius)
        elif 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_brow_jnt', p=(2.742, 192.301, 14.869), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_brow_02_jnt', p=(4.78, 192.24, 14.089), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_brow_03_jnt', p=(5.989, 192.025, 12.7), rad=self.jntRadius)
        if 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_medial_fibers_brow_jnt', p=(1.668, 193.743, 15.34), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lateral_fibers_brow_jnt', p=(4.926, 193.476, 13.856), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_procerus_brow_jnt', p=(0.795, 194.136, 15.415), rad=self.jntRadius)
        if 'Brow 04 joint' != self.ui.BrowOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='center_brow_jnt', p=(0, 192.205, 15.328), rad=self.jntRadius)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.setAttr('L_brow_jnt.type', 18)
            mel.eval('setAttr -type "string" L_brow_jnt.otherType "brow"')
            cmds.setAttr('L_brow_02_jnt.type', 18)
            mel.eval('setAttr -type "string" L_brow_02_jnt.otherType "brow_02"')
        if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.setAttr('L_brow_03_jnt.type', 18)
            mel.eval('setAttr -type "string" L_brow_03_jnt.otherType "brow_03"')
        if 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.setAttr('L_medial_fibers_brow_jnt.type', 18)
            mel.eval('setAttr -type "string" L_medial_fibers_brow_jnt.otherType "medial_fibers_brow"')
            cmds.setAttr('L_lateral_fibers_brow_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lateral_fibers_brow_jnt.otherType "lateral_fibers_brow"')
            cmds.setAttr('L_procerus_brow_jnt.type', 18)
            mel.eval('setAttr -type "string" L_procerus_brow_jnt.otherType "procerus_brow"')
        if 'Brow 04 joint' != self.ui.BrowOption.currentText():
            cmds.setAttr('center_brow_jnt.type', 18)
            mel.eval('setAttr -type "string" center_brow_jnt.otherType "center_brow"')

    def create_eye_joint(self):
        cmds.select(clear=True)
        cmds.joint(n='L_eye_blink_jnt', p=(3.588, 191.398, 13.91), rad=self.jntRadius)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_eye_lower_jnt', p=(3.588, 190.333, 13.627), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_eye_lacrimal_jnt', p=(1.85, 190.661, 13.438), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_eye_back_jnt', p=(5.435, 190.661, 12.415), rad=self.jntRadius)
        if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_eye_lacrimal_upper_jnt', p=(2.66, 191.228, 13.667), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_eye_back_upper_jnt', p=(4.664, 191.127, 13.484), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_eye_lacrimal_lower_jnt', p=(2.732, 190.446, 13.47), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_eye_back_lower_jnt', p=(4.604, 190.482, 13.12), rad=self.jntRadius)
        if 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_eye_double_jnt', p=(3.588, 191.53, 13.91), rad=self.jntRadius)
        cmds.setAttr('L_eye_blink_jnt.type', 18)
        mel.eval('setAttr -type "string" L_eye_blink_jnt.otherType "eye_blink"')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.setAttr('L_eye_lower_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_lower_jnt.otherType "eye_lower"')
            cmds.setAttr('L_eye_lacrimal_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_lacrimal_jnt.otherType "eye_lacrimal"')
            cmds.setAttr('L_eye_back_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_back_jnt.otherType "eye_back"')
        if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.setAttr('L_eye_lacrimal_upper_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_lacrimal_upper_jnt.otherType "eye_lacrimal_upper"')
            cmds.setAttr('L_eye_back_upper_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_back_upper_jnt.otherType "eye_back_upper"')
            cmds.setAttr('L_eye_lacrimal_lower_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_lacrimal_lower_jnt.otherType "eye_lacrimal_lower"')
            cmds.setAttr('L_eye_back_lower_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_back_lower_jnt.otherType "eye_back_lower"')
        if 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.setAttr('L_eye_double_jnt.type', 18)
            mel.eval('setAttr -type "string" L_eye_double_jnt.otherType "eye_double_eyelid"')

    def create_eye_target_joint(self):
        cmds.select(clear=True)
        cmds.joint(n='L_eye_ball_jnt', p=(3.36, 191.309, 11.512), rad=self.jntRadius)
        cmds.setAttr('L_eye_ball_jnt.type', 18)
        mel.eval('setAttr -type "string" L_eye_ball_jnt.otherType "eye_ball"')

    def create_nose_joint(self):
        if 'Nose 01 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='nose_jnt', p=(0, 187.174, 17.017), rad=self.jntRadius)
        if 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_nose_jnt', p=(1.85, 186.624, 14.877), rad=self.jntRadius)
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='lower_nose_jnt', p=(0, 185.099, 15.413), rad=self.jntRadius)
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_nasalis_transverse_nose_jnt', p=(1.237, 187.784, 15.388), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_procerus_nose_jnt', p=(0.874, 189.9, 15.152), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_nasolabial_fold_nose_jnt', p=(2.311, 186.023, 14.198), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='depressor_septi_nose_jnt', p=(0, 185.894, 15.849), rad=self.jntRadius)
        if 'Nose 01 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.setAttr('nose_jnt.type', 18)
            mel.eval('setAttr -type "string" nose_jnt.otherType "nose"')
        if 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.setAttr('L_nose_jnt.type', 18)
            mel.eval('setAttr -type "string" L_nose_jnt.otherType "L or R_nose"')
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.setAttr('lower_nose_jnt.type', 18)
            mel.eval('setAttr -type "string" lower_nose_jnt.otherType "lower_nose"')
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.setAttr('L_nasalis_transverse_nose_jnt.type', 18)
            mel.eval('setAttr -type "string" L_nasalis_transverse_nose_jnt.otherType "nasalis_transverse_nose"')
            cmds.setAttr('L_procerus_nose_jnt.type', 18)
            mel.eval('setAttr -type "string" L_procerus_nose_jnt.otherType "procerus_nose"')
            cmds.setAttr('L_nasolabial_fold_nose_jnt.type', 18)
            mel.eval('setAttr -type "string" L_nasolabial_fold_nose_jnt.otherType "nasolabial_fold_nose"')
            cmds.setAttr('depressor_septi_nose_jnt.type', 18)
            mel.eval('setAttr -type "string" depressor_septi_nose_jnt.otherType "depressor_septi_nose"')

    def create_cheek_joint(self):
        cmds.select(clear=True)
        cmds.joint(n='L_cheek_jnt', p=(3.876, 186.941, 13.504), rad=self.jntRadius)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_upper_cheek_jnt', p=(5.354, 189.007, 13.08), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lower_cheek_jnt', p=(5.239, 184.607, 12.067), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lower_liplid_jnt', p=(4.109, 182.226, 12.783), rad=self.jntRadius)
        if 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_inner_orbicularis_cheek_jnt', p=(2.564, 189.52, 13.515), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_outer_orbicularis_cheek_jnt', p=(4.773, 189.553, 13.257), rad=self.jntRadius)
        cmds.setAttr('L_cheek_jnt.type', 18)
        mel.eval('setAttr -type "string" L_cheek_jnt.otherType "cheek"')
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.setAttr('L_upper_cheek_jnt.type', 18)
            mel.eval('setAttr -type "string" L_upper_cheek_jnt.otherType "upper_cheek"')
            cmds.setAttr('L_lower_cheek_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lower_cheek_jnt.otherType "lower_cheek"')
            cmds.setAttr('L_lower_liplid_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lower_liplid_jnt.otherType "lower_liplid"')
        if 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.setAttr('L_outer_orbicularis_cheek_jnt.type', 18)
            mel.eval('setAttr -type "string" L_outer_orbicularis_cheek_jnt.otherType "outer_orbicularis_cheek"')
            cmds.setAttr('L_inner_orbicularis_cheek_jnt.type', 18)
            mel.eval('setAttr -type "string" L_inner_orbicularis_cheek_jnt.otherType "inner_orbicularis_cheek"')

    def create_lip_joint(self):
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='upper_lip_jnt', p=(0, 183.915, 15.479), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='Lower_lip_jnt', p=(0, 182.984, 15.111), rad=self.jntRadius)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.select(clear=True)
                cmds.joint(n='Lower_lip_outer_jnt', p=(0, 181.965, 14.977), rad=self.jntRadius)
        cmds.select(clear=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.joint(n='L_lip_upper_side_jnt', p=(1.596, 183.727, 14.935), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lip_lower_side_jnt', p=(1.596, 183.062, 14.935), rad=self.jntRadius)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.joint(n='L_lip_upper_side_jnt', p=(1.093, 183.774, 14.999), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lip_lower_side_jnt', p=(1.093, 183.072, 14.999), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lip_upper_side_02_jnt', p=(2.016, 183.606, 14.549), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lip_lower_side_02_jnt', p=(2.016, 183.164, 14.549), rad=self.jntRadius)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.select(clear=True)
                cmds.joint(n='L_lip_upper_outer_jnt', p=(1.997, 184.765, 14.643), rad=self.jntRadius)
                cmds.select(clear=True)
                cmds.joint(n='L_lip_lower_outer_jnt', p=(2.013, 182.121, 14.624), rad=self.jntRadius)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_lip_corner_jnt', p=(2.88, 183.375, 13.78), rad=self.jntRadius)
            cmds.select(clear=True)
            cmds.joint(n='L_lip_lower_corner_jnt', p=(2.88, 183.206, 13.78), rad=self.jntRadius)
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.select(clear=True)
            cmds.joint(n='L_lip_corner_jnt', p=(2.88, 183.375, 13.78), rad=self.jntRadius)
        cmds.select(clear=True)
        cmds.joint(n=JAW_MASTER_JOINT_NAME, p=(0, 184.615, 6.347), rad=self.jntRadius)
        cmds.setAttr('Jaw_master_jnt.tx', lock=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('upper_lip_jnt.type', 18)
            mel.eval('setAttr -type "string" upper_lip_jnt.otherType "upper_lip"')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('Lower_lip_jnt.type', 18)
            mel.eval('setAttr -type "string" Lower_lip_jnt.otherType "Lower_lip"')
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('L_lip_upper_side_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_upper_side_jnt.otherType "lip_upper_side"')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('L_lip_upper_side_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_upper_side_jnt.otherType "lip_upper_side"')
            cmds.setAttr('L_lip_upper_side_02_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_upper_side_02_jnt.otherType "lip_upper_side_02"')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('L_lip_corner_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_corner_jnt.otherType "lip_corner"')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('L_lip_lower_corner_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_lower_corner_jnt.otherType "lip_lower_corner"')
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('L_lip_lower_side_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_lower_side_jnt.otherType "lip_lower_side"')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('L_lip_lower_side_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_lower_side_jnt.otherType "lip_lower_side"')
            cmds.setAttr('L_lip_lower_side_02_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_lower_side_02_jnt.otherType "lip_lower_side_02"')
        if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.setAttr('Lower_lip_outer_jnt.type', 18)
            mel.eval('setAttr -type "string" Lower_lip_outer_jnt.otherType "Lower_lip_outer"')
            cmds.setAttr('L_lip_upper_outer_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_upper_outer_jnt.otherType "lip_upper_outer"')
            cmds.setAttr('L_lip_lower_outer_jnt.type', 18)
            mel.eval('setAttr -type "string" L_lip_lower_outer_jnt.otherType "lip_lower_outer"')
        cmds.setAttr('Jaw_master_jnt.type', 18)
        mel.eval('setAttr -type "string" Jaw_master_jnt.otherType "Jaw"')

    def create_oral_cavity_joint(self):
        cmds.select(clear=True)
        cmds.joint(n='Lower_teeth_jnt', p=(0, 183.021, 11.975), rad=self.jntRadius)
        cmds.select(clear=True)
        cmds.joint(n='Upper_teeth_jnt', p=(0, 184.728, 11.724), rad=self.jntRadius)
        cmds.select(clear=True)
        if 'Teeth & Tongue joint' == self.ui.OralOption.currentText():
            cmds.joint(n='Tongue_jnt', p=(0, 183.874, 10.178), rad=self.jntRadius)
        if 'Teeth & Tongue(3) joint' == self.ui.OralOption.currentText():
            cmds.joint(n='Tongue_jnt', p=(0, 183.874, 8.092), rad=self.jntRadius)
            cmds.joint(n='Tongue_02_jnt', p=(0, 184.117, 10.546), rad=self.jntRadius)
            cmds.joint(n='Tongue_03_jnt', p=(0, 183.722, 12.535), rad=self.jntRadius)
        cmds.setAttr('Lower_teeth_jnt.type', 18)
        mel.eval('setAttr -type "string" Lower_teeth_jnt.otherType "Lower_teeth"')
        cmds.setAttr('Upper_teeth_jnt.type', 18)
        mel.eval('setAttr -type "string" Upper_teeth_jnt.otherType "Upper_teeth"')
        if 'Teeth joint' != self.ui.OralOption.currentText():
            cmds.setAttr('Tongue_jnt.type', 18)
            mel.eval('setAttr -type "string" Tongue_jnt.otherType "Tongue"')
        if 'Teeth & Tongue(3) joint' == self.ui.OralOption.currentText():
            cmds.setAttr('Tongue_02_jnt.type', 18)
            mel.eval('setAttr -type "string" Tongue_02_jnt.otherType "Tongue_02"')
            cmds.setAttr('Tongue_03_jnt.type', 18)
            mel.eval('setAttr -type "string" Tongue_03_jnt.otherType "Tongue_03"')

    def label_check(self):
        Label_sel = cmds.ls(selection=True)
        for each in Label_sel:
            new_label = each + '.drawLabel'
            LabelCheck = cmds.getAttr(new_label)
            if LabelCheck == 0:
                cmds.setAttr(new_label, 1)
                print(each + ' visible is on')
            else:
                cmds.setAttr(new_label, 0)
                print(each + ' visible is off')

    def create_symmetry_joint(self):
        cmds.parent('FitScale_ctrl_grp', w=True)
        cmds.hide('FitScale_ctrl')
        self.ctrl_scale = (cmds.getAttr('FitScale_ctrl_grp.scaleX') + cmds.getAttr('FitScale_ctrl_grp.scaleY') + cmds.getAttr('FitScale_ctrl_grp.scaleZ')) / 3
        mel.eval('float $sX = `getAttr FitScale_ctrl_grp.scaleX`')
        mel.eval('float $sY = `getAttr FitScale_ctrl_grp.scaleY`')
        mel.eval('float $sZ = `getAttr FitScale_ctrl_grp.scaleZ`')
        mel.eval('float $sumXYZ = ($sX + $sY + $sZ)/3')
        A = cmds.getAttr('FitScale_ctrl_grp.scaleX')
        B = cmds.getAttr('FitScale_ctrl_grp.scaleY')
        C = cmds.getAttr('FitScale_ctrl_grp.scaleZ')
        cmds.group(em=True, n='scale_check_grp')
        cmds.setAttr('scale_check_grp.scaleX', A)
        cmds.setAttr('scale_check_grp.scaleY', B)
        cmds.setAttr('scale_check_grp.scaleZ', C)
        if cmds.objExists(JAW_MASTER_JOINT_NAME):
            cmds.setAttr('Jaw_master_jnt.tx', lock=False)
        cmds.makeIdentity('FitScale_ctrl_grp', apply=True, t=True, r=False, scale=True)
        if cmds.objExists(JAW_MASTER_JOINT_NAME):
            cmds.setAttr('Jaw_master_jnt.tx', lock=True)
        cmds.select('*_jnt')
        Joint_sel = cmds.ls(selection=True)
        for each in Joint_sel:
            new_radius = each + '.radius'
            cmds.setAttr(new_radius, self.jntRadius * self.ctrl_scale)

        if cmds.objExists('Sym_set'):
            cmds.group(em=True, n='Facial_jnt_Sym_grp_L')
            cmds.select('Sym_set')
            cmds.select('Facial_jnt_Sym_grp_L', add=True)
            cmds.parent()
            cmds.duplicate('Facial_jnt_Sym_grp_L', n='Facial_jnt_Sym_grp_R')
            cmds.setAttr('Facial_jnt_Sym_grp_R.scaleX', -1)
            cmds.makeIdentity('Facial_jnt_Sym_grp_R', apply=True, scale=True)
            cmds.select('Facial_jnt_Sym_grp_R', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')

    def create_controller(self):
        if self.non_symmetry_check is True:
            print('non_symmetry_check is true')
            self.create_rig_system()
            self.create_rig_skin()
            self.non_symmetry_check = False
        else:
            print('non_symmetry_check is false')
            self.create_symmetry_joint()
            self.create_rig_system()
            self.create_rig_skin()

    # todo parent constraint
    def create_rig_system(self):
        self.rig_check = True

        cmds.delete('FitScale_ctrl')
        cmds.select('*_jnt')
        Label_sel = cmds.ls(selection=True)
        for each in Label_sel:
            new_label = each + '.drawLabel'
            cmds.setAttr(new_label, 0)
            #print(each + ' visible is off')

        if cmds.objExists('Sym_set'):
            cmds.delete('Sym_set')
        cmds.select('FitScale_ctrl_grp', hi=True)
        cmds.select('FitScale_ctrl_grp', d=True)
        All_sel = cmds.ls(selection=True)
        # symmetryがあるか?
        if cmds.objExists('Facial_jnt_Sym_grp_L') and cmds.objExists('Facial_jnt_Sym_grp_R'):
            cmds.sets(All_sel, 'Facial_jnt_Sym_grp_L', 'Facial_jnt_Sym_grp_R', name='All_joint_set')
        else:
            cmds.sets(All_sel, name='All_joint_set')
        cmds.group(empty=True, name='Facial_System_joint_grp')
        cmds.select('All_joint_set')
        cmds.select('Facial_System_joint_grp', add=True)
        cmds.parent()
        Sel = cmds.select('All_joint_set', hi=True)
        selected_objects = cmds.ls(selection=True)
        newname = 'System_'
        for each in selected_objects:
            newItem = newname + each
            cmds.rename(each, '%s' % newItem)
            print('selected_joint => {}'.format(each))

        cmds.delete('All_joint_set')
        cmds.duplicate('Facial_System_joint_grp', n='Facial_Skin_joint_grp')
        cmds.select('Facial_Skin_joint_grp', hi=True)
        mel.eval('searchReplaceNames "System_" "Skin_" "hierarchy"')

        # jointが存在するか？
        if cmds.objExists('Skin_L_*_jnt') and cmds.objExists('Skin_R_*_jnt'):
            print('--------------------- joint_all_start ---------------------')
            cmds.select('Skin_R_*_jnt')
            cmds.select('Skin_L_*_jnt', add=True)
            joint_all = cmds.ls(selection=True)
            for each in joint_all:
                print(each)
            print('--------------------- joint_all_end -----------------------')
            cmds.parent(joint_all, 'Facial_Skin_joint_grp')
            cmds.delete('Skin_Facial_jnt_Sym_grp_L')
            cmds.delete('Skin_Facial_jnt_Sym_grp_R')
        cmds.softSelect(softSelectEnabled=0)
        cmds.symmetricModelling(symmetry=False)

        cmds.select('Skin_*_jnt')
        cmds.createDisplayLayer(n='Skin_jnt_layer')
        cmds.setAttr('Skin_jnt_layer.color', 14)
        cmds.select('System_*_jnt')
        cmds.createDisplayLayer(n='System_jnt_layer')
        cmds.setAttr('System_jnt_layer.color', 15)
        if cmds.objExists(SKIN_JAW_MASTER_JOINT_NAME):
            cmds.setAttr('Skin_Jaw_master_jnt.tx', lock=False)
        if self.ui.LipCheckBox.isChecked() is True:
            self.lip_all_system()
        if self.ui.CheekCheckBox.isChecked() is True and self.ui.LipCheckBox.isChecked() is True:
            self.cheek_all_system()
        if self.ui.NoseCheckBox.isChecked() is True:
            self.nose_all_system()
        if self.ui.NoseCheckBox.isChecked() is True and self.ui.LipCheckBox.isChecked() is True:
            if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                self.lip_nose_connect_system()
        if self.ui.NoseCheckBox.isChecked() is True and self.ui.CheekCheckBox.isChecked() is True:
            self.cheek_nose_connect_system()
        if self.ui.BrowCheckBox.isChecked() is True:
            self.brow_all_system()
        if self.ui.EyeCheckBox.isChecked() is True:
            self.eye_all_system()
        if self.ui.EyeCheckBox.isChecked() is True and self.ui.BrowCheckBox.isChecked() is True:
            if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
                self.brow_eye_connect_system()
        if self.ui.EyeTargetCheckBox.isChecked() is True:
            self.eye_target_system()
        if self.ui.EyeTargetCheckBox.isChecked() is True and self.ui.EyeCheckBox.isChecked() is True:
            self.eye_eye_target_connect_system()
        if self.ui.EyeCheckBox.isChecked() is True and self.ui.CheekCheckBox.isChecked() is True:
            if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
                self.cheek_eye_connect_system()
        if self.ui.OralCavityCheckBox.isChecked() is True:
            self.oral_cavity_system()
        self.facial_set_control()
        cmds.delete('FitScale_ctrl_grp')
        cmds.hide('Facial_System_joint_grp')
        cmds.group('Facial_System_joint_grp', 'Facial_Skin_joint_grp', '*_All_Ctrl_grp', 'scale_check_grp', n='Facial_Master_Ctrl_grp')
        cmds.parent('Facial_Set_Ctrl', 'Facial_Master_Ctrl_grp')
        if cmds.objExists('Eye_World_point_Loc_grp'):
            cmds.parent('Eye_World_point_Loc_grp', 'Facial_Master_Ctrl_grp')
        cmds.circle(nr=(0, 1, 0), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 12, n='Facial_Master_Ctrl')
        cmds.parent('Facial_Master_Ctrl', 'Facial_Master_Ctrl_grp')
        cmds.pointConstraint('System_Head_master_jnt', 'Facial_Master_Ctrl')
        cmds.delete('Facial_Master_Ctrl_pointConstraint1')
        cmds.makeIdentity('Facial_Master_Ctrl', apply=True, t=True, r=True, scale=True)
        cmds.parent('Facial_System_joint_grp', 'Facial_Skin_joint_grp', '*_All_Ctrl_grp', 'scale_check_grp', 'Facial_Set_Ctrl', 'Facial_Master_Ctrl')
        cmds.move(0 * self.ctrl_scale, -4 * self.ctrl_scale, 0 * self.ctrl_scale, 'Facial_Master_Ctrl.cv[0:7]', r=True)
        cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, -13 * self.ctrl_scale, 'Facial_Master_Ctrl.cv[4]', 'Facial_Master_Ctrl.cv[6]', r=True)
        cmds.setAttr('Facial_Master_CtrlShape.overrideEnabled', 1)
        cmds.setAttr('Facial_Master_CtrlShape.overrideColor', 17)
        self.for_game_high_group()
        self.create_facial_mesh_group()

    def create_facial_mesh_group(self):
        if cmds.objExists(FACIAL_MESH_GROUP_NAME):
            print('you already have => {}'.format(FACIAL_MESH_GROUP_NAME))
            child = cmds.listRelatives(FACIAL_MESH_GROUP_NAME, c=True)
            head = 0
            L_eyeball = 0
            R_eyeball = 0
            upper_teeth = 0
            lower_teeth = 0
            tongue = 0
            if child is not None:
                for each in child:
                    if each == self.HeadMesh:
                        head = 1
                    elif each == self.L_EyeballMesh:
                        L_eyeball = 1
                    elif each == self.R_EyeballMesh:
                        R_eyeball = 1
                    elif each == self.UpperTeethMesh:
                        upper_teeth = 1
                    elif each == self.LowerTeethMesh:
                        lower_teeth = 1
                    elif each == self.TongueMesh:
                        tongue = 1

                if head == 0:
                    if self.HeadMesh != '':
                        cmds.parent(self.HeadMesh, FACIAL_MESH_GROUP_NAME)
                if L_eyeball == 0:
                    if self.L_EyeballMesh != '':
                        if self.HeadMesh != self.L_EyeballMesh:
                            cmds.parent(self.L_EyeballMesh, FACIAL_MESH_GROUP_NAME)
                if R_eyeball == 0:
                    if self.R_EyeballMesh != '':
                        if self.HeadMesh != self.R_EyeballMesh and self.L_EyeballMesh != self.R_EyeballMesh:
                            cmds.parent(self.R_EyeballMesh, FACIAL_MESH_GROUP_NAME)
                if upper_teeth == 0:
                    if self.UpperTeethMesh != '':
                        if self.HeadMesh != self.UpperTeethMesh and self.L_EyeballMesh != self.UpperTeethMesh and self.R_EyeballMesh != self.UpperTeethMesh:
                            cmds.parent(self.UpperTeethMesh, FACIAL_MESH_GROUP_NAME)
                if lower_teeth == 0:
                    if self.LowerTeethMesh != '':
                        if self.HeadMesh != self.LowerTeethMesh and self.L_EyeballMesh != self.LowerTeethMesh and self.R_EyeballMesh != self.LowerTeethMesh and self.UpperTeethMesh != self.LowerTeethMesh:
                            cmds.parent(self.LowerTeethMesh, FACIAL_MESH_GROUP_NAME)
                if tongue == 0:
                    if self.TongueMesh != '':
                        if self.HeadMesh != self.TongueMesh and self.L_EyeballMesh != self.TongueMesh and self.R_EyeballMesh != self.TongueMesh and self.UpperTeethMesh != self.TongueMesh and self.LowerTeethMesh != self.TongueMesh:
                            cmds.parent(self.TongueMesh, FACIAL_MESH_GROUP_NAME)
        else:
            cmds.group(em=True, w=True, n=FACIAL_MESH_GROUP_NAME)
            if self.HeadMesh != '':
                cmds.parent(self.HeadMesh, FACIAL_MESH_GROUP_NAME)
            if self.L_EyeballMesh != '':
                if self.HeadMesh != self.L_EyeballMesh:
                    cmds.parent(self.L_EyeballMesh, FACIAL_MESH_GROUP_NAME)
            if self.R_EyeballMesh != '':
                if self.HeadMesh != self.R_EyeballMesh and self.L_EyeballMesh != self.R_EyeballMesh:
                    cmds.parent(self.R_EyeballMesh, FACIAL_MESH_GROUP_NAME)
            if self.UpperTeethMesh != '':
                if self.HeadMesh != self.UpperTeethMesh and self.L_EyeballMesh != self.UpperTeethMesh and self.R_EyeballMesh != self.UpperTeethMesh:
                    cmds.parent(self.UpperTeethMesh, FACIAL_MESH_GROUP_NAME)
            if self.LowerTeethMesh != '':
                if self.HeadMesh != self.LowerTeethMesh and self.L_EyeballMesh != self.LowerTeethMesh and self.R_EyeballMesh != self.LowerTeethMesh and self.UpperTeethMesh != self.LowerTeethMesh:
                    cmds.parent(self.LowerTeethMesh, FACIAL_MESH_GROUP_NAME)
            if self.TongueMesh != '':
                if self.HeadMesh != self.TongueMesh and self.L_EyeballMesh != self.TongueMesh and self.R_EyeballMesh != self.TongueMesh and self.UpperTeethMesh != self.TongueMesh and self.LowerTeethMesh != self.TongueMesh:
                    cmds.parent(self.TongueMesh, FACIAL_MESH_GROUP_NAME)
        return

    def rebuild_skin(self):
        if self.RebuildCheck == 1:
            selection = cmds.ls(sl=True)
            for each in selection:
                clusters = cmds.ls(type='skinCluster')
                for c in clusters:
                    mel.eval('skinCluster -e -moveJointsMode 1 ' + c)

                OG_Skin = mel.eval('findRelatedSkinCluster ' + each)
                max_inf = cmds.skinCluster(OG_Skin, q=True, mi=True)
                Skin_joint = cmds.skinCluster(OG_Skin, q=True, inf=True)
                cmds.duplicate(each, n='Facial_Mesh')
                cmds.select(cl=True)
                child = cmds.listRelatives('Rebuild_Skin_Head_master_jnt_Rebuild', c=True)
                for jnt in Skin_joint:
                    size = len(jnt)
                    rebuild_jnt = jnt[8:size - 8]
                    if cmds.objExists(rebuild_jnt) is False:
                        cmds.select(jnt, add=True)
                    for minus in child:
                        if jnt == minus:
                            cmds.select(jnt, d=True)

                if cmds.objExists('Root_Skin_Neck_Bone'):
                    cmds.select('Skin_*_jnt', 'Root_Skin_Neck_Bone', 'Facial_Mesh', add=True)
                else:
                    cmds.select('Skin_*_jnt', 'Facial_Mesh', add=True)
                cmds.skinCluster(tsb=True, dr=4, mi=max_inf, omi=True)
                New_Skin = mel.eval('findRelatedSkinCluster ' + 'Facial_Mesh')
                cmds.select(each)
                cmds.select('Skin_*_jnt')
                jnt_sel = cmds.ls(sl=True)
                for jnt in jnt_sel:
                    rebuild_jnt = 'Rebuild_' + jnt + '_Rebuild'
                    if cmds.objExists(rebuild_jnt):
                        cmds.pointConstraint(jnt, rebuild_jnt)
                        cmds.delete(rebuild_jnt + '_pointConstraint1')

                for c in clusters:
                    mel.eval('skinCluster -e -moveJointsMode 0 ' + c)
                cmds.copySkinWeights(ss=OG_Skin, ds=New_Skin, nm=True)
                Name = each
                cmds.delete(each)
                cmds.rename('Facial_Mesh', Name)
                cmds.select(Name)
                mel.eval('removeUnusedInfluences')
                cmds.rename(New_Skin, OG_Skin)
                new_clusters = cmds.ls(type='skinCluster')
            cmds.delete('Rebuild_Facial_Master_Ctrl_grp_Rebuild')

    def for_game_high_group(self):
        cmds.parent('Facial_Skin_joint_grp', 'Facial_Master_Ctrl_grp')
        cmds.select('Skin_*_jnt')
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, d=True)
        cmds.select(SKIN_HEAD_MASTER_JOINT_NAME, add=True)
        cmds.parent()

    def facial_set_control(self):
        cmds.curve(d=1, n='Facial_Set_Ctrl', p=[(-0.5, 0, 0), (0, 0, -0.5), (0.5, 0, 0), (0.3, 0, 0), (0, 0, -0.3), (-0.3, 0, 0), (-0.5, 0, 0)], k=(0, 1, 2, 3, 4, 5, 6))
        facial_set_ctrl_shape = cmds.listRelatives('Facial_Set_Ctrl', s=True)
        if facial_set_ctrl_shape[0] != 'Facial_Set_CtrlShape':
            cmds.rename(facial_set_ctrl_shape[0], 'Facial_Set_CtrlShape')
        cmds.setAttr('Facial_Set_Ctrl.rotateX', 90)
        cmds.select('Facial_Set_Ctrl')
        cmds.setAttr('Facial_Set_CtrlShape.overrideEnabled', 1)
        cmds.setAttr('Facial_Set_CtrlShape.overrideColor', 23)
        cmds.scale(6 * self.ctrl_scale, 6 * self.ctrl_scale, 6 * self.ctrl_scale, r=True)
        cmds.pointConstraint('System_Head_master_jnt', 'Facial_Set_Ctrl')
        cmds.delete('Facial_Set_Ctrl_pointConstraint1')
        cmds.makeIdentity('Facial_Set_Ctrl', apply=True, t=True, r=True, scale=True)
        cmds.select('Facial_Set_Ctrl')
        cmds.move(15 * self.ctrl_scale, 5 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
        cmds.makeIdentity('Facial_Set_Ctrl', apply=True, t=True, r=True, scale=True)
        cmds.setAttr('Facial_Set_Ctrl.tx', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.ty', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.tz', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.rx', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.ry', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.rz', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.sx', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.sy', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.sz', lock=True, keyable=False, channelBox=False)
        cmds.setAttr('Facial_Set_Ctrl.visibility', keyable=False, channelBox=True)
        if self.ui.LipCheckBox.isChecked() is True:
            if cmds.objExists('Facial_Set_Ctrl.Primary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Primary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Primary_Ctrl', 1, keyable=False, channelBox=True)
            if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_lip_ctrl', '*_lip_corner_Ctrl', 'Jaw_Master_Ctrl', add=True)
            else:
                cmds.select(cl=True)
                cmds.select('Jaw_Master_Ctrl')
            Ctrl_sel = cmds.ls(selection=True)
            for each in Ctrl_sel:
                cmds.select(each + 'Shape*')
                shape_sel = cmds.ls(sl=True)
                for a in shape_sel:
                    new_Set = a + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Primary_Ctrl', new_Set, f=True)

            if cmds.objExists('Facial_Set_Ctrl.Secondary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Secondary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Secondary_Ctrl', 0, keyable=False, channelBox=True)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_lip_*_side_ctrl')
                cmds.select('*_lip_corner_up_Ctrl', '*_lip_corner_down_Ctrl', add=True)
                if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                    cmds.select('*_lip_*_outer_ctrl', 'Lower_lip_outer_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    cmds.select(each + 'Shape*')
                    shape_sel = cmds.ls(sl=True)
                    for a in shape_sel:
                        new_Set = a + '.visibility'
                        cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_lip_corner_*_Ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            if cmds.objExists('Facial_Set_Ctrl.Master_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Master_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Master_Ctrl', 0, keyable=False, channelBox=True)
            if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_lip_Master_ctrl', 'Lip_Master_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Master_Ctrl', new_Set, f=True)

            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                if cmds.objExists('Facial_Set_Ctrl.FK_Ctrl'):
                    pass
                else:
                    cmds.addAttr('Facial_Set_Ctrl', ln='FK_Ctrl', at='bool')
                    cmds.setAttr('Facial_Set_Ctrl.FK_Ctrl', 0, keyable=False, channelBox=True)
                cmds.select(cl=True)
                cmds.select('*_lip_*_side*_FK_ctrl')
                cmds.select('*_lip_corner_up_FK_Ctrl', '*_lip_corner_down_FK_Ctrl', 'Upper_lip_FK_ctrl',
                            'Lower_lip_FK_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + 'Shape.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.FK_Ctrl', new_Set, f=True)

        if self.ui.CheekCheckBox.isChecked() is True and self.ui.LipCheckBox.isChecked() is True:
            cmds.select(cl=True)
            cmds.select('*_cheek_ctrl')
            if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
                cmds.select('*_upper_cheek_ctrl', '*_lower_cheek_ctrl', d=True)
            Ctrl_sel = cmds.ls(selection=True)
            for each in Ctrl_sel:
                new_Set = each + '.visibility'
                cmds.connectAttr('Facial_Set_Ctrl.Primary_Ctrl', new_Set, f=True)

            if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_upper_cheek_ctrl', '*_lower_liplid_ctrl', '*_lower_cheek_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            if 'Cheek 12 joint' == self.ui.CheekOption.currentText():
                if cmds.objExists('Facial_Set_Ctrl.FK_Ctrl'):
                    pass
                else:
                    cmds.addAttr('Facial_Set_Ctrl', ln='FK_Ctrl', at='bool')
                    cmds.setAttr('Facial_Set_Ctrl.FK_Ctrl', 0, keyable=False, channelBox=True)
                cmds.select(cl=True)
                cmds.select('*_*_orbicularis_cheek_FK_ctrl')
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + 'Shape.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.FK_Ctrl', new_Set, f=True)

        if self.ui.NoseCheckBox.isChecked() is True:
            if cmds.objExists('Facial_Set_Ctrl.Primary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Primary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Primary_Ctrl', 1, keyable=False, channelBox=True)
            if 'Nose 01 joint' == self.ui.NoseOption.currentText():
                cmds.select(cl=True)
                cmds.select('Nose_ctrl')
            elif 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_nose_ctrl')
                if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                    cmds.select('Lower_nose_ctrl', d=True)
            Ctrl_sel = cmds.ls(selection=True)
            for each in Ctrl_sel:
                new_Set = each + '.visibility'
                cmds.connectAttr('Facial_Set_Ctrl.Primary_Ctrl', new_Set, f=True)

            if cmds.objExists('Facial_Set_Ctrl.Secondary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Secondary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Secondary_Ctrl', 0, keyable=False, channelBox=True)
            if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.select(cl=True)
                cmds.select('Lower_nose_ctrl', 'Nose_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            if 'Nose 11 joint' == self.ui.NoseOption.currentText():
                if cmds.objExists('Facial_Set_Ctrl.FK_Ctrl'):
                    pass
                else:
                    cmds.addAttr('Facial_Set_Ctrl', ln='FK_Ctrl', at='bool')
                    cmds.setAttr('Facial_Set_Ctrl.FK_Ctrl', 0, keyable=False, channelBox=True)
                cmds.select(cl=True)
                cmds.select('*_nose_FK_ctrl')
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + 'Shape.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.FK_Ctrl', new_Set, f=True)

        if self.ui.BrowCheckBox.isChecked() is True:
            if cmds.objExists('Facial_Set_Ctrl.Primary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Primary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Primary_Ctrl', 1, keyable=False, channelBox=True)
            if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
                cmds.select(cl=True)
                cmds.select('L_brow_ctrl', 'R_brow_ctrl')
                cmds.select('*_brow_0*_ctrl', add=True)
                if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                    cmds.select(cl=True)
                    cmds.select('*_medial_fibers_brow_ctrl', '*_lateral_fibers_brow_ctrl')
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Primary_Ctrl', new_Set, f=True)

            if 'Brow 01 joint' == self.ui.BrowOption.currentText():
                cmds.select('Center_brow_ctrl')
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Primary_Ctrl', new_Set, f=True)

            if cmds.objExists('Facial_Set_Ctrl.Secondary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Secondary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Secondary_Ctrl', 0, keyable=False, channelBox=True)
            if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.select(cl=True)
                cmds.select('Center_brow_ctrl')
                if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                    cmds.select(cl=True)
                    cmds.select('L_brow_ctrl', 'R_brow_ctrl', 'Center_brow_ctrl')
                    cmds.select('*_brow_0*_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            if cmds.objExists('Facial_Set_Ctrl.Master_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Master_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Master_Ctrl', 0, keyable=False, channelBox=True)
            if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_brow_master_ctrl')
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Master_Ctrl', new_Set, f=True)

            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                if cmds.objExists('Facial_Set_Ctrl.FK_Ctrl'):
                    pass
                else:
                    cmds.addAttr('Facial_Set_Ctrl', ln='FK_Ctrl', at='bool')
                    cmds.setAttr('Facial_Set_Ctrl.FK_Ctrl', 0, keyable=False, channelBox=True)
                cmds.select(cl=True)
                cmds.select('*_procerus_brow_FK_ctrl')
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + 'Shape.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.FK_Ctrl', new_Set, f=True)

        if self.ui.EyeCheckBox.isChecked() is True:
            if cmds.objExists('Facial_Set_Ctrl.Primary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Primary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Primary_Ctrl', 1, keyable=False, channelBox=True)
            if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_eye_blink_ctrl', '*_eye_lower_ctrl', add=True)
            else:
                cmds.select(cl=True)
                cmds.select('*_eye_blink_ctrl')
            Ctrl_sel = cmds.ls(selection=True)
            for each in Ctrl_sel:
                new_Set = each + '.visibility'
                cmds.connectAttr('Facial_Set_Ctrl.Primary_Ctrl', new_Set, f=True)

            if cmds.objExists('Facial_Set_Ctrl.Secondary_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Secondary_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Secondary_Ctrl', 0, keyable=False, channelBox=True)
            if 'Eye 08 joint' == self.ui.EyeOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_eye_lacrimal_ctrl', '*_eye_back_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            elif 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
                cmds.select(cl=True)
                cmds.select('*_eye_lacrimal_ctrl', '*_eye_back_ctrl', '*_eye_double_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + '.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.Secondary_Ctrl', new_Set, f=True)

            if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
                if cmds.objExists('Facial_Set_Ctrl.FK_Ctrl'):
                    pass
                else:
                    cmds.addAttr('Facial_Set_Ctrl', ln='FK_Ctrl', at='bool')
                    cmds.setAttr('Facial_Set_Ctrl.FK_Ctrl', 0, keyable=False, channelBox=True)
                cmds.select(cl=True)
                cmds.select('*_eye_lacrimal_*_FK_ctrl')
                cmds.select('*_eye_back_*_FK_ctrl', add=True)
                Ctrl_sel = cmds.ls(selection=True)
                for each in Ctrl_sel:
                    new_Set = each + 'Shape.visibility'
                    cmds.connectAttr('Facial_Set_Ctrl.FK_Ctrl', new_Set, f=True)

        if self.ui.OralCavityCheckBox.isChecked() is True:
            if cmds.objExists('Facial_Set_Ctrl.Oral_Cavity_Ctrl'):
                pass
            else:
                cmds.addAttr('Facial_Set_Ctrl', ln='Oral_Cavity_Ctrl', at='bool')
                cmds.setAttr('Facial_Set_Ctrl.Oral_Cavity_Ctrl', 0, keyable=False, channelBox=True)
            cmds.select(cl=True)
            if 'Teeth joint' != self.ui.OralOption.currentText():
                cmds.select('*_teeth_ctrl', 'Tongue_*ctrl', add=True)
            else:
                cmds.select('*_teeth_ctrl')
            Ctrl_sel = cmds.ls(selection=True)
            for each in Ctrl_sel:
                new_Set = each + '.visibility'
                cmds.connectAttr('Facial_Set_Ctrl.Oral_Cavity_Ctrl', new_Set, f=True)

        cmds.addAttr('Facial_Set_Ctrl', ln='Joint_Visible', at='bool')
        cmds.setAttr('Facial_Set_Ctrl.Joint_Visible', 0, keyable=False, channelBox=True)
        cmds.select('Skin_*_jnt')
        jnt_sel = cmds.ls(selection=True)
        for each in jnt_sel:
            new_Set = each + '.visibility'
            cmds.connectAttr('Facial_Set_Ctrl.Joint_Visible', new_Set, f=True)

    def create_cube_control(self, color):
        cmds.polyCube(n='edg')
        cmds.select('edg.e[1]', 'edg.e[2]', 'edg.e[3]', 'edg.e[4]', 'edg.e[5]', 'edg.e[6]', 'edg.e[7]', 'edg.e[8]', 'edg.e[9]', 'edg.e[10]', 'edg.e[11]', 'edg.e[12]')
        cmds.polyToCurve(form=2, degree=1, conformToSmoothMeshPreview=1)
        cmds.select('edg.e[0]')
        cmds.polyToCurve(form=2, degree=1, conformToSmoothMeshPreview=1)
        cmds.select('edg.e[6]')
        cmds.polyToCurve(form=2, degree=1, conformToSmoothMeshPreview=1)
        cmds.select('edg.e[9]')
        cmds.polyToCurve(form=2, degree=1, conformToSmoothMeshPreview=1)
        cmds.select('polyToCurve1', 'polyToCurve2', 'polyToCurve3', 'polyToCurve4')
        cmds.DeleteHistory()
        cmds.select(cl=True)
        cmds.group(em=True, name='ctrl_shape_grp')
        cmds.select('polyToCurve1', 'polyToCurve2', 'polyToCurve3', 'polyToCurve4')
        cmds.select('polyToCurveShape1', 'polyToCurveShape2', 'polyToCurveShape3', 'polyToCurveShape4')
        cmds.select('ctrl_shape_grp', add=True)
        cmds.parent(r=True, s=True)
        cmds.delete('polyToCurve1', 'polyToCurve2', 'polyToCurve3', 'polyToCurve4', 'edg')
        cmds.rename('ctrl_shape_grp', 'Cube_Shape')
        cmds.rename('polyToCurveShape1', 'Cube_ShapeShape1')
        cmds.rename('polyToCurveShape2', 'Cube_ShapeShape2')
        cmds.rename('polyToCurveShape3', 'Cube_ShapeShape3')
        cmds.rename('polyToCurveShape4', 'Cube_ShapeShape4')
        cmds.select(clear=True)
        cmds.setAttr('Cube_ShapeShape1.overrideEnabled', 1)
        cmds.setAttr('Cube_ShapeShape1.overrideColor', color)
        cmds.setAttr('Cube_ShapeShape2.overrideEnabled', 1)
        cmds.setAttr('Cube_ShapeShape2.overrideColor', color)
        cmds.setAttr('Cube_ShapeShape3.overrideEnabled', 1)
        cmds.setAttr('Cube_ShapeShape3.overrideColor', color)
        cmds.setAttr('Cube_ShapeShape4.overrideEnabled', 1)
        cmds.setAttr('Cube_ShapeShape4.overrideColor', color)

    def lip_all_system(self):
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_lower_side_jnt', n='System_L_lip_lower_side_Jaw_follow_grp')
            cmds.group('System_R_lip_lower_side_jnt', n='System_R_lip_lower_side_Jaw_follow_grp')
            cmds.group('System_Lower_lip_jnt', n='System_Lower_lip_Jaw_follow_grp')
            cmds.parentConstraint('System_Jaw_master_jnt', 'System_Lower_lip_Jaw_follow_grp', mo=True)
            cmds.parentConstraint('System_Jaw_master_jnt', 'System_L_lip_lower_side_Jaw_follow_grp', mo=True)
            cmds.parentConstraint('System_Jaw_master_jnt', 'System_R_lip_lower_side_Jaw_follow_grp', mo=True)
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_Lower_lip_jnt', n='System_Lower_lip_Jaw_follow_grp')
            cmds.parentConstraint('System_Jaw_master_jnt', 'System_Lower_lip_Jaw_follow_grp', mo=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_lower_side_02_jnt', n='System_L_lip_lower_side_02_Jaw_follow_grp')
            cmds.group('System_R_lip_lower_side_02_jnt', n='System_R_lip_lower_side_02_Jaw_follow_grp')
            cmds.parentConstraint('System_Jaw_master_jnt', 'System_L_lip_lower_side_02_Jaw_follow_grp', mo=True)
            cmds.parentConstraint('System_Jaw_master_jnt', 'System_R_lip_lower_side_02_Jaw_follow_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_corner_jnt', 'System_L_lip_lower_corner_jnt', n='System_L_lip_up_down_corner_grp')
            cmds.group('System_R_lip_corner_jnt', 'System_R_lip_lower_corner_jnt', n='System_R_lip_up_down_corner_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_corner_jnt', n='System_L_lip_up_down_corner_grp')
            cmds.group('System_R_lip_corner_jnt', n='System_R_lip_up_down_corner_grp')
        cmds.group('System_Jaw_master_jnt', n='System_Jaw_master_jnt_grp')
        cmds.group('System_Jaw_master_jnt_grp', n='System_Jaw_master_follow_grp')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_up_down_corner_grp', n='System_L_lip_corner_follow_grp')
            cmds.parent('System_L_lip_up_down_corner_grp', 'System_Facial_jnt_Sym_grp_L')
            cmds.group('System_R_lip_up_down_corner_grp', n='System_R_lip_corner_follow_grp')
            cmds.parent('System_R_lip_up_down_corner_grp', 'System_Facial_jnt_Sym_grp_R')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_upper_side_jnt', n='System_L_lip_upper_side_follow_grp')
            cmds.group('System_upper_lip_jnt', n='System_L_upper_lip_follow_grp')
            cmds.group('System_upper_lip_jnt', n='System_R_upper_lip_follow_grp')
            cmds.group('System_R_lip_upper_side_jnt', n='System_R_lip_upper_side_follow_grp')
            cmds.group('System_L_lip_upper_side_follow_grp', n='System_L_lip_upper_corner_up_follow')
            cmds.group('System_R_lip_upper_side_follow_grp', n='System_R_lip_upper_corner_up_follow')
            cmds.group(em=True, n='L_lip_upper_corner_up_ctrl_grp')
            cmds.group(em=True, n='R_lip_upper_corner_up_ctrl_grp')
            cmds.group('System_L_lip_upper_corner_up_follow', n='System_L_lip_upper_corner_jaw_follow')
            cmds.group('System_R_lip_upper_corner_up_follow', n='System_R_lip_upper_corner_jaw_follow')
            cmds.group(em=True, n='Lip_upper_jaw_follow_ctrl_grp')
            cmds.group('System_L_lip_upper_corner_jaw_follow', n='L_upper_lip_master_follow_grp')
            cmds.group('System_R_lip_upper_corner_jaw_follow', n='R_upper_lip_master_follow_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_upper_lip_jnt', n='System_L_upper_lip_follow_grp')
            cmds.group('System_upper_lip_jnt', n='System_R_upper_lip_follow_grp')
            cmds.group(em=True, n='Lip_upper_jaw_follow_ctrl_grp')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_upper_side_02_jnt', n='System_L_lip_upper_side_02_follow_grp')
            cmds.group('System_R_lip_upper_side_02_jnt', n='System_R_lip_upper_side_02_follow_grp')
            cmds.group('System_L_lip_upper_side_02_follow_grp', n='System_L_lip_upper_02_corner_up_follow')
            cmds.group('System_R_lip_upper_side_02_follow_grp', n='System_R_lip_upper_02_corner_up_follow')
            cmds.group('System_L_lip_upper_02_corner_up_follow', n='System_L_lip_upper_02_corner_jaw_follow')
            cmds.group('System_R_lip_upper_02_corner_up_follow', n='System_R_lip_upper_02_corner_jaw_follow')
            cmds.group('System_L_lip_upper_02_corner_jaw_follow', n='L_upper_02_lip_master_follow_grp')
            cmds.group('System_R_lip_upper_02_corner_jaw_follow', n='R_upper_02_lip_master_follow_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_lower_side_jnt', n='System_L_lip_lower_side_follow_grp')
            cmds.group('System_Lower_lip_jnt', n='System_L_Lower_lip_follow_grp')
            cmds.group('System_Lower_lip_jnt', n='System_R_Lower_lip_follow_grp')
            cmds.group('System_R_lip_lower_side_jnt', n='System_R_lip_lower_side_follow_grp')
            cmds.group('System_L_lip_lower_side_follow_grp', n='System_L_lip_lower_corner_down_follow')
            cmds.group('System_R_lip_lower_side_follow_grp', n='System_R_lip_lower_corner_down_follow')
            cmds.group(em=True, n='L_lip_lower_corner_down_ctrl_grp')
            cmds.group(em=True, n='R_lip_lower_corner_down_ctrl_grp')
            cmds.group('System_L_lip_lower_corner_down_follow', n='L_lower_lip_master_follow_grp')
            cmds.group('System_R_lip_lower_corner_down_follow', n='R_lower_lip_master_follow_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_Lower_lip_jnt', n='System_L_Lower_lip_follow_grp')
            cmds.group('System_Lower_lip_jnt', n='System_R_Lower_lip_follow_grp')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_lower_side_02_jnt', n='System_L_lip_lower_side_02_follow_grp')
            cmds.group('System_R_lip_lower_side_02_jnt', n='System_R_lip_lower_side_02_follow_grp')
            cmds.group('System_L_lip_lower_side_02_follow_grp', n='System_L_lip_lower_02_corner_down_follow')
            cmds.group('System_R_lip_lower_side_02_follow_grp', n='System_R_lip_lower_02_corner_down_follow')
            cmds.group('System_L_lip_lower_02_corner_down_follow', n='L_lower_02_lip_master_follow_grp')
            cmds.group('System_R_lip_lower_02_corner_down_follow', n='R_lower_02_lip_master_follow_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_upper_lip_jnt', n='System_upper_up_lip_follow_grp')
            cmds.parent('System_upper_up_lip_follow_grp', 'Facial_System_joint_grp')
            cmds.parent('System_upper_lip_jnt', 'System_R_upper_lip_follow_grp')
            cmds.group('System_L_lip_upper_side_jnt', n='System_L_upper_up_lip_follow_grp')
            cmds.group('System_upper_lip_jnt', n='System_upper_lip_jnt_grp')
            cmds.group('System_L_upper_lip_follow_grp', n='System_L_side_up_lip_follow_grp')
            cmds.group('System_L_upper_lip_follow_grp', n='System_R_side_up_lip_follow_grp')
            cmds.group('System_R_lip_upper_side_jnt', n='System_R_upper_up_lip_follow_grp')
            cmds.group('System_L_side_up_lip_follow_grp', n='System_Lip_upper_jaw_follow_grp')
            cmds.group('System_Lip_upper_jaw_follow_grp', n='Upper_lip_master_follow_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_upper_lip_follow_grp', n='System_Lip_upper_jaw_follow_grp')
            cmds.group('System_upper_lip_jnt', n='System_upper_lip_jnt_grp')
            cmds.group('System_Lip_upper_jaw_follow_grp', n='Upper_lip_master_follow_grp')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_upper_side_02_jnt', n='System_L_upper_02_up_lip_follow_grp')
            cmds.group('System_R_lip_upper_side_02_jnt', n='System_R_upper_02_up_lip_follow_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_Lower_lip_jnt', n='System_Lower_down_lip_follow_grp')
            cmds.parent('System_Lower_down_lip_follow_grp', 'Facial_System_joint_grp')
            cmds.parent('System_Lower_lip_jnt', 'System_R_Lower_lip_follow_grp')
            cmds.group('System_L_lip_lower_side_jnt', n='System_L_lower_down_lip_follow_grp')
            cmds.group('System_R_lip_lower_side_jnt', n='System_R_lower_down_lip_follow_grp')
            cmds.group('System_Lower_lip_jnt', n='System_Lower_lip_jnt_grp')
            cmds.group('System_L_Lower_lip_follow_grp', n='System_L_side_down_lip_follow_grp')
            cmds.group('System_L_Lower_lip_follow_grp', n='System_R_side_down_lip_follow_grp')
            cmds.group('System_L_side_down_lip_follow_grp', n='Lower_lip_master_follow_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_Lower_lip_jnt', n='System_Lower_lip_jnt_grp')
            cmds.group('System_L_Lower_lip_follow_grp', n='Lower_lip_master_follow_grp')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_lower_side_02_jnt', n='System_L_lower_02_down_lip_follow_grp')
            cmds.group('System_R_lip_lower_side_02_jnt', n='System_R_lower_02_down_lip_follow_grp')
        if 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip corner Jaw follow' + '\nSystem_L_lip_up_down_corner_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15.7*$sumXYZ+System_Jaw_master_jnt_grp.rotateZ*0.02*$sumXYZ;' + '\nSystem_L_lip_up_down_corner_grp.translateZ =System_Jaw_master_jnt_grp.rotateX*-0.04*$sumXYZ;' + '\nSystem_L_lip_up_down_corner_grp.rotateX =System_Jaw_master_jnt_grp.rotateX/2;' + '\nSystem_L_lip_up_down_corner_grp.rotateY =System_Jaw_master_jnt_grp.rotateY/2;' + '\nSystem_L_lip_up_down_corner_grp.rotateZ =System_Jaw_master_jnt_grp.rotateZ/2;\n' + '\nSystem_R_lip_up_down_corner_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15.7*$sumXYZ+System_Jaw_master_jnt_grp.rotateZ*-0.02*$sumXYZ;' + '\nSystem_R_lip_up_down_corner_grp.translateZ =System_Jaw_master_jnt_grp.rotateX*-0.04*$sumXYZ;' + '\nSystem_R_lip_up_down_corner_grp.rotateX =System_Jaw_master_jnt_grp.rotateX/2;' + '\nSystem_R_lip_up_down_corner_grp.rotateY =System_Jaw_master_jnt_grp.rotateY/2;' + '\nSystem_R_lip_up_down_corner_grp.rotateZ =System_Jaw_master_jnt_grp.rotateZ/2;\n' + '\nSystem_Lip_upper_jaw_follow_grp.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/60*$sumXYZ;',
                ae=1, uc=all, alwaysEvaluate=0, n='Jaw_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip corner Jaw follow' + '\nSystem_L_lip_up_down_corner_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15.7*$sumXYZ+System_Jaw_master_jnt_grp.rotateZ*0.02*$sumXYZ;' + '\nSystem_L_lip_up_down_corner_grp.translateZ =System_Jaw_master_jnt_grp.rotateX*-0.04*$sumXYZ;' + '\nSystem_L_lip_up_down_corner_grp.rotateX =System_Jaw_master_jnt_grp.rotateX/2;' + '\nSystem_L_lip_up_down_corner_grp.rotateY =System_Jaw_master_jnt_grp.rotateY/2;' + '\nSystem_L_lip_up_down_corner_grp.rotateZ =System_Jaw_master_jnt_grp.rotateZ/2;\n' + '\nSystem_R_lip_up_down_corner_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15.7*$sumXYZ+System_Jaw_master_jnt_grp.rotateZ*-0.02*$sumXYZ;' + '\nSystem_R_lip_up_down_corner_grp.translateZ =System_Jaw_master_jnt_grp.rotateX*-0.04*$sumXYZ;' + '\nSystem_R_lip_up_down_corner_grp.rotateX =System_Jaw_master_jnt_grp.rotateX/2;' + '\nSystem_R_lip_up_down_corner_grp.rotateY =System_Jaw_master_jnt_grp.rotateY/2;' + '\nSystem_R_lip_up_down_corner_grp.rotateZ =System_Jaw_master_jnt_grp.rotateZ/2;\n' + '\n//Lip Upper Jaw follow' + '\nSystem_L_lip_upper_corner_jaw_follow.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/50*$sumXYZ;' + '\nSystem_L_lip_upper_corner_jaw_follow.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.02*$sumXYZ;' + '\nSystem_R_lip_upper_corner_jaw_follow.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/50*$sumXYZ;' + '\nSystem_R_lip_upper_corner_jaw_follow.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.02*$sumXYZ;' + '\nSystem_Lip_upper_jaw_follow_grp.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/60*$sumXYZ;',
                ae=1, uc=all, alwaysEvaluate=0, n='Jaw_expression')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip corner Jaw follow' + '\nSystem_L_lip_up_down_corner_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15.7*$sumXYZ+System_Jaw_master_jnt_grp.rotateZ*0.02*$sumXYZ;' + '\nSystem_L_lip_up_down_corner_grp.translateZ =System_Jaw_master_jnt_grp.rotateX*-0.04*$sumXYZ;' + '\nSystem_L_lip_up_down_corner_grp.rotateX =System_Jaw_master_jnt_grp.rotateX/2;' + '\nSystem_L_lip_up_down_corner_grp.rotateY =System_Jaw_master_jnt_grp.rotateY/2;' + '\nSystem_L_lip_up_down_corner_grp.rotateZ =System_Jaw_master_jnt_grp.rotateZ/2;\n' + '\nSystem_R_lip_up_down_corner_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15.7*$sumXYZ+System_Jaw_master_jnt_grp.rotateZ*-0.02*$sumXYZ;' + '\nSystem_R_lip_up_down_corner_grp.translateZ =System_Jaw_master_jnt_grp.rotateX*-0.04*$sumXYZ;' + '\nSystem_R_lip_up_down_corner_grp.rotateX =System_Jaw_master_jnt_grp.rotateX/2;' + '\nSystem_R_lip_up_down_corner_grp.rotateY =System_Jaw_master_jnt_grp.rotateY/2;' + '\nSystem_R_lip_up_down_corner_grp.rotateZ =System_Jaw_master_jnt_grp.rotateZ/2;\n' + '\n//Lip Upper Jaw follow' + '\nSystem_L_lip_upper_corner_jaw_follow.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/50*$sumXYZ;' + '\nSystem_L_lip_upper_corner_jaw_follow.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.02*$sumXYZ;' + '\nSystem_R_lip_upper_corner_jaw_follow.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/50*$sumXYZ;' + '\nSystem_R_lip_upper_corner_jaw_follow.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.02*$sumXYZ;' + '\nSystem_Lip_upper_jaw_follow_grp.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/60*$sumXYZ;' + '\nSystem_Lip_upper_jaw_follow_grp.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.02*$sumXYZ;' + '\n//Lip Upper_02 Jaw follow' + '\nSystem_L_lip_upper_02_corner_jaw_follow.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/45*$sumXYZ;' + '\nSystem_L_lip_upper_02_corner_jaw_follow.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.03*$sumXYZ;' + '\nSystem_R_lip_upper_02_corner_jaw_follow.translateY =-Lip_upper_jaw_follow_ctrl_grp.rotateX/45*$sumXYZ;' + '\nSystem_R_lip_upper_02_corner_jaw_follow.translateZ =Lip_upper_jaw_follow_ctrl_grp.rotateX*-0.03*$sumXYZ;',
                ae=1, uc=all, alwaysEvaluate=0, n='Jaw_expression')
        if 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lip corner L Upperside Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_upper_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_L_upper_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/16;}' + '\nSystem_L_upper_lip_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/8;' + '\nSystem_L_upper_lip_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/8;\n' + '\n//Lip corner R Upperside Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_upper_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_R_upper_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/16;}' + '\nSystem_R_upper_lip_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/8;' + '\nSystem_R_upper_lip_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/8;\n' + '\n//Lip corner L Lowerside Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_Lower_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_L_Lower_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/16;}' + '\nSystem_L_Lower_lip_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/8;' + '\nSystem_L_Lower_lip_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/8;\n' + '\n//Lip corner R Lowerside Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_Lower_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_R_Lower_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/16;}' + '\nSystem_R_Lower_lip_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/8;' + '\nSystem_R_Lower_lip_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/8;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_corner_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lip corner L Upperside Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_lip_upper_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/2;}' + '\nelse{System_L_lip_upper_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/4;}' + '\nSystem_L_lip_upper_side_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/2;' + '\nSystem_L_lip_upper_side_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/2;' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_upper_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_L_upper_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/16;}' + '\nSystem_L_upper_lip_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/8;' + '\nSystem_L_upper_lip_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/8;\n' + '\n//Lip corner R Upperside Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_lip_upper_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/2;}' + '\nelse{System_R_lip_upper_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/4;}' + '\nSystem_R_lip_upper_side_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/2;' + '\nSystem_R_lip_upper_side_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/2;' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_upper_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_R_upper_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/16;}' + '\nSystem_R_upper_lip_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/8;' + '\nSystem_R_upper_lip_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/8;\n' + '\n//Lip corner L Lowerside Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_lip_lower_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/2;}' + '\nelse{System_L_lip_lower_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/4;}' + '\nSystem_L_lip_lower_side_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/2;' + '\nSystem_L_lip_lower_side_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/2;' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_Lower_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_L_Lower_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/16;}' + '\nSystem_L_Lower_lip_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/8;' + '\nSystem_L_Lower_lip_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/8;\n' + '\n//Lip corner R Lowerside Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_lip_lower_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/2;}' + '\nelse{System_R_lip_lower_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/4;}' + '\nSystem_R_lip_lower_side_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/2;' + '\nSystem_R_lip_lower_side_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/2;' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_Lower_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/8;}' + '\nelse{System_R_Lower_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/16;}' + '\nSystem_R_Lower_lip_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/8;' + '\nSystem_R_Lower_lip_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/8;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_corner_expression')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lip corner L Upperside Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_lip_upper_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/3.6;}' + '\nelse{System_L_lip_upper_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/6;}' + '\nSystem_L_lip_upper_side_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/3.6;' + '\nSystem_L_lip_upper_side_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/3.6;' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_upper_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/9;}' + '\nelse{System_L_upper_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/15;}' + '\nSystem_L_upper_lip_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/9;' + '\nSystem_L_upper_lip_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/9;\n' + '\n//Lip corner R Upperside Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_lip_upper_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/3.6;}' + '\nelse{System_R_lip_upper_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/6;}' + '\nSystem_R_lip_upper_side_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/3.6;' + '\nSystem_R_lip_upper_side_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/3.6;' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_upper_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/9;}' + '\nelse{System_R_upper_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/15;}' + '\nSystem_R_upper_lip_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/9;' + '\nSystem_R_upper_lip_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/9;\n' + '\n//Lip corner L Lowerside Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_lip_lower_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/3.6;}' + '\nelse{System_L_lip_lower_side_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/6;}' + '\nSystem_L_lip_lower_side_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/3.6;' + '\nSystem_L_lip_lower_side_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/3.6;' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_Lower_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/9;}' + '\nelse{System_L_Lower_lip_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/15;}' + '\nSystem_L_Lower_lip_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/9;' + '\nSystem_L_Lower_lip_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/9;\n' + '\n//Lip corner R Lowerside Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_lip_lower_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/3.6;}' + '\nelse{System_R_lip_lower_side_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/6;}' + '\nSystem_R_lip_lower_side_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/3.6;' + '\nSystem_R_lip_lower_side_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/3.6;' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_Lower_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/9;}' + '\nelse{System_R_Lower_lip_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/15;}' + '\nSystem_R_Lower_lip_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/9;' + '\nSystem_R_Lower_lip_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/9;' + '\n//Lip corner L Upperside_02 Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_lip_upper_side_02_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/1.8;}' + '\nelse{System_L_lip_upper_side_02_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/3;}' + '\nSystem_L_lip_upper_side_02_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/1.8;' + '\nSystem_L_lip_upper_side_02_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/1.8;' + '\n//Lip corner R Upperside_02 Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_lip_upper_side_02_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/1.8;}' + '\nelse{System_R_lip_upper_side_02_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/3;}' + '\nSystem_R_lip_upper_side_02_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/1.8;' + '\nSystem_R_lip_upper_side_02_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/1.8;' + '\n//Lip corner L Lowerside_02 Follow' + '\nif(System_L_lip_corner_follow_grp.translateX>0){' + '\nSystem_L_lip_lower_side_02_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/1.8;}' + '\nelse{System_L_lip_lower_side_02_follow_grp.translateX = System_L_lip_corner_follow_grp.translateX/3;}' + '\nSystem_L_lip_lower_side_02_follow_grp.translateY = System_L_lip_corner_follow_grp.translateY/1.8;' + '\nSystem_L_lip_lower_side_02_follow_grp.translateZ = System_L_lip_corner_follow_grp.translateZ/1.8;' + '\n//Lip corner R Lowerside_02 Follow' + '\nif(System_R_lip_corner_follow_grp.translateX>0){' + '\nSystem_R_lip_lower_side_02_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/1.8;}' + '\nelse{System_R_lip_lower_side_02_follow_grp.translateX = -System_R_lip_corner_follow_grp.translateX/3;}' + '\nSystem_R_lip_lower_side_02_follow_grp.translateY = System_R_lip_corner_follow_grp.translateY/1.8;' + '\nSystem_R_lip_lower_side_02_follow_grp.translateZ = System_R_lip_corner_follow_grp.translateZ/1.8;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_corner_expression')
        cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 5, n='Jaw_Master_Ctrl')
        cmds.pointConstraint('System_Jaw_master_jnt', 'Jaw_Master_Ctrl')
        cmds.delete('Jaw_Master_Ctrl_pointConstraint1')
        cmds.makeIdentity('Jaw_Master_Ctrl', apply=True, t=True, r=True, scale=True)
        cmds.move(0 * self.ctrl_scale, -1 * self.ctrl_scale, 10 * self.ctrl_scale, 'Jaw_Master_CtrlShape.cv[4:6]', r=True)
        cmds.select(clear=True)
        cmds.select('Jaw_Master_CtrlShape.cv[3]', 'Jaw_Master_CtrlShape.cv[7]', add=True)
        cmds.scale(1.65, 1, 1, r=True)
        cmds.parentConstraint('Jaw_Master_Ctrl', 'System_Jaw_master_jnt_grp', mo=True)
        cmds.setAttr('Jaw_Master_CtrlShape.overrideEnabled', 1)
        cmds.setAttr('Jaw_Master_CtrlShape.overrideColor', 17)
        cmds.group('Jaw_Master_Ctrl', n='Jaw_Master_Ctrl_grp')
        cmds.parentConstraint('System_Jaw_master_follow_grp', 'Jaw_Master_Ctrl_grp', mo=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            self.create_cube_control(23)
            cmds.scale(0.7 * self.ctrl_scale, 0.7 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lip_corner_Ctrl')
            cmds.pointConstraint('System_L_lip_corner_jnt', 'L_lip_corner_Ctrl')
            cmds.delete('L_lip_corner_Ctrl_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_Ctrl', apply=True, t=True, r=True, scale=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            A = cmds.getAttr('System_L_lip_corner_jnt.translateY')
            B = cmds.getAttr('System_L_lip_lower_corner_jnt.translateY')
            cmds.select('L_lip_corner_CtrlShape3.cv[0:1]', 'L_lip_corner_CtrlShape2.cv[0:1]',
                        'L_lip_corner_CtrlShape1.cv[0:1]', 'L_lip_corner_CtrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, -(A - B) / 2, 1 * self.ctrl_scale, r=True)
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.select('L_lip_corner_CtrlShape3.cv[0:1]', 'L_lip_corner_CtrlShape2.cv[0:1]',
                        'L_lip_corner_CtrlShape1.cv[0:1]', 'L_lip_corner_CtrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0, 1 * self.ctrl_scale, r=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.select(clear=True)
            cmds.select('L_lip_corner_Ctrl')
            cmds.parentConstraint('L_lip_corner_Ctrl', 'System_L_lip_corner_follow_grp', mo=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group(em=True, n='L_lip_corner_Ctrl_grp')
            cmds.select('L_lip_corner_Ctrl')
            cmds.select('L_lip_corner_Ctrl_grp', add=True)
            cmds.parent()
            cmds.duplicate('L_lip_corner_Ctrl_grp', n='R_lip_corner_Ctrl_grp')
            cmds.setAttr('R_lip_corner_Ctrl_grp.scaleX', -1)
            cmds.select('R_lip_corner_Ctrl_grp', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_corner_CtrlShape.overrideColor', 29)
            cmds.setAttr('R_lip_corner_CtrlShape4.overrideColor', 29)
            cmds.setAttr('R_lip_corner_CtrlShape5.overrideColor', 29)
            cmds.setAttr('R_lip_corner_CtrlShape6.overrideColor', 29)
            cmds.makeIdentity('L_lip_corner_Ctrl_grp', apply=True, t=True, r=True)
            cmds.makeIdentity('R_lip_corner_Ctrl_grp', apply=True, t=True, r=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.select('R_lip_corner_CtrlShape6.cv[0:1]', 'R_lip_corner_CtrlShape5.cv[0:1]',
                        'R_lip_corner_CtrlShape4.cv[0:1]', 'R_lip_corner_CtrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, (A - B) / 2, 0 * self.ctrl_scale, r=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.pointConstraint('System_R_lip_corner_jnt', 'R_lip_corner_Ctrl')
            cmds.delete('R_lip_corner_Ctrl_pointConstraint1')
            cmds.makeIdentity('R_lip_corner_Ctrl', apply=True, t=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            A = cmds.getAttr('System_R_lip_corner_jnt.translateY')
            B = cmds.getAttr('System_R_lip_lower_corner_jnt.translateY')
            cmds.select('R_lip_corner_CtrlShape6.cv[0:1]', 'R_lip_corner_CtrlShape5.cv[0:1]',
                        'R_lip_corner_CtrlShape4.cv[0:1]', 'R_lip_corner_CtrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, -(A - B) / 2, 0 * self.ctrl_scale, r=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('R_lip_corner_Ctrl', 'System_R_lip_corner_follow_grp', mo=True)
            cmds.parentConstraint('System_L_lip_up_down_corner_grp', 'L_lip_corner_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_lip_up_down_corner_grp', 'R_lip_corner_Ctrl_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_corner_jnt', 'System_L_lip_lower_corner_jnt', n='System_L_lip_corner_jnt_grp')
            cmds.group('System_R_lip_corner_jnt', 'System_R_lip_lower_corner_jnt', n='System_R_lip_corner_jnt_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_corner_jnt', n='System_L_lip_corner_jnt_grp')
            cmds.group('System_R_lip_corner_jnt', n='System_R_lip_corner_jnt_grp')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('L_lip_corner_Ctrl', 'System_L_lip_corner_jnt_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_Ctrl', 'System_R_lip_corner_jnt_grp', mo=True)
            cmds.parent('System_L_lip_corner_follow_grp', 'L_lip_corner_Ctrl_grp')
            cmds.parent('System_R_lip_corner_follow_grp', 'R_lip_corner_Ctrl_grp')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            self.create_cube_control(17)
            cmds.scale(0.7 * self.ctrl_scale, 0.7 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'Upper_lip_ctrl')
            cmds.pointConstraint('System_upper_lip_jnt', 'Upper_lip_ctrl')
            cmds.delete('Upper_lip_ctrl_pointConstraint1')
            cmds.makeIdentity('Upper_lip_ctrl', apply=True, t=True, r=True, scale=True)
            cmds.select('Upper_lip_ctrlShape3.cv[0:1]', 'Upper_lip_ctrlShape2.cv[0:1]', 'Upper_lip_ctrlShape1.cv[0:1]',
                        'Upper_lip_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select('Upper_lip_ctrlShape3.cv[0]', 'Upper_lip_ctrlShape1.cv[0:1]', 'Upper_lip_ctrlShape.cv[3:5]',
                        'Upper_lip_ctrlShape.cv[8:9]')
            cmds.move(0 * self.ctrl_scale, 0.35 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('Upper_lip_ctrl')
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.parentConstraint('Upper_lip_ctrl', 'System_upper_up_lip_follow_grp', mo=True)
                cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.35, n='Upper_lip_FK_ctrl')
                cmds.pointConstraint('System_upper_lip_jnt', 'Upper_lip_FK_ctrl')
                cmds.delete('Upper_lip_FK_ctrl_pointConstraint1')
                cmds.makeIdentity('Upper_lip_FK_ctrl', apply=True, t=True, r=True, scale=True)
                cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'Upper_lip_FK_ctrl.cv[0:7]',
                          r=True)
                cmds.move(0 * self.ctrl_scale, 0.34 * self.ctrl_scale, 0 * self.ctrl_scale, 'Upper_lip_FK_ctrl.cv[4:6]',
                          r=True)
                cmds.move(0 * self.ctrl_scale, 0.1 * self.ctrl_scale, 0 * self.ctrl_scale, 'Upper_lip_FK_ctrl.cv[5]',
                          r=True)
                cmds.select(clear=True)
                cmds.select('Upper_lip_FK_ctrl')
                cmds.setAttr('Upper_lip_FK_ctrlShape.overrideEnabled', 1)
                cmds.setAttr('Upper_lip_FK_ctrlShape.overrideColor', 16)
                cmds.group('Upper_lip_FK_ctrl', n='Upper_lip_FK_Ctrl_grp')
                upper_lip_fk_ctrl_piv = cmds.xform('Upper_lip_FK_ctrl', q=True, ws=True, rp=True)
                cmds.xform('Upper_lip_FK_Ctrl_grp', ws=True, piv=upper_lip_fk_ctrl_piv)
            cmds.group('Upper_lip_ctrl', n='L_Upper_lip_Ctrl_grp')
            cmds.group('Upper_lip_ctrl', n='R_Upper_lip_Ctrl_grp')
            cmds.parentConstraint('Upper_lip_ctrl', 'System_upper_lip_jnt_grp', mo=True)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.scaleConstraint('Upper_lip_FK_ctrl', 'System_upper_lip_jnt_grp', mo=True)
            cmds.parentConstraint('System_R_upper_lip_follow_grp', 'R_Upper_lip_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_L_upper_lip_follow_grp', 'L_Upper_lip_Ctrl_grp', mo=True)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.parent('System_upper_up_lip_follow_grp', 'R_Upper_lip_Ctrl_grp')
                cmds.parent('Upper_lip_FK_Ctrl_grp', 'Upper_lip_ctrl')
                cmds.group('System_upper_lip_jnt', n='System_Upper_lip_FK_grp')
                cmds.parentConstraint('Upper_lip_FK_ctrl', 'System_Upper_lip_FK_grp', mo=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            self.create_cube_control(17)
            cmds.scale(0.7 * self.ctrl_scale, 0.7 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'Lower_lip_ctrl')
            cmds.pointConstraint('System_Lower_lip_jnt', 'Lower_lip_ctrl')
            cmds.delete('Lower_lip_ctrl_pointConstraint1')
            cmds.makeIdentity('Lower_lip_ctrl', apply=True, t=True, r=True, scale=True)
            cmds.select('Lower_lip_ctrlShape3.cv[0:1]', 'Lower_lip_ctrlShape2.cv[0:1]', 'Lower_lip_ctrlShape1.cv[0:1]',
                        'Lower_lip_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select('Lower_lip_ctrlShape3.cv[1]', 'Lower_lip_ctrlShape.cv[0:2]', 'Lower_lip_ctrlShape.cv[6:7]',
                        'Lower_lip_ctrlShape2.cv[0:1]')
            cmds.move(0 * self.ctrl_scale, -0.35 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('Lower_lip_ctrl')
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.parentConstraint('Lower_lip_ctrl', 'System_Lower_down_lip_follow_grp', mo=True)
                cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.35, n='Lower_lip_FK_ctrl')
                cmds.pointConstraint('System_Lower_lip_jnt', 'Lower_lip_FK_ctrl')
                cmds.delete('Lower_lip_FK_ctrl_pointConstraint1')
                cmds.makeIdentity('Lower_lip_FK_ctrl', apply=True, t=True, r=True, scale=True)
                cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'Lower_lip_FK_ctrl.cv[0:7]', r=True)
                cmds.move(0 * self.ctrl_scale, -0.34 * self.ctrl_scale, 0 * self.ctrl_scale, 'Lower_lip_FK_ctrl.cv[0:2]', r=True)
                cmds.move(0 * self.ctrl_scale, -0.1 * self.ctrl_scale, 0 * self.ctrl_scale, 'Lower_lip_FK_ctrl.cv[1]', r=True)
                cmds.select('Lower_lip_FK_ctrl')
                cmds.setAttr('Lower_lip_FK_ctrlShape.overrideEnabled', 1)
                cmds.setAttr('Lower_lip_FK_ctrlShape.overrideColor', 16)
                cmds.group('Lower_lip_FK_ctrl', n='Lower_lip_FK_Ctrl_grp')
                lower_lip_fk_ctrl_piv = cmds.xform('Lower_lip_FK_ctrl', q=True, ws=True, rp=True)
                cmds.xform('Lower_lip_FK_Ctrl_grp', ws=True, piv=lower_lip_fk_ctrl_piv)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.3, n='Lower_lip_outer_ctrl')
                cmds.pointConstraint('System_Lower_lip_outer_jnt', 'Lower_lip_outer_ctrl')
                cmds.delete('Lower_lip_outer_ctrl_pointConstraint1')
                cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'Lower_lip_outer_ctrl.cv[0:7]', r=True)
                cmds.group('Lower_lip_outer_ctrl', n='Lower_lip_outer_Ctrl_grp')
                cmds.setAttr('Lower_lip_outer_ctrlShape.overrideEnabled', 1)
                cmds.setAttr('Lower_lip_outer_ctrlShape.overrideColor', 13)
                cmds.select('Lower_lip_outer_ctrl')
                cmds.parent(w=True)
                cmds.pointConstraint('System_Lower_lip_outer_jnt', 'Lower_lip_outer_Ctrl_grp')
                cmds.delete('Lower_lip_outer_Ctrl_grp_pointConstraint1')
                cmds.parent('Lower_lip_outer_ctrl', 'Lower_lip_outer_Ctrl_grp')
                cmds.makeIdentity('Lower_lip_outer_Ctrl_grp', apply=True, t=True, scale=True)
                cmds.select(clear=True)
                cmds.select('Lower_lip_outer_ctrl')
                cmds.select('Lower_lip_outer_Ctrl_grp', add=True)
            cmds.group('Lower_lip_ctrl', n='L_Lower_lip_Ctrl_grp')
            cmds.group('Lower_lip_ctrl', n='R_Lower_lip_Ctrl_grp')
            cmds.parentConstraint('Lower_lip_ctrl', 'System_Lower_lip_jnt_grp', mo=True)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.scaleConstraint('Lower_lip_FK_ctrl', 'System_Lower_lip_jnt_grp', mo=True)
            cmds.parentConstraint('System_R_Lower_lip_follow_grp', 'R_Lower_lip_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_L_Lower_lip_follow_grp', 'L_Lower_lip_Ctrl_grp', mo=True)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.parent('System_Lower_down_lip_follow_grp', 'R_Lower_lip_Ctrl_grp')
                cmds.parent('Lower_lip_FK_Ctrl_grp', 'Lower_lip_ctrl')
                cmds.group('System_Lower_lip_jnt', n='System_Lower_lip_FK_grp')
                cmds.parentConstraint('Lower_lip_FK_ctrl', 'System_Lower_lip_FK_grp', mo=True)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group('System_Lower_lip_outer_jnt', n='System_Lower_lip_outer_jnt_grp')
                cmds.group('Lower_lip_outer_ctrl', n='Lower_lip_outer_lower_follow_grp')
                cmds.group(n='System_Lower_lip_outer_follow_grp', em=True)
                cmds.group('Lower_lip_outer_lower_follow_grp', n='Lower_outer_jaw_follow_grp')
                cmds.parentConstraint('Jaw_Master_Ctrl', 'Lower_outer_jaw_follow_grp', mo=True)
                cmds.pointConstraint('Lower_lip_outer_ctrl', 'System_Lower_lip_outer_follow_grp')
                cmds.delete('System_Lower_lip_outer_follow_grp_pointConstraint1')
                cmds.makeIdentity('System_Lower_lip_outer_follow_grp', apply=True, t=True)
                cmds.addAttr('Lower_lip_ctrl', ln='lip_lower_outer_follow', at='double', min=0, max=2)
                cmds.setAttr('Lower_lip_ctrl.lip_lower_outer_follow', e=1, keyable=True)
                cmds.setAttr('Lower_lip_ctrl.lip_lower_outer_follow', 0.3)
                cmds.parentConstraint('Lower_lip_ctrl', 'System_Lower_lip_outer_follow_grp', mo=True)
                cmds.parentConstraint('Lower_lip_outer_ctrl', 'System_Lower_lip_outer_jnt_grp', mo=True)
                cmds.scaleConstraint('Lower_lip_outer_ctrl', 'System_Lower_lip_outer_jnt_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            self.create_cube_control(13)
            cmds.scale(0.5 * self.ctrl_scale, 0.5 * self.ctrl_scale, 0.5 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lip_upper_side_ctrl')
            cmds.pointConstraint('System_L_lip_upper_side_jnt', 'L_lip_upper_side_ctrl')
            cmds.delete('L_lip_upper_side_ctrl_pointConstraint1')
            cmds.select('L_lip_upper_side_ctrlShape3.cv[0:1]', 'L_lip_upper_side_ctrlShape2.cv[0:1]',
                        'L_lip_upper_side_ctrlShape1.cv[0:1]', 'L_lip_upper_side_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select('L_lip_upper_side_ctrlShape3.cv[0]', 'L_lip_upper_side_ctrlShape1.cv[0:1]',
                        'L_lip_upper_side_ctrlShape.cv[3:5]', 'L_lip_upper_side_ctrlShape.cv[8:9]')
            cmds.move(0 * self.ctrl_scale, 0.25 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.group('L_lip_upper_side_ctrl', n='L_lip_upper_side_Ctrl_grp')
            cmds.select('L_lip_upper_side_ctrl')
            cmds.parent(w=True)
            cmds.pointConstraint('System_L_lip_upper_side_jnt', 'L_lip_upper_side_Ctrl_grp')
            cmds.delete('L_lip_upper_side_Ctrl_grp_pointConstraint1')
            cmds.parent('L_lip_upper_side_ctrl', 'L_lip_upper_side_Ctrl_grp')
            cmds.setAttr('L_lip_upper_side_Ctrl_grp.rotateY', 17.751)
            cmds.makeIdentity('L_lip_upper_side_Ctrl_grp', apply=True, t=True, scale=True)
            cmds.select(clear=True)
            cmds.select('L_lip_upper_side_ctrl')
            cmds.select('L_lip_upper_side_Ctrl_grp', add=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_lip_upper_side_FK_ctrl')
            cmds.pointConstraint('System_L_lip_upper_side_jnt', 'L_lip_upper_side_FK_ctrl')
            cmds.delete('L_lip_upper_side_FK_ctrl_pointConstraint1')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_upper_side_FK_ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.15 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_upper_side_FK_ctrl.cv[4:6]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.07 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_upper_side_FK_ctrl.cv[5]', r=True)
            cmds.group('L_lip_upper_side_FK_ctrl', n='L_lip_upper_side_FK_Ctrl_grp')
            cmds.setAttr('L_lip_upper_side_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_lip_upper_side_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_upper_side_FK_ctrl')
            cmds.parent(w=True)
            cmds.pointConstraint('System_L_lip_upper_side_jnt', 'L_lip_upper_side_FK_Ctrl_grp')
            cmds.delete('L_lip_upper_side_FK_Ctrl_grp_pointConstraint1')
            cmds.parent('L_lip_upper_side_FK_ctrl', 'L_lip_upper_side_FK_Ctrl_grp')
            cmds.setAttr('L_lip_upper_side_FK_Ctrl_grp.rotateY', 17.751)
            cmds.makeIdentity('L_lip_upper_side_FK_Ctrl_grp', apply=True, t=True, scale=True)
            cmds.select(clear=True)
            cmds.select('L_lip_upper_side_FK_ctrl')
            cmds.select('L_lip_upper_side_FK_Ctrl_grp', add=True)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.3, n='L_lip_upper_outer_ctrl')
                cmds.pointConstraint('System_L_lip_upper_outer_jnt', 'L_lip_upper_outer_ctrl')
                cmds.delete('L_lip_upper_outer_ctrl_pointConstraint1')
                cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_upper_outer_ctrl.cv[0:7]', r=True)
                cmds.group('L_lip_upper_outer_ctrl', n='L_lip_upper_outer_Ctrl_grp')
                cmds.setAttr('L_lip_upper_outer_ctrlShape.overrideEnabled', 1)
                cmds.setAttr('L_lip_upper_outer_ctrlShape.overrideColor', 13)
                cmds.select('L_lip_upper_outer_ctrl')
                cmds.parent(w=True)
                cmds.pointConstraint('System_L_lip_upper_outer_jnt', 'L_lip_upper_outer_Ctrl_grp')
                cmds.delete('L_lip_upper_outer_Ctrl_grp_pointConstraint1')
                cmds.parent('L_lip_upper_outer_ctrl', 'L_lip_upper_outer_Ctrl_grp')
                cmds.setAttr('L_lip_upper_outer_Ctrl_grp.rotateY', 17.751)
                cmds.makeIdentity('L_lip_upper_outer_Ctrl_grp', apply=True, t=True, scale=True)
                cmds.select(clear=True)
                cmds.select('L_lip_upper_outer_ctrl')
                cmds.select('L_lip_upper_outer_Ctrl_grp', add=True)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_upper_side_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_upper_side_ctrlShape.overrideColor', 13)
            cmds.setAttr('R_lip_upper_side_ctrlShape4.overrideColor', 13)
            cmds.setAttr('R_lip_upper_side_ctrlShape5.overrideColor', 13)
            cmds.setAttr('R_lip_upper_side_ctrlShape6.overrideColor', 13)
            cmds.select('L_lip_upper_side_Ctrl_grp')
            cmds.select('R_lip_upper_side_Ctrl_grp', add=True)
            cmds.parent(w=True)
            cmds.pointConstraint('System_R_lip_upper_side_jnt', 'R_lip_upper_side_Ctrl_grp')
            cmds.delete('R_lip_upper_side_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_upper_side_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup', 'R_SymGroup')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_upper_side_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_upper_side_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_upper_side_FK_Ctrl_grp')
            cmds.select('R_lip_upper_side_FK_Ctrl_grp', add=True)
            cmds.parent(w=True)
            cmds.pointConstraint('System_R_lip_upper_side_jnt', 'R_lip_upper_side_FK_Ctrl_grp')
            cmds.delete('R_lip_upper_side_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_upper_side_FK_Ctrl_grp', apply=True, t=True)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.delete('L_SymGroup', 'R_SymGroup')
                cmds.group(em=True, n='L_SymGroup')
                cmds.parent('L_lip_upper_outer_Ctrl_grp', 'L_SymGroup')
                cmds.duplicate('L_SymGroup', n='R_SymGroup')
                cmds.setAttr('R_SymGroup.scaleX', -1)
                cmds.select('R_SymGroup', hi=True)
                mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
                cmds.setAttr('R_lip_upper_outer_ctrlShape.overrideColor', 13)
                cmds.select('L_lip_upper_outer_Ctrl_grp')
                cmds.select('R_lip_upper_outer_Ctrl_grp', add=True)
                cmds.parent(w=True)
                cmds.pointConstraint('System_R_lip_upper_outer_jnt', 'R_lip_upper_outer_Ctrl_grp')
                cmds.delete('R_lip_upper_outer_Ctrl_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_upper_outer_Ctrl_grp', apply=True, t=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            A = cmds.getAttr('System_L_lip_upper_side_02_jnt.translateX')
            B = cmds.getAttr('System_L_lip_upper_side_jnt.translateX')
            cmds.setAttr('L_lip_upper_side_Ctrl_grp.translateX', (A - B) / 2)
            A = cmds.getAttr('System_L_lip_upper_side_02_jnt.translateY')
            B = cmds.getAttr('System_L_lip_upper_side_jnt.translateY')
            cmds.setAttr('L_lip_upper_side_Ctrl_grp.translateY', (A - B) / 2)
            cmds.makeIdentity('L_lip_upper_side_Ctrl_grp', apply=True, t=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_lip_upper_side_02_FK_ctrl')
            cmds.pointConstraint('System_L_lip_upper_side_02_jnt', 'L_lip_upper_side_02_FK_ctrl')
            cmds.delete('L_lip_upper_side_02_FK_ctrl_pointConstraint1')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_upper_side_02_FK_ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.15 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_upper_side_02_FK_ctrl.cv[4:6]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.07 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_upper_side_02_FK_ctrl.cv[5]', r=True)
            cmds.group('L_lip_upper_side_02_FK_ctrl', n='L_lip_upper_side_02_FK_Ctrl_grp')
            cmds.setAttr('L_lip_upper_side_02_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_lip_upper_side_02_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_upper_side_02_FK_ctrl')
            cmds.parent(w=True)
            cmds.pointConstraint('System_L_lip_upper_side_02_jnt', 'L_lip_upper_side_02_FK_Ctrl_grp')
            cmds.delete('L_lip_upper_side_02_FK_Ctrl_grp_pointConstraint1')
            cmds.parent('L_lip_upper_side_02_FK_ctrl', 'L_lip_upper_side_02_FK_Ctrl_grp')
            cmds.setAttr('L_lip_upper_side_02_FK_Ctrl_grp.rotateY', 17.751)
            cmds.makeIdentity('L_lip_upper_side_02_FK_Ctrl_grp', apply=True, t=True, scale=True)
            cmds.select(clear=True)
            cmds.select('L_lip_upper_side_02_FK_ctrl')
            cmds.select('L_lip_upper_side_02_FK_Ctrl_grp', add=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            A = cmds.getAttr('System_R_lip_upper_side_02_jnt.translateX')
            B = cmds.getAttr('System_R_lip_upper_side_jnt.translateX')
            cmds.setAttr('R_lip_upper_side_Ctrl_grp.translateX', (A - B) / 2)
            A = cmds.getAttr('System_R_lip_upper_side_02_jnt.translateY')
            B = cmds.getAttr('System_R_lip_upper_side_jnt.translateY')
            cmds.setAttr('R_lip_upper_side_Ctrl_grp.translateY', (A - B) / 2)
            cmds.makeIdentity('R_lip_upper_side_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup', 'R_SymGroup')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_upper_side_02_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_upper_side_02_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_upper_side_02_FK_Ctrl_grp')
            cmds.select('R_lip_upper_side_02_FK_Ctrl_grp', add=True)
            cmds.parent(w=True)
            cmds.pointConstraint('System_R_lip_upper_side_02_jnt', 'R_lip_upper_side_02_FK_Ctrl_grp')
            cmds.delete('R_lip_upper_side_02_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_upper_side_FK_Ctrl_grp', apply=True, t=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.group('System_L_lip_upper_side_jnt', n='System_L_lip_upper_side_jnt_grp')
            cmds.group('System_R_lip_upper_side_jnt', n='System_R_lip_upper_side_jnt_grp')
            cmds.group('L_lip_upper_side_Ctrl_grp', n='L_upper_up_lip_follow_Ctrl_grp')
            cmds.group('L_upper_up_lip_follow_Ctrl_grp', n='L_lip_upper_side_follow_Ctrl_grp')
            cmds.group('R_lip_upper_side_Ctrl_grp', n='R_upper_up_lip_follow_Ctrl_grp')
            cmds.group('R_upper_up_lip_follow_Ctrl_grp', n='R_lip_upper_side_follow_Ctrl_grp')
            cmds.parentConstraint('L_lip_upper_side_ctrl', 'System_L_lip_upper_side_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lip_upper_side_FK_ctrl', 'System_L_lip_upper_side_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_upper_up_lip_follow_grp', 'L_upper_up_lip_follow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_L_lip_upper_side_follow_grp', 'L_lip_upper_side_follow_Ctrl_grp', mo=True)
            cmds.parentConstraint('R_lip_upper_side_ctrl', 'System_R_lip_upper_side_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lip_upper_side_FK_ctrl', 'System_R_lip_upper_side_jnt_grp', mo=True)
            cmds.parentConstraint('System_R_upper_up_lip_follow_grp', 'R_upper_up_lip_follow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_lip_upper_side_follow_grp', 'R_lip_upper_side_follow_Ctrl_grp', mo=True)
            cmds.parent('L_lip_upper_side_FK_Ctrl_grp', 'L_lip_upper_side_ctrl')
            cmds.parent('R_lip_upper_side_FK_Ctrl_grp', 'R_lip_upper_side_ctrl')
            cmds.group('System_L_lip_upper_side_jnt', n='System_L_lip_upper_side_FK_grp')
            cmds.group('System_R_lip_upper_side_jnt', n='System_R_lip_upper_side_FK_grp')
            cmds.parentConstraint('L_lip_upper_side_FK_ctrl', 'System_L_lip_upper_side_FK_grp', mo=True)
            cmds.parentConstraint('R_lip_upper_side_FK_ctrl', 'System_R_lip_upper_side_FK_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            self.create_cube_control(13)
            cmds.scale(0.5 * self.ctrl_scale, 0.5 * self.ctrl_scale, 0.5 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lip_lower_side_ctrl')
            cmds.pointConstraint('System_L_lip_lower_side_jnt', 'L_lip_lower_side_ctrl')
            cmds.delete('L_lip_lower_side_ctrl_pointConstraint1')
            cmds.select('L_lip_lower_side_ctrlShape3.cv[0:1]', 'L_lip_lower_side_ctrlShape2.cv[0:1]', 'L_lip_lower_side_ctrlShape1.cv[0:1]', 'L_lip_lower_side_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select('L_lip_lower_side_ctrlShape3.cv[1]', 'L_lip_lower_side_ctrlShape.cv[0:2]', 'L_lip_lower_side_ctrlShape.cv[6:7]', 'L_lip_lower_side_ctrlShape2.cv[0:1]')
            cmds.move(0 * self.ctrl_scale, -0.25 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.group('L_lip_lower_side_ctrl', n='L_lip_lower_side_Ctrl_grp')
            cmds.select('L_lip_lower_side_ctrl')
            cmds.parent(w=True)
            cmds.pointConstraint('System_L_lip_lower_side_jnt', 'L_lip_lower_side_Ctrl_grp')
            cmds.delete('L_lip_lower_side_Ctrl_grp_pointConstraint1')
            cmds.parent('L_lip_lower_side_ctrl', 'L_lip_lower_side_Ctrl_grp')
            cmds.setAttr('L_lip_lower_side_Ctrl_grp.rotateY', 17.751)
            cmds.makeIdentity('L_lip_lower_side_Ctrl_grp', apply=True, t=True, scale=True)
            cmds.select(clear=True)
            cmds.select('L_lip_lower_side_ctrl')
            cmds.select('L_lip_lower_side_Ctrl_grp', add=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_lip_lower_side_FK_ctrl')
            cmds.pointConstraint('System_L_lip_lower_side_jnt', 'L_lip_lower_side_FK_ctrl')
            cmds.delete('L_lip_lower_side_FK_ctrl_pointConstraint1')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_lower_side_FK_ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, -0.15 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_lower_side_FK_ctrl.cv[0:2]', r=True)
            cmds.move(0 * self.ctrl_scale, -0.07 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_lower_side_FK_ctrl.cv[1]', r=True)
            cmds.group('L_lip_lower_side_FK_ctrl', n='L_lip_lower_side_FK_Ctrl_grp')
            cmds.setAttr('L_lip_lower_side_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_lip_lower_side_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_lower_side_FK_ctrl')
            cmds.parent(w=True)
            cmds.pointConstraint('System_L_lip_lower_side_jnt', 'L_lip_lower_side_FK_Ctrl_grp')
            cmds.delete('L_lip_lower_side_FK_Ctrl_grp_pointConstraint1')
            cmds.parent('L_lip_lower_side_FK_ctrl', 'L_lip_lower_side_FK_Ctrl_grp')
            cmds.setAttr('L_lip_lower_side_FK_Ctrl_grp.rotateY', 17.751)
            cmds.makeIdentity('L_lip_lower_side_FK_Ctrl_grp', apply=True, t=True, scale=True)
            cmds.select(clear=True)
            cmds.select('L_lip_lower_side_FK_ctrl')
            cmds.select('L_lip_lower_side_FK_Ctrl_grp', add=True)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.3, n='L_lip_lower_outer_ctrl')
                cmds.pointConstraint('System_L_lip_lower_outer_jnt', 'L_lip_lower_outer_ctrl')
                cmds.delete('L_lip_lower_outer_ctrl_pointConstraint1')
                cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_lower_outer_ctrl.cv[0:7]', r=True)
                cmds.group('L_lip_lower_outer_ctrl', n='L_lip_lower_outer_Ctrl_grp')
                cmds.setAttr('L_lip_lower_outer_ctrlShape.overrideEnabled', 1)
                cmds.setAttr('L_lip_lower_outer_ctrlShape.overrideColor', 13)
                cmds.select('L_lip_lower_outer_ctrl')
                cmds.parent(w=True)
                cmds.pointConstraint('System_L_lip_lower_outer_jnt', 'L_lip_lower_outer_Ctrl_grp')
                cmds.delete('L_lip_lower_outer_Ctrl_grp_pointConstraint1')
                cmds.parent('L_lip_lower_outer_ctrl', 'L_lip_lower_outer_Ctrl_grp')
                cmds.setAttr('L_lip_lower_outer_Ctrl_grp.rotateY', 17.751)
                cmds.makeIdentity('L_lip_lower_outer_Ctrl_grp', apply=True, t=True, scale=True)
                cmds.select(clear=True)
                cmds.select('L_lip_lower_outer_ctrl')
                cmds.select('L_lip_lower_outer_Ctrl_grp', add=True)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_lower_side_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_lower_side_ctrlShape.overrideColor', 13)
            cmds.setAttr('R_lip_lower_side_ctrlShape4.overrideColor', 13)
            cmds.setAttr('R_lip_lower_side_ctrlShape5.overrideColor', 13)
            cmds.setAttr('R_lip_lower_side_ctrlShape6.overrideColor', 13)
            cmds.select('L_lip_lower_side_Ctrl_grp')
            cmds.select('R_lip_lower_side_Ctrl_grp', add=True)
            cmds.parent(w=True)
            cmds.pointConstraint('System_R_lip_lower_side_jnt', 'R_lip_lower_side_Ctrl_grp')
            cmds.delete('R_lip_lower_side_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_lower_side_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup', 'R_SymGroup')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_lower_side_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_lower_side_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_lower_side_FK_Ctrl_grp')
            cmds.select('R_lip_lower_side_FK_Ctrl_grp', add=True)
            cmds.parent(w=True)
            cmds.pointConstraint('System_R_lip_lower_side_jnt', 'R_lip_lower_side_FK_Ctrl_grp')
            cmds.delete('R_lip_lower_side_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_lower_side_FK_Ctrl_grp', apply=True, t=True)
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.delete('L_SymGroup', 'R_SymGroup')
                cmds.group(em=True, n='L_SymGroup')
                cmds.parent('L_lip_lower_outer_Ctrl_grp', 'L_SymGroup')
                cmds.duplicate('L_SymGroup', n='R_SymGroup')
                cmds.setAttr('R_SymGroup.scaleX', -1)
                cmds.select('R_SymGroup', hi=True)
                mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
                cmds.setAttr('R_lip_lower_outer_ctrlShape.overrideColor', 13)
                cmds.select('L_lip_lower_outer_Ctrl_grp')
                cmds.select('R_lip_lower_outer_Ctrl_grp', add=True)
                cmds.parent(w=True)
                cmds.pointConstraint('System_R_lip_lower_outer_jnt', 'R_lip_lower_outer_Ctrl_grp')
                cmds.delete('R_lip_lower_outer_Ctrl_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_lower_outer_Ctrl_grp', apply=True, t=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            A = cmds.getAttr('System_L_lip_lower_side_02_jnt.translateX')
            B = cmds.getAttr('System_L_lip_lower_side_jnt.translateX')
            cmds.setAttr('L_lip_lower_side_Ctrl_grp.translateX', (A - B) / 2)
            A = cmds.getAttr('System_L_lip_lower_side_02_jnt.translateY')
            B = cmds.getAttr('System_L_lip_lower_side_jnt.translateY')
            cmds.setAttr('L_lip_lower_side_Ctrl_grp.translateY', (A - B) / 2)
            cmds.makeIdentity('L_lip_lower_side_Ctrl_grp', apply=True, t=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_lip_lower_side_02_FK_ctrl')
            cmds.pointConstraint('System_L_lip_lower_side_02_jnt', 'L_lip_lower_side_02_FK_ctrl')
            cmds.delete('L_lip_lower_side_02_FK_ctrl_pointConstraint1')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_lower_side_02_FK_ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, -0.15 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_lower_side_02_FK_ctrl.cv[0:2]', r=True)
            cmds.move(0 * self.ctrl_scale, -0.07 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_lower_side_02_FK_ctrl.cv[1]', r=True)
            cmds.group('L_lip_lower_side_02_FK_ctrl', n='L_lip_lower_side_02_FK_Ctrl_grp')
            cmds.setAttr('L_lip_lower_side_02_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_lip_lower_side_02_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_lower_side_02_FK_ctrl')
            cmds.parent(w=True)
            cmds.pointConstraint('System_L_lip_lower_side_02_jnt', 'L_lip_lower_side_02_FK_Ctrl_grp')
            cmds.delete('L_lip_lower_side_02_FK_Ctrl_grp_pointConstraint1')
            cmds.parent('L_lip_lower_side_02_FK_ctrl', 'L_lip_lower_side_02_FK_Ctrl_grp')
            cmds.setAttr('L_lip_lower_side_02_FK_Ctrl_grp.rotateY', 17.751)
            cmds.makeIdentity('L_lip_lower_side_02_FK_Ctrl_grp', apply=True, t=True, scale=True)
            cmds.select(clear=True)
            cmds.select('L_lip_lower_side_02_FK_ctrl')
            cmds.select('L_lip_lower_side_02_FK_Ctrl_grp', add=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            A = cmds.getAttr('System_R_lip_lower_side_02_jnt.translateX')
            B = cmds.getAttr('System_R_lip_lower_side_jnt.translateX')
            cmds.setAttr('R_lip_lower_side_Ctrl_grp.translateX', (A - B) / 2)
            A = cmds.getAttr('System_R_lip_lower_side_02_jnt.translateY')
            B = cmds.getAttr('System_R_lip_lower_side_jnt.translateY')
            cmds.setAttr('R_lip_lower_side_Ctrl_grp.translateY', (A - B) / 2)
            cmds.makeIdentity('R_lip_lower_side_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup', 'R_SymGroup')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_lower_side_02_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.setAttr('R_lip_lower_side_02_FK_ctrlShape.overrideColor', 16)
            cmds.select('L_lip_lower_side_02_FK_Ctrl_grp')
            cmds.select('R_lip_lower_side_02_FK_Ctrl_grp', add=True)
            cmds.parent(w=True)
            cmds.pointConstraint('System_R_lip_lower_side_02_jnt', 'R_lip_lower_side_02_FK_Ctrl_grp')
            cmds.delete('R_lip_lower_side_02_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_lower_side_02_FK_Ctrl_grp', apply=True, t=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.group('System_L_lip_lower_side_jnt', n='System_L_lip_lower_side_jnt_grp')
            cmds.group('System_R_lip_lower_side_jnt', n='System_R_lip_lower_side_jnt_grp')
            cmds.group('L_lip_lower_side_Ctrl_grp', n='L_lower_down_lip_follow_Ctrl_grp')
            cmds.group('L_lower_down_lip_follow_Ctrl_grp', n='L_lip_lower_side_follow_Ctrl_grp')
            cmds.group('R_lip_lower_side_Ctrl_grp', n='R_lower_down_lip_follow_Ctrl_grp')
            cmds.group('R_lower_down_lip_follow_Ctrl_grp', n='R_lip_lower_side_follow_Ctrl_grp')
            cmds.parentConstraint('L_lip_lower_side_ctrl', 'System_L_lip_lower_side_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lip_lower_side_FK_ctrl', 'System_L_lip_lower_side_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_lower_down_lip_follow_grp', 'L_lower_down_lip_follow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_L_lip_lower_side_follow_grp', 'L_lip_lower_side_follow_Ctrl_grp', mo=True)
            cmds.parentConstraint('R_lip_lower_side_ctrl', 'System_R_lip_lower_side_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lip_lower_side_FK_ctrl', 'System_R_lip_lower_side_jnt_grp', mo=True)
            cmds.parentConstraint('System_R_lower_down_lip_follow_grp', 'R_lower_down_lip_follow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_lip_lower_side_follow_grp', 'R_lip_lower_side_follow_Ctrl_grp', mo=True)
            cmds.parent('L_lip_lower_side_FK_Ctrl_grp', 'L_lip_lower_side_ctrl')
            cmds.parent('R_lip_lower_side_FK_Ctrl_grp', 'R_lip_lower_side_ctrl')
            cmds.group('System_L_lip_lower_side_jnt', n='System_L_lip_lower_side_FK_grp')
            cmds.group('System_R_lip_lower_side_jnt', n='System_R_lip_lower_side_FK_grp')
            cmds.parentConstraint('L_lip_lower_side_FK_ctrl', 'System_L_lip_lower_side_FK_grp', mo=True)
            cmds.parentConstraint('R_lip_lower_side_FK_ctrl', 'System_R_lip_lower_side_FK_grp', mo=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_upper_side_02_jnt', n='System_L_lip_upper_side_02_jnt_grp')
            cmds.group('System_R_lip_upper_side_02_jnt', n='System_R_lip_upper_side_02_jnt_grp')
            cmds.group('System_L_lip_lower_side_02_jnt', n='System_L_lip_lower_side_02_jnt_grp')
            cmds.group('System_R_lip_lower_side_02_jnt', n='System_R_lip_lower_side_02_jnt_grp')
            cmds.group('System_L_lip_upper_side_02_jnt', n='L_lip_upper_side_02_jnt_ctrl_grp')
            cmds.parent('System_L_lip_upper_side_02_jnt', 'System_L_lip_upper_side_02_jnt_grp')
            cmds.parent('L_lip_upper_side_02_jnt_ctrl_grp', 'L_lip_upper_side_Ctrl_grp')
            cmds.group('System_R_lip_upper_side_02_jnt', n='R_lip_upper_side_02_jnt_ctrl_grp')
            cmds.parent('System_R_lip_upper_side_02_jnt', 'System_R_lip_upper_side_02_jnt_grp')
            cmds.parent('R_lip_upper_side_02_jnt_ctrl_grp', 'R_lip_upper_side_Ctrl_grp')
            cmds.group('System_L_lip_lower_side_02_jnt', n='L_lip_lower_side_02_jnt_ctrl_grp')
            cmds.parent('System_L_lip_lower_side_02_jnt', 'System_L_lip_lower_side_02_jnt_grp')
            cmds.parent('L_lip_lower_side_02_jnt_ctrl_grp', 'L_lip_lower_side_Ctrl_grp')
            cmds.group('System_R_lip_lower_side_02_jnt', n='R_lip_lower_side_02_jnt_ctrl_grp')
            cmds.parent('System_R_lip_lower_side_02_jnt', 'System_R_lip_lower_side_02_jnt_grp')
            cmds.parent('R_lip_lower_side_02_jnt_ctrl_grp', 'R_lip_lower_side_Ctrl_grp')
            cmds.parent('L_lip_upper_side_02_FK_Ctrl_grp', 'L_lip_upper_side_Ctrl_grp')
            cmds.parent('R_lip_upper_side_02_FK_Ctrl_grp', 'R_lip_upper_side_Ctrl_grp')
            cmds.group('System_L_lip_upper_side_02_jnt', n='System_L_lip_upper_side_02_FK_grp')
            cmds.group('System_L_lip_upper_side_02_FK_grp', n='System_L_lip_upper_side_02_scale_grp')
            cmds.group('System_R_lip_upper_side_02_jnt', n='System_R_lip_upper_side_02_FK_grp')
            cmds.group('System_R_lip_upper_side_02_FK_grp', n='System_R_lip_upper_side_02_scale_grp')
            cmds.parentConstraint('L_lip_upper_side_02_FK_ctrl', 'System_L_lip_upper_side_02_FK_grp', mo=True)
            cmds.scaleConstraint('L_lip_upper_side_02_FK_ctrl', 'System_L_lip_upper_side_02_scale_grp', mo=True)
            cmds.parentConstraint('R_lip_upper_side_02_FK_ctrl', 'System_R_lip_upper_side_02_FK_grp', mo=True)
            cmds.scaleConstraint('R_lip_upper_side_02_FK_ctrl', 'System_R_lip_upper_side_02_scale_grp', mo=True)
            cmds.parentConstraint('System_L_lip_upper_side_02_jnt_grp', 'L_lip_upper_side_02_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_lip_upper_side_02_jnt_grp', 'R_lip_upper_side_02_FK_Ctrl_grp', mo=True)
            cmds.parent('L_lip_lower_side_02_FK_Ctrl_grp', 'L_lip_lower_side_Ctrl_grp')
            cmds.parent('R_lip_lower_side_02_FK_Ctrl_grp', 'R_lip_lower_side_Ctrl_grp')
            cmds.group('System_L_lip_lower_side_02_jnt', n='System_L_lip_lower_side_02_FK_grp')
            cmds.group('System_L_lip_lower_side_02_FK_grp', n='System_L_lip_lower_side_02_scale_grp')
            cmds.group('System_R_lip_lower_side_02_jnt', n='System_R_lip_lower_side_02_FK_grp')
            cmds.group('System_R_lip_lower_side_02_FK_grp', n='System_R_lip_lower_side_02_scale_grp')
            cmds.parentConstraint('L_lip_lower_side_02_FK_ctrl', 'System_L_lip_lower_side_02_FK_grp', mo=True)
            cmds.scaleConstraint('L_lip_lower_side_02_FK_ctrl', 'System_L_lip_lower_side_02_scale_grp', mo=True)
            cmds.parentConstraint('R_lip_lower_side_02_FK_ctrl', 'System_R_lip_lower_side_02_FK_grp', mo=True)
            cmds.scaleConstraint('R_lip_lower_side_02_FK_ctrl', 'System_R_lip_lower_side_02_scale_grp', mo=True)
            cmds.parentConstraint('System_L_lip_lower_side_02_jnt_grp', 'L_lip_lower_side_02_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_lip_lower_side_02_jnt_grp', 'R_lip_lower_side_02_FK_Ctrl_grp', mo=True)
            cmds.expression(
                s='\n//Side_02 01 Follow' + '\nSystem_L_lip_upper_side_02_jnt_grp.translateX = L_lip_upper_side_02_jnt_ctrl_grp.translateX/2;' + '\nSystem_L_lip_upper_side_02_jnt_grp.translateY = L_lip_upper_side_02_jnt_ctrl_grp.translateY/2;' + '\nSystem_L_lip_upper_side_02_jnt_grp.translateZ = L_lip_upper_side_02_jnt_ctrl_grp.translateZ/2;' + '\nSystem_L_lip_upper_side_02_jnt_grp.rotateX = L_lip_upper_side_02_jnt_ctrl_grp.rotateX/2;' + '\nSystem_L_lip_upper_side_02_jnt_grp.rotateY = L_lip_upper_side_02_jnt_ctrl_grp.rotateY/2;' + '\nSystem_L_lip_upper_side_02_jnt_grp.rotateZ = L_lip_upper_side_02_jnt_ctrl_grp.rotateZ/2;' + '\nSystem_R_lip_upper_side_02_jnt_grp.translateX = -R_lip_upper_side_02_jnt_ctrl_grp.translateX/2;' + '\nSystem_R_lip_upper_side_02_jnt_grp.translateY = R_lip_upper_side_02_jnt_ctrl_grp.translateY/2;' + '\nSystem_R_lip_upper_side_02_jnt_grp.translateZ = R_lip_upper_side_02_jnt_ctrl_grp.translateZ/2;' + '\nSystem_R_lip_upper_side_02_jnt_grp.rotateX = R_lip_upper_side_02_jnt_ctrl_grp.rotateX/2;' + '\nSystem_R_lip_upper_side_02_jnt_grp.rotateY = -R_lip_upper_side_02_jnt_ctrl_grp.rotateY/2;' + '\nSystem_R_lip_upper_side_02_jnt_grp.rotateZ = -R_lip_upper_side_02_jnt_ctrl_grp.rotateZ/2;' + '\nSystem_L_lip_lower_side_02_jnt_grp.translateX = L_lip_lower_side_02_jnt_ctrl_grp.translateX/2;' + '\nSystem_L_lip_lower_side_02_jnt_grp.translateY = L_lip_lower_side_02_jnt_ctrl_grp.translateY/2;' + '\nSystem_L_lip_lower_side_02_jnt_grp.translateZ = L_lip_lower_side_02_jnt_ctrl_grp.translateZ/2;' + '\nSystem_L_lip_lower_side_02_jnt_grp.rotateX = L_lip_lower_side_02_jnt_ctrl_grp.rotateX/2;' + '\nSystem_L_lip_lower_side_02_jnt_grp.rotateY = L_lip_lower_side_02_jnt_ctrl_grp.rotateY/2;' + '\nSystem_L_lip_lower_side_02_jnt_grp.rotateZ = L_lip_lower_side_02_jnt_ctrl_grp.rotateZ/2;' + '\nSystem_R_lip_lower_side_02_jnt_grp.translateX = -R_lip_lower_side_02_jnt_ctrl_grp.translateX/2;' + '\nSystem_R_lip_lower_side_02_jnt_grp.translateY = R_lip_lower_side_02_jnt_ctrl_grp.translateY/2;' + '\nSystem_R_lip_lower_side_02_jnt_grp.translateZ = R_lip_lower_side_02_jnt_ctrl_grp.translateZ/2;' + '\nSystem_R_lip_lower_side_02_jnt_grp.rotateX = R_lip_lower_side_02_jnt_ctrl_grp.rotateX/2;' + '\nSystem_R_lip_lower_side_02_jnt_grp.rotateY = -R_lip_lower_side_02_jnt_ctrl_grp.rotateY/2;' + '\nSystem_R_lip_lower_side_02_jnt_grp.rotateZ = -R_lip_lower_side_02_jnt_ctrl_grp.rotateZ/2;',
                ae=1, uc=all, alwaysEvaluate=0, n='U_D_Side_02_expression')
            cmds.expression(
                s='\nL_lip_upper_side_02_jnt_ctrl_grp.translateX = L_lip_upper_side_ctrl.translateX;' + '\nL_lip_upper_side_02_jnt_ctrl_grp.translateY = L_lip_upper_side_ctrl.translateY;' + '\nL_lip_upper_side_02_jnt_ctrl_grp.translateZ = L_lip_upper_side_ctrl.translateZ;' + '\nL_lip_upper_side_02_jnt_ctrl_grp.rotateX = L_lip_upper_side_ctrl.rotateX;' + '\nL_lip_upper_side_02_jnt_ctrl_grp.rotateY = L_lip_upper_side_ctrl.rotateY;' + '\nL_lip_upper_side_02_jnt_ctrl_grp.rotateZ = L_lip_upper_side_ctrl.rotateZ;' + '\nR_lip_upper_side_02_jnt_ctrl_grp.translateX = R_lip_upper_side_ctrl.translateX;' + '\nR_lip_upper_side_02_jnt_ctrl_grp.translateY = R_lip_upper_side_ctrl.translateY;' + '\nR_lip_upper_side_02_jnt_ctrl_grp.translateZ = R_lip_upper_side_ctrl.translateZ;' + '\nR_lip_upper_side_02_jnt_ctrl_grp.rotateX = R_lip_upper_side_ctrl.rotateX;' + '\nR_lip_upper_side_02_jnt_ctrl_grp.rotateY = R_lip_upper_side_ctrl.rotateY;' + '\nR_lip_upper_side_02_jnt_ctrl_grp.rotateZ = R_lip_upper_side_ctrl.rotateZ;' + '\nL_lip_lower_side_02_jnt_ctrl_grp.translateX = L_lip_lower_side_ctrl.translateX;' + '\nL_lip_lower_side_02_jnt_ctrl_grp.translateY = L_lip_lower_side_ctrl.translateY;' + '\nL_lip_lower_side_02_jnt_ctrl_grp.translateZ = L_lip_lower_side_ctrl.translateZ;' + '\nL_lip_lower_side_02_jnt_ctrl_grp.rotateX = L_lip_lower_side_ctrl.rotateX;' + '\nL_lip_lower_side_02_jnt_ctrl_grp.rotateY = L_lip_lower_side_ctrl.rotateY;' + '\nL_lip_lower_side_02_jnt_ctrl_grp.rotateZ = L_lip_lower_side_ctrl.rotateZ;' + '\nR_lip_lower_side_02_jnt_ctrl_grp.translateX = R_lip_lower_side_ctrl.translateX;' + '\nR_lip_lower_side_02_jnt_ctrl_grp.translateY = R_lip_lower_side_ctrl.translateY;' + '\nR_lip_lower_side_02_jnt_ctrl_grp.translateZ = R_lip_lower_side_ctrl.translateZ;' + '\nR_lip_lower_side_02_jnt_ctrl_grp.rotateX = R_lip_lower_side_ctrl.rotateX;' + '\nR_lip_lower_side_02_jnt_ctrl_grp.rotateY = R_lip_lower_side_ctrl.rotateY;' + '\nR_lip_lower_side_02_jnt_ctrl_grp.rotateZ = R_lip_lower_side_ctrl.rotateZ;',
                ae=1, uc=all, alwaysEvaluate=0, n='Side_02_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Side Lip Follow' + '\nSystem_L_side_up_lip_follow_grp.translateX = L_lip_upper_side_ctrl.translateX/2.3;' + '\nSystem_L_side_up_lip_follow_grp.translateY = L_lip_upper_side_ctrl.translateY/2.3;' + '\nSystem_L_side_up_lip_follow_grp.translateZ = L_lip_upper_side_ctrl.translateZ/2.3;' + '\nSystem_R_side_up_lip_follow_grp.translateX = -R_lip_upper_side_ctrl.translateX/2.3;' + '\nSystem_R_side_up_lip_follow_grp.translateY = R_lip_upper_side_ctrl.translateY/2.3;' + '\nSystem_R_side_up_lip_follow_grp.translateZ = R_lip_upper_side_ctrl.translateZ/2.3;\n' + '\nSystem_L_side_down_lip_follow_grp.translateX = L_lip_lower_side_ctrl.translateX/2.3;' + '\nSystem_L_side_down_lip_follow_grp.translateY = L_lip_lower_side_ctrl.translateY/2.3;' + '\nSystem_L_side_down_lip_follow_grp.translateZ = L_lip_lower_side_ctrl.translateZ/2.3;' + '\nSystem_R_side_down_lip_follow_grp.translateX = -R_lip_lower_side_ctrl.translateX/2.3;' + '\nSystem_R_side_down_lip_follow_grp.translateY = R_lip_lower_side_ctrl.translateY/2.3;' + '\nSystem_R_side_down_lip_follow_grp.translateZ = R_lip_lower_side_ctrl.translateZ/2.3;',
                ae=1, uc=all, alwaysEvaluate=0, n='Side_Lip_expression')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            self.create_cube_control(13)
            cmds.scale(0.4 * self.ctrl_scale, 0.4 * self.ctrl_scale, 0.4 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lip_corner_up_Ctrl')
            cmds.pointConstraint('System_L_lip_corner_jnt', 'L_lip_corner_up_Ctrl')
            cmds.delete('L_lip_corner_up_Ctrl_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_up_Ctrl', apply=True, t=True, r=True, scale=True)
            cmds.select('L_lip_corner_up_CtrlShape3.cv[0:1]', 'L_lip_corner_up_CtrlShape2.cv[0:1]', 'L_lip_corner_up_CtrlShape1.cv[0:1]', 'L_lip_corner_up_CtrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select('L_lip_corner_up_CtrlShape3.cv[0]', 'L_lip_corner_up_CtrlShape1.cv[0:1]', 'L_lip_corner_up_CtrlShape.cv[3:5]', 'L_lip_corner_up_CtrlShape.cv[8:9]')
            cmds.move(0 * self.ctrl_scale, 0.2 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_lip_corner_up_Ctrl')
            cmds.group(em=True, n='L_lip_corner_up_Ctrl_grp')
            cmds.pointConstraint('System_L_lip_corner_jnt', 'L_lip_corner_up_Ctrl_grp')
            cmds.delete('L_lip_corner_up_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_up_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_lip_corner_up_Ctrl', 'L_lip_corner_up_Ctrl_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_lip_corner_up_FK_Ctrl')
            cmds.pointConstraint('System_L_lip_corner_jnt', 'L_lip_corner_up_FK_Ctrl')
            cmds.delete('L_lip_corner_up_FK_Ctrl_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_up_FK_Ctrl', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_corner_up_FK_Ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.17 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_corner_up_FK_Ctrl.cv[4:6]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.06 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_corner_up_FK_Ctrl.cv[5]', r=True)
            cmds.select(clear=True)
            cmds.select('L_lip_corner_up_FK_Ctrl')
            cmds.setAttr('L_lip_corner_up_FK_CtrlShape.overrideEnabled', 1)
            cmds.setAttr('L_lip_corner_up_FK_CtrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_lip_corner_up_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_lip_corner_jnt', 'L_lip_corner_up_FK_Ctrl_grp')
            cmds.delete('L_lip_corner_up_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_up_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_lip_corner_up_FK_Ctrl', 'L_lip_corner_up_FK_Ctrl_grp')
            self.create_cube_control(13)
            cmds.scale(0.4 * self.ctrl_scale, 0.4 * self.ctrl_scale, 0.4 * self.ctrl_scale, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lip_corner_down_Ctrl')
            cmds.group('L_lip_corner_down_Ctrl', n='L_lip_corner_down_Ctrl_grp')
            cmds.pointConstraint('System_L_lip_lower_corner_jnt', 'L_lip_corner_down_Ctrl_grp')
            cmds.delete('L_lip_corner_down_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_down_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_lip_corner_down_CtrlShape3.cv[0:1]', 'L_lip_corner_down_CtrlShape2.cv[0:1]', 'L_lip_corner_down_CtrlShape1.cv[0:1]', 'L_lip_corner_down_CtrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select('L_lip_corner_down_CtrlShape3.cv[1]', 'L_lip_corner_down_CtrlShape.cv[0:2]', 'L_lip_corner_down_CtrlShape.cv[6:7]', 'L_lip_corner_down_CtrlShape2.cv[0:1]')
            cmds.move(0 * self.ctrl_scale, -0.2 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.select('L_lip_corner_down_Ctrl', 'L_lip_corner_down_Ctrl_grp', add=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_lip_corner_down_FK_Ctrl')
            cmds.group('L_lip_corner_down_FK_Ctrl', n='L_lip_corner_down_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_lip_lower_corner_jnt', 'L_lip_corner_down_FK_Ctrl_grp')
            cmds.delete('L_lip_corner_down_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_down_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_lip_corner_down_FK_Ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, -0.17 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_corner_down_FK_Ctrl.cv[0:2]', r=True)
            cmds.move(0 * self.ctrl_scale, -0.06 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_lip_corner_down_FK_Ctrl.cv[1]', r=True)
            cmds.select('L_lip_corner_down_FK_Ctrl', 'L_lip_corner_down_FK_Ctrl_grp', add=True)
            cmds.setAttr('L_lip_corner_down_FK_CtrlShape.overrideEnabled', 1)
            cmds.setAttr('L_lip_corner_down_FK_CtrlShape.overrideColor', 16)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_corner_up_Ctrl_grp', 'L_lip_corner_down_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_lip_corner_up_Ctrl_grp', 'L_lip_corner_down_Ctrl_grp', w=True)
            cmds.parent('R_lip_corner_up_Ctrl_grp', 'R_lip_corner_down_Ctrl_grp', w=True)
            cmds.pointConstraint('System_R_lip_corner_jnt', 'R_lip_corner_up_Ctrl_grp')
            cmds.pointConstraint('System_R_lip_lower_corner_jnt', 'R_lip_corner_down_Ctrl_grp')
            cmds.delete('R_lip_corner_up_Ctrl_grp_pointConstraint1')
            cmds.delete('R_lip_corner_down_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_corner_up_Ctrl_grp', apply=True, t=True)
            cmds.makeIdentity('R_lip_corner_down_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_corner_up_FK_Ctrl_grp', 'L_lip_corner_down_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_lip_corner_up_FK_Ctrl_grp', 'L_lip_corner_down_FK_Ctrl_grp', w=True)
            cmds.parent('R_lip_corner_up_FK_Ctrl_grp', 'R_lip_corner_down_FK_Ctrl_grp', w=True)
            cmds.pointConstraint('System_R_lip_corner_jnt', 'R_lip_corner_up_FK_Ctrl_grp')
            cmds.pointConstraint('System_R_lip_lower_corner_jnt', 'R_lip_corner_down_FK_Ctrl_grp')
            cmds.delete('R_lip_corner_up_FK_Ctrl_grp_pointConstraint1')
            cmds.delete('R_lip_corner_down_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_corner_up_FK_Ctrl_grp', apply=True, t=True)
            cmds.makeIdentity('R_lip_corner_down_FK_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lip_corner_up_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_lip_corner_up_Ctrl_grp', w=True)
            cmds.parent('R_lip_corner_up_Ctrl_grp', w=True)
            cmds.pointConstraint('System_R_lip_corner_jnt', 'R_lip_corner_up_Ctrl_grp')
            cmds.delete('R_lip_corner_up_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_corner_up_Ctrl_grp', apply=True, t=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parent('L_lip_corner_up_Ctrl_grp', 'L_lip_corner_down_Ctrl_grp', 'L_lip_corner_Ctrl')
            cmds.parent('R_lip_corner_up_Ctrl_grp', 'R_lip_corner_down_Ctrl_grp', 'R_lip_corner_Ctrl')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.parent('L_lip_corner_up_Ctrl_grp', 'L_lip_corner_Ctrl')
            cmds.parent('R_lip_corner_up_Ctrl_grp', 'R_lip_corner_Ctrl')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_corner_jnt', n='System_L_lip_up_corner_jnt_grp')
            cmds.group('System_L_lip_lower_corner_jnt', n='System_L_lip_down_corner_jnt_grp')
            cmds.parentConstraint('L_lip_corner_up_Ctrl', 'System_L_lip_up_corner_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lip_corner_up_FK_Ctrl', 'System_L_lip_up_corner_jnt_grp', mo=True)
            cmds.parentConstraint('L_lip_corner_down_Ctrl', 'System_L_lip_down_corner_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lip_corner_down_FK_Ctrl', 'System_L_lip_down_corner_jnt_grp', mo=True)
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_corner_jnt', n='System_L_lip_up_corner_jnt_grp')
            cmds.parentConstraint('L_lip_corner_up_Ctrl', 'System_L_lip_up_corner_jnt_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parent('System_L_lip_corner_jnt', 'L_lip_upper_corner_up_ctrl_grp')
            cmds.select('L_lip_upper_corner_up_ctrl_grp')
            cmds.xform(cp=True)
            cmds.parent('System_L_lip_corner_jnt', 'System_L_lip_up_corner_jnt_grp')
            cmds.parent('L_lip_upper_corner_up_ctrl_grp', 'L_lip_corner_up_Ctrl_grp')
            cmds.makeIdentity('L_lip_upper_corner_up_ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('L_lip_corner_up_Ctrl', 'L_lip_upper_corner_up_ctrl_grp', mo=True)
            cmds.parent('System_L_lip_lower_corner_jnt', 'L_lip_lower_corner_down_ctrl_grp')
            cmds.select('L_lip_lower_corner_down_ctrl_grp')
            cmds.xform(cp=True)
            cmds.parent('System_L_lip_lower_corner_jnt', 'System_L_lip_down_corner_jnt_grp')
            cmds.parent('L_lip_lower_corner_down_ctrl_grp', 'L_lip_corner_down_Ctrl_grp')
            cmds.makeIdentity('L_lip_lower_corner_down_ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('L_lip_corner_down_Ctrl', 'L_lip_lower_corner_down_ctrl_grp', mo=True)
            cmds.group('System_R_lip_corner_jnt', n='System_R_lip_up_corner_jnt_grp')
            cmds.group('System_R_lip_lower_corner_jnt', n='System_R_lip_down_corner_jnt_grp')
            cmds.parentConstraint('R_lip_corner_up_Ctrl', 'System_R_lip_up_corner_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lip_corner_up_FK_Ctrl', 'System_R_lip_up_corner_jnt_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_down_Ctrl', 'System_R_lip_down_corner_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lip_corner_down_FK_Ctrl', 'System_R_lip_down_corner_jnt_grp', mo=True)
            cmds.parent('System_R_lip_corner_jnt', 'R_lip_upper_corner_up_ctrl_grp')
            cmds.select('R_lip_upper_corner_up_ctrl_grp')
            cmds.xform(cp=True)
            cmds.parent('System_R_lip_corner_jnt', 'System_R_lip_up_corner_jnt_grp')
            cmds.parent('R_lip_upper_corner_up_ctrl_grp', 'R_lip_corner_up_Ctrl_grp')
            cmds.makeIdentity('R_lip_upper_corner_up_ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('R_lip_corner_up_Ctrl', 'R_lip_upper_corner_up_ctrl_grp', mo=True)
            cmds.parent('System_R_lip_lower_corner_jnt', 'R_lip_lower_corner_down_ctrl_grp')
            cmds.select('R_lip_lower_corner_down_ctrl_grp')
            cmds.xform(cp=True)
            cmds.parent('System_R_lip_lower_corner_jnt', 'System_R_lip_down_corner_jnt_grp')
            cmds.parent('R_lip_lower_corner_down_ctrl_grp', 'R_lip_corner_down_Ctrl_grp')
            cmds.makeIdentity('R_lip_lower_corner_down_ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('R_lip_corner_down_Ctrl', 'R_lip_lower_corner_down_ctrl_grp', mo=True)
            cmds.parent('L_lip_corner_up_FK_Ctrl_grp', 'L_lip_corner_up_Ctrl')
            cmds.parent('R_lip_corner_up_FK_Ctrl_grp', 'R_lip_corner_up_Ctrl')
            cmds.group('System_L_lip_corner_jnt', n='System_L_lip_corner_FK_grp')
            cmds.group('System_R_lip_corner_jnt', n='System_R_lip_corner_FK_grp')
            cmds.parentConstraint('L_lip_corner_up_FK_Ctrl', 'System_L_lip_corner_FK_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_up_FK_Ctrl', 'System_R_lip_corner_FK_grp', mo=True)
            cmds.parent('L_lip_corner_down_FK_Ctrl_grp', 'L_lip_corner_down_Ctrl')
            cmds.parent('R_lip_corner_down_FK_Ctrl_grp', 'R_lip_corner_down_Ctrl')
            cmds.group('System_L_lip_lower_corner_jnt', n='System_L_lip_lower_corner_FK_grp')
            cmds.group('System_R_lip_lower_corner_jnt', n='System_R_lip_lower_corner_FK_grp')
            cmds.parentConstraint('L_lip_corner_down_FK_Ctrl', 'System_L_lip_lower_corner_FK_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_down_FK_Ctrl', 'System_R_lip_lower_corner_FK_grp', mo=True)
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('System_R_lip_corner_jnt', n='System_R_lip_up_corner_jnt_grp')
            cmds.parentConstraint('R_lip_corner_up_Ctrl', 'System_R_lip_up_corner_jnt_grp', mo=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale, n='Upper_lip_Master_ctrl')
            cmds.pointConstraint('System_upper_lip_jnt', 'Upper_lip_Master_ctrl')
            cmds.delete('Upper_lip_Master_ctrl_pointConstraint1')
            cmds.setAttr('Upper_lip_Master_ctrl.scaleY', 0.4)
            cmds.setAttr('Upper_lip_Master_ctrl.scaleX', 1.6)
            cmds.makeIdentity('Upper_lip_Master_ctrl', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0.13 * self.ctrl_scale, 1.3 * self.ctrl_scale, 'Upper_lip_Master_ctrl.cv[0:7]', r=True)
            cmds.select('Upper_lip_Master_ctrl.cv[6]', 'Upper_lip_Master_ctrl.cv[4]', add=True)
            cmds.scale(0.17, 1, 1, r=True)
            cmds.select(clear=True)
            cmds.setAttr('Upper_lip_Master_ctrl.scaleX', 1)
            cmds.select('Upper_lip_Master_ctrl.cv[3]', 'Upper_lip_Master_ctrl.cv[7]', add=True)
            cmds.move(0 * self.ctrl_scale, 0.3 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.move(0 * self.ctrl_scale, -0.13 * self.ctrl_scale, 0 * self.ctrl_scale, 'Upper_lip_Master_ctrl.cv[1]', r=True)
            cmds.select(clear=True)
            cmds.select('Upper_lip_Master_ctrl')
            cmds.setAttr('Upper_lip_Master_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('Upper_lip_Master_ctrlShape.overrideColor', 31)
            cmds.group('Upper_lip_Master_ctrl', n='Upper_lip_Master_Ctrl_grp')
            cmds.parentConstraint('Upper_lip_Master_ctrl', 'Upper_lip_master_follow_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('Upper_lip_Master_ctrl', 'L_upper_lip_master_follow_grp', mo=True)
            cmds.parentConstraint('Upper_lip_Master_ctrl', 'R_upper_lip_master_follow_grp', mo=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('Upper_lip_Master_ctrl', 'L_upper_02_lip_master_follow_grp', mo=True)
            cmds.parentConstraint('Upper_lip_Master_ctrl', 'R_upper_02_lip_master_follow_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('L_lip_corner_up_Ctrl', n='L_lip_corner_up_master_follow_grp')
            cmds.group('L_lip_corner_down_Ctrl', n='L_lip_corner_down_master_follow_grp')
            cmds.group('R_lip_corner_up_Ctrl', n='R_lip_corner_up_master_follow_grp')
            cmds.group('R_lip_corner_down_Ctrl', n='R_lip_corner_down_master_follow_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.group('L_lip_corner_up_Ctrl', n='L_lip_corner_up_master_follow_grp')
            cmds.group('R_lip_corner_up_Ctrl', n='R_lip_corner_up_master_follow_grp')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.duplicate('Upper_lip_Master_ctrl', n='Lower_lip_Master_ctrl')
            cmds.parent('Lower_lip_Master_ctrl', w=True)
            cmds.setAttr('Lower_lip_Master_ctrl.scaleY', -1)
            cmds.pointConstraint('System_Lower_lip_jnt', 'Lower_lip_Master_ctrl')
            cmds.delete('Lower_lip_Master_ctrl_pointConstraint1')
            cmds.makeIdentity('Lower_lip_Master_ctrl', apply=True, t=True, r=True, scale=True)
            cmds.group(em=True, n='Lower_lip_Master_Ctrl_grp')
            cmds.pointConstraint('System_Jaw_master_jnt', 'Lower_lip_Master_Ctrl_grp')
            cmds.delete('Lower_lip_Master_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('Lower_lip_Master_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('Lower_lip_Master_ctrl', 'Lower_lip_Master_Ctrl_grp')
            cmds.group('Jaw_Master_Ctrl', n='jaw_master_follow_ctrl_grp')
            cmds.parent('Jaw_Master_Ctrl', 'Jaw_Master_Ctrl_grp')
            cmds.parentConstraint('jaw_master_follow_ctrl_grp', 'Lower_lip_Master_Ctrl_grp', mo=True)
            cmds.parentConstraint('Jaw_Master_Ctrl', 'jaw_master_follow_ctrl_grp', mo=True)
            cmds.parentConstraint('Lower_lip_Master_ctrl', 'Lower_lip_master_follow_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('Lower_lip_Master_ctrl', 'L_lower_lip_master_follow_grp', mo=True)
            cmds.parentConstraint('Lower_lip_Master_ctrl', 'R_lower_lip_master_follow_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'Upper_lip_Master_Ctrl_grp', mo=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('Lower_lip_Master_ctrl', 'L_lower_02_lip_master_follow_grp', mo=True)
            cmds.parentConstraint('Lower_lip_Master_ctrl', 'R_lower_02_lip_master_follow_grp', mo=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parent('Lip_upper_jaw_follow_ctrl_grp', 'Jaw_Master_Ctrl_grp')
            cmds.parentConstraint('Jaw_Master_Ctrl', 'Lip_upper_jaw_follow_ctrl_grp')
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 1.7, n='Lip_Master_ctrl')
            cmds.pointConstraint('System_upper_lip_jnt', 'Lip_Master_ctrl')
            cmds.delete('Lip_Master_ctrl_pointConstraint1')
            cmds.setAttr('Lip_Master_ctrl.scaleX', 1.6)
            cmds.makeIdentity('Lip_Master_ctrl', apply=True, t=True, r=True, scale=True)
            A = cmds.getAttr('System_upper_lip_jnt.translateY')
            B = cmds.getAttr('System_Lower_lip_jnt.translateY')
            cmds.move(0 * self.ctrl_scale, -(A - B) / 2, 1.45 * self.ctrl_scale, 'Lip_Master_ctrl.cv[0:7]', r=True)
            cmds.select('Lip_Master_ctrl.cv[2]', 'Lip_Master_ctrl.cv[0]', add=True)
            cmds.move(0 * self.ctrl_scale, -1.3 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('Lip_Master_ctrl.cv[4]', 'Lip_Master_ctrl.cv[6]', add=True)
            cmds.move(0 * self.ctrl_scale, 1.3 * self.ctrl_scale, 0 * self.ctrl_scale, r=True)
            cmds.setAttr('Lip_Master_ctrl.translateY', 0)
            cmds.select(clear=True)
            cmds.select('Lip_Master_ctrl')
            cmds.xform(cp=True)
            cmds.setAttr('Lip_Master_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('Lip_Master_ctrlShape.overrideColor', 31)
            cmds.group('Lower_lip_Master_ctrl', n='Lower_lip_follow_grp')
            cmds.group('Upper_lip_Master_ctrl', n='Upper_lip_follow_grp')
            cmds.group('System_L_lip_up_down_corner_grp', n='L_lip_follow_grp')
            cmds.group('System_R_lip_up_down_corner_grp', n='R_lip_follow_grp')
            cmds.group('Lip_Master_ctrl', n='Lip_Master_jaw_follow_ctrl_grp')
            cmds.group('Lip_Master_ctrl', n='Lip_master_follow_ctrl_grp')
            cmds.parent('Lip_Master_ctrl', 'Lip_Master_jaw_follow_ctrl_grp')
            cmds.group('Lip_Master_ctrl', n='Lip_Master_Ctrl_grp')
            cmds.parent('Lip_Master_ctrl', 'Lip_Master_jaw_follow_ctrl_grp')
            cmds.parent('Lip_Master_Ctrl_grp', w=True)
            cmds.parent('Lip_Master_jaw_follow_ctrl_grp', 'Lip_Master_Ctrl_grp')
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.scaleConstraint('Lip_Master_ctrl', 'Upper_lip_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'Lower_lip_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'L_lip_corner_up_FK_Ctrl', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'R_lip_corner_up_FK_Ctrl', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'L_lip_corner_down_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'R_lip_corner_down_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'L_lip_upper_side_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'R_lip_upper_side_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'L_lip_lower_side_FK_Ctrl_grp', mo=True)
                cmds.scaleConstraint('Lip_Master_ctrl', 'R_lip_lower_side_FK_Ctrl_grp', mo=True)
                if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                    cmds.scaleConstraint('Lip_Master_ctrl', 'L_lip_upper_side_02_FK_Ctrl_grp', mo=True)
                    cmds.scaleConstraint('Lip_Master_ctrl', 'L_lip_lower_side_02_FK_Ctrl_grp', mo=True)
                    cmds.scaleConstraint('Lip_Master_ctrl', 'R_lip_upper_side_02_FK_Ctrl_grp', mo=True)
                    cmds.scaleConstraint('Lip_Master_ctrl', 'R_lip_lower_side_02_FK_Ctrl_grp', mo=True)
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lip Master Follow' + '\nUpper_lip_follow_grp.translateX = Lip_master_follow_ctrl_grp.translateX;' + '\nUpper_lip_follow_grp.translateY = Lip_master_follow_ctrl_grp.translateY;' + '\nUpper_lip_follow_grp.translateZ = Lip_master_follow_ctrl_grp.translateZ;' + '\nLower_lip_follow_grp.translateX = Lip_master_follow_ctrl_grp.translateX;' + '\nLower_lip_follow_grp.translateY = Lip_master_follow_ctrl_grp.translateY;' + '\nLower_lip_follow_grp.translateZ = Lip_master_follow_ctrl_grp.translateZ;' + '\nL_lip_follow_grp.translateX = Lip_master_follow_ctrl_grp.translateX;' + '\nL_lip_follow_grp.translateY = Lip_master_follow_ctrl_grp.translateY;' + '\nL_lip_follow_grp.translateZ = Lip_master_follow_ctrl_grp.translateZ;' + '\nR_lip_follow_grp.translateX = Lip_master_follow_ctrl_grp.translateX;' + '\nR_lip_follow_grp.translateY = Lip_master_follow_ctrl_grp.translateY;' + '\nR_lip_follow_grp.translateZ = Lip_master_follow_ctrl_grp.translateZ;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_Master_expression')
        if 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip Master Ctrl Follow' + '\nLip_Master_jaw_follow_ctrl_grp.translateX = System_Jaw_master_jnt_grp.translateX/2;' + '\nLip_Master_jaw_follow_ctrl_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15*$sumXYZ+System_Jaw_master_jnt_grp.translateY/2;' + '\nLip_Master_jaw_follow_ctrl_grp.translateZ = System_Jaw_master_jnt_grp.translateZ/2;' + '\nLip_Master_jaw_follow_ctrl_grp.rotateX = System_Jaw_master_jnt_grp.rotateX/2;' + '\nLip_Master_jaw_follow_ctrl_grp.rotateY = System_Jaw_master_jnt_grp.rotateY/2;' + '\nLip_Master_jaw_follow_ctrl_grp.rotateZ = System_Jaw_master_jnt_grp.rotateZ/2;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_Master_Jaw_Ctrl_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip corner up_down Jaw follow' + '\nL_lip_corner_up_Ctrl_grp.translateY = System_Jaw_master_jnt_grp.rotateX*0.02*$sumXYZ;' + '\nL_lip_corner_down_Ctrl_grp.translateY = -System_Jaw_master_jnt_grp.rotateX*0.02*$sumXYZ;' + '\nR_lip_corner_up_Ctrl_grp.translateY = System_Jaw_master_jnt_grp.rotateX*0.02*$sumXYZ;' + '\nR_lip_corner_down_Ctrl_grp.translateY = -System_Jaw_master_jnt_grp.rotateX*0.02*$sumXYZ;' + '\n//Lip Master Ctrl Follow' + '\nLip_Master_jaw_follow_ctrl_grp.translateX = System_Jaw_master_jnt_grp.translateX/2;' + '\nLip_Master_jaw_follow_ctrl_grp.translateY =-System_Jaw_master_jnt_grp.rotateX/15*$sumXYZ+System_Jaw_master_jnt_grp.translateY/2;' + '\nLip_Master_jaw_follow_ctrl_grp.translateZ = System_Jaw_master_jnt_grp.translateZ/2;' + '\nLip_Master_jaw_follow_ctrl_grp.rotateX = System_Jaw_master_jnt_grp.rotateX/2;' + '\nLip_Master_jaw_follow_ctrl_grp.rotateY = System_Jaw_master_jnt_grp.rotateY/2;' + '\nLip_Master_jaw_follow_ctrl_grp.rotateZ = System_Jaw_master_jnt_grp.rotateZ/2;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_Master_Jaw_Ctrl_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.addAttr('Upper_lip_ctrl', ln='lip_upper_side_rotate_follow', at='double', min=0, max=2)
            cmds.setAttr('Upper_lip_ctrl.lip_upper_side_rotate_follow', e=1, keyable=True)
            cmds.setAttr('Upper_lip_ctrl.lip_upper_side_rotate_follow', 1)
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('Upper_lip_ctrl', ln='lip_upper_side_02_rotate_follow', at='double', min=0, max=2)
                cmds.setAttr('Upper_lip_ctrl.lip_upper_side_02_rotate_follow', e=1, keyable=True)
                cmds.setAttr('Upper_lip_ctrl.lip_upper_side_02_rotate_follow', 1)
            cmds.addAttr('Lower_lip_ctrl', ln='lip_lower_side_rotate_follow', at='double', min=0, max=2)
            cmds.setAttr('Lower_lip_ctrl.lip_lower_side_rotate_follow', e=1, keyable=True)
            cmds.setAttr('Lower_lip_ctrl.lip_lower_side_rotate_follow', 1)
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('Lower_lip_ctrl', ln='lip_lower_side_02_rotate_follow', at='double', min=0, max=2)
                cmds.setAttr('Lower_lip_ctrl.lip_lower_side_02_rotate_follow', e=1, keyable=True)
                cmds.setAttr('Lower_lip_ctrl.lip_lower_side_02_rotate_follow', 1)
            cmds.addAttr('L_lip_corner_up_Ctrl', ln='lip_upper_side_rotate_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow', 1)
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('L_lip_corner_up_Ctrl', ln='lip_upper_side_02_rotate_follow', at='double', min=0, max=2)
                cmds.setAttr('L_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow', 1)
            cmds.addAttr('L_lip_corner_down_Ctrl', ln='lip_lower_side_rotate_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow', 1)
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('L_lip_corner_down_Ctrl', ln='lip_lower_side_02_rotate_follow', at='double', min=0, max=2)
                cmds.setAttr('L_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow', 1)
            cmds.addAttr('R_lip_corner_up_Ctrl', ln='lip_upper_side_rotate_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow', 1)
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('R_lip_corner_up_Ctrl', ln='lip_upper_side_02_rotate_follow', at='double', min=0, max=2)
                cmds.setAttr('R_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow', 1)
            cmds.addAttr('R_lip_corner_down_Ctrl', ln='lip_lower_side_rotate_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow', 1)
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('R_lip_corner_down_Ctrl', ln='lip_lower_side_02_rotate_follow', at='double', min=0, max=2)
                cmds.setAttr('R_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow', 1)
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Upper Lip Follow' + '\nSystem_L_upper_up_lip_follow_grp.translateX = System_upper_up_lip_follow_grp.translateX/2;' + '\nSystem_L_upper_up_lip_follow_grp.translateY = System_upper_up_lip_follow_grp.translateY/2;' + '\nSystem_L_upper_up_lip_follow_grp.translateZ = System_upper_up_lip_follow_grp.translateZ/2;' + '\nSystem_R_upper_up_lip_follow_grp.translateX = System_upper_up_lip_follow_grp.translateX/2;' + '\nSystem_R_upper_up_lip_follow_grp.translateY = System_upper_up_lip_follow_grp.translateY/2;' + '\nSystem_R_upper_up_lip_follow_grp.translateZ = System_upper_up_lip_follow_grp.translateZ/2;' + '\nSystem_L_upper_up_lip_follow_grp.rotateX = System_upper_up_lip_follow_grp.rotateX/2*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_upper_up_lip_follow_grp.rotateY = System_upper_up_lip_follow_grp.rotateY/2*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_upper_up_lip_follow_grp.rotateZ = System_upper_up_lip_follow_grp.rotateZ/2*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_upper_up_lip_follow_grp.rotateX = System_upper_up_lip_follow_grp.rotateX/2*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_upper_up_lip_follow_grp.rotateY = System_upper_up_lip_follow_grp.rotateY/2*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_upper_up_lip_follow_grp.rotateZ = System_upper_up_lip_follow_grp.rotateZ/2*(Upper_lip_ctrl.lip_upper_side_rotate_follow);\n' + '\n//Upper Side Corner Follow' + '\nSystem_L_lip_upper_corner_up_follow.translateX = L_lip_upper_corner_up_ctrl_grp.translateX/2;' + '\nSystem_L_lip_upper_corner_up_follow.translateY = L_lip_upper_corner_up_ctrl_grp.translateY/2;' + '\nSystem_L_lip_upper_corner_up_follow.translateZ = L_lip_upper_corner_up_ctrl_grp.translateZ/2;' + '\nSystem_R_lip_upper_corner_up_follow.translateX = -R_lip_upper_corner_up_ctrl_grp.translateX/2;' + '\nSystem_R_lip_upper_corner_up_follow.translateY = R_lip_upper_corner_up_ctrl_grp.translateY/2;' + '\nSystem_R_lip_upper_corner_up_follow.translateZ = R_lip_upper_corner_up_ctrl_grp.translateZ/2;' + '\nSystem_L_lip_upper_corner_up_follow.rotateX = L_lip_upper_corner_up_ctrl_grp.rotateX/2*(L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_lip_upper_corner_up_follow.rotateY = L_lip_upper_corner_up_ctrl_grp.rotateY/2*(L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_lip_upper_corner_up_follow.rotateZ = L_lip_upper_corner_up_ctrl_grp.rotateZ/2*(L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_lip_upper_corner_up_follow.rotateX = R_lip_upper_corner_up_ctrl_grp.rotateX/2*(R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_lip_upper_corner_up_follow.rotateY = -R_lip_upper_corner_up_ctrl_grp.rotateY/2*(R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_lip_upper_corner_up_follow.rotateZ = -R_lip_upper_corner_up_ctrl_grp.rotateZ/2*(R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Upper_Lip_expression')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Upper Lip Follow' + '\nSystem_L_upper_up_lip_follow_grp.translateX = System_upper_up_lip_follow_grp.translateX/1.3;' + '\nSystem_L_upper_up_lip_follow_grp.translateY = System_upper_up_lip_follow_grp.translateY/1.3;' + '\nSystem_L_upper_up_lip_follow_grp.translateZ = System_upper_up_lip_follow_grp.translateZ/1.3;' + '\nSystem_R_upper_up_lip_follow_grp.translateX = System_upper_up_lip_follow_grp.translateX/1.3;' + '\nSystem_R_upper_up_lip_follow_grp.translateY = System_upper_up_lip_follow_grp.translateY/1.3;' + '\nSystem_R_upper_up_lip_follow_grp.translateZ = System_upper_up_lip_follow_grp.translateZ/1.3;' + '\nSystem_L_upper_up_lip_follow_grp.rotateX = System_upper_up_lip_follow_grp.rotateX/1.3*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_upper_up_lip_follow_grp.rotateY = System_upper_up_lip_follow_grp.rotateY/1.3*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_upper_up_lip_follow_grp.rotateZ = System_upper_up_lip_follow_grp.rotateZ/1.3*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_upper_up_lip_follow_grp.rotateX = System_upper_up_lip_follow_grp.rotateX/1.3*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_upper_up_lip_follow_grp.rotateY = System_upper_up_lip_follow_grp.rotateY/1.3*(Upper_lip_ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_upper_up_lip_follow_grp.rotateZ = System_upper_up_lip_follow_grp.rotateZ/1.3*(Upper_lip_ctrl.lip_upper_side_rotate_follow);\n' + '\n//Upper Side Corner Follow' + '\nSystem_L_lip_upper_corner_up_follow.translateX = L_lip_upper_corner_up_ctrl_grp.translateX/2.6;' + '\nSystem_L_lip_upper_corner_up_follow.translateY = L_lip_upper_corner_up_ctrl_grp.translateY/2.6;' + '\nSystem_L_lip_upper_corner_up_follow.translateZ = L_lip_upper_corner_up_ctrl_grp.translateZ/2.6;' + '\nSystem_R_lip_upper_corner_up_follow.translateX = -R_lip_upper_corner_up_ctrl_grp.translateX/2.6;' + '\nSystem_R_lip_upper_corner_up_follow.translateY = R_lip_upper_corner_up_ctrl_grp.translateY/2.6;' + '\nSystem_R_lip_upper_corner_up_follow.translateZ = R_lip_upper_corner_up_ctrl_grp.translateZ/2.6;' + '\nSystem_L_lip_upper_corner_up_follow.rotateX = L_lip_upper_corner_up_ctrl_grp.rotateX/2.6*(L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_lip_upper_corner_up_follow.rotateY = L_lip_upper_corner_up_ctrl_grp.rotateY/2.6*(L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_L_lip_upper_corner_up_follow.rotateZ = L_lip_upper_corner_up_ctrl_grp.rotateZ/2.6*(L_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_lip_upper_corner_up_follow.rotateX = R_lip_upper_corner_up_ctrl_grp.rotateX/2.6*(R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_lip_upper_corner_up_follow.rotateY = -R_lip_upper_corner_up_ctrl_grp.rotateY/2.6*(R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\nSystem_R_lip_upper_corner_up_follow.rotateZ = -R_lip_upper_corner_up_ctrl_grp.rotateZ/2.6*(R_lip_corner_up_Ctrl.lip_upper_side_rotate_follow);' + '\n//Upper_02 Lip Follow' + '\nSystem_L_upper_02_up_lip_follow_grp.translateX = System_upper_up_lip_follow_grp.translateX/2.6;' + '\nSystem_L_upper_02_up_lip_follow_grp.translateY = System_upper_up_lip_follow_grp.translateY/2.6;' + '\nSystem_L_upper_02_up_lip_follow_grp.translateZ = System_upper_up_lip_follow_grp.translateZ/2.6;' + '\nSystem_R_upper_02_up_lip_follow_grp.translateX = System_upper_up_lip_follow_grp.translateX/2.6;' + '\nSystem_R_upper_02_up_lip_follow_grp.translateY = System_upper_up_lip_follow_grp.translateY/2.6;' + '\nSystem_R_upper_02_up_lip_follow_grp.translateZ = System_upper_up_lip_follow_grp.translateZ/2.6;' + '\nSystem_L_upper_02_up_lip_follow_grp.rotateX = System_upper_up_lip_follow_grp.rotateX/2.6*(Upper_lip_ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_L_upper_02_up_lip_follow_grp.rotateY = System_upper_up_lip_follow_grp.rotateY/2.6*(Upper_lip_ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_L_upper_02_up_lip_follow_grp.rotateZ = System_upper_up_lip_follow_grp.rotateZ/2.6*(Upper_lip_ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_R_upper_02_up_lip_follow_grp.rotateX = System_upper_up_lip_follow_grp.rotateX/2.6*(Upper_lip_ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_R_upper_02_up_lip_follow_grp.rotateY = System_upper_up_lip_follow_grp.rotateY/2.6*(Upper_lip_ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_R_upper_02_up_lip_follow_grp.rotateZ = System_upper_up_lip_follow_grp.rotateZ/2.6*(Upper_lip_ctrl.lip_upper_side_02_rotate_follow);\n' + '\n//Upper Side_02 Corner Follow' + '\nSystem_L_lip_upper_02_corner_up_follow.translateX = L_lip_upper_corner_up_ctrl_grp.translateX/1.3;' + '\nSystem_L_lip_upper_02_corner_up_follow.translateY = L_lip_upper_corner_up_ctrl_grp.translateY/1.3;' + '\nSystem_L_lip_upper_02_corner_up_follow.translateZ = L_lip_upper_corner_up_ctrl_grp.translateZ/1.3;' + '\nSystem_R_lip_upper_02_corner_up_follow.translateX = -R_lip_upper_corner_up_ctrl_grp.translateX/1.3;' + '\nSystem_R_lip_upper_02_corner_up_follow.translateY = R_lip_upper_corner_up_ctrl_grp.translateY/1.3;' + '\nSystem_R_lip_upper_02_corner_up_follow.translateZ = R_lip_upper_corner_up_ctrl_grp.translateZ/1.3;' + '\nSystem_L_lip_upper_02_corner_up_follow.rotateX = L_lip_upper_corner_up_ctrl_grp.rotateX/1.3*(L_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_L_lip_upper_02_corner_up_follow.rotateY = L_lip_upper_corner_up_ctrl_grp.rotateY/1.3*(L_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_L_lip_upper_02_corner_up_follow.rotateZ = L_lip_upper_corner_up_ctrl_grp.rotateZ/1.3*(L_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_R_lip_upper_02_corner_up_follow.rotateX = R_lip_upper_corner_up_ctrl_grp.rotateX/1.3*(R_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_R_lip_upper_02_corner_up_follow.rotateY = -R_lip_upper_corner_up_ctrl_grp.rotateY/1.3*(R_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow);' + '\nSystem_R_lip_upper_02_corner_up_follow.rotateZ = -R_lip_upper_corner_up_ctrl_grp.rotateZ/1.3*(R_lip_corner_up_Ctrl.lip_upper_side_02_rotate_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Upper_Lip_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lower Lip Follow' + '\nSystem_L_lower_down_lip_follow_grp.translateX = System_Lower_down_lip_follow_grp.translateX/2;' + '\nSystem_L_lower_down_lip_follow_grp.translateY = System_Lower_down_lip_follow_grp.translateY/2;' + '\nSystem_L_lower_down_lip_follow_grp.translateZ = System_Lower_down_lip_follow_grp.translateZ/2;' + '\nSystem_R_lower_down_lip_follow_grp.translateX = System_Lower_down_lip_follow_grp.translateX/2;' + '\nSystem_R_lower_down_lip_follow_grp.translateY = System_Lower_down_lip_follow_grp.translateY/2;' + '\nSystem_R_lower_down_lip_follow_grp.translateZ = System_Lower_down_lip_follow_grp.translateZ/2;' + '\nSystem_L_lower_down_lip_follow_grp.rotateX = System_Lower_down_lip_follow_grp.rotateX/2*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lower_down_lip_follow_grp.rotateY = System_Lower_down_lip_follow_grp.rotateY/2*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lower_down_lip_follow_grp.rotateZ = System_Lower_down_lip_follow_grp.rotateZ/2*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lower_down_lip_follow_grp.rotateX = System_Lower_down_lip_follow_grp.rotateX/2*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lower_down_lip_follow_grp.rotateY = System_Lower_down_lip_follow_grp.rotateY/2*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lower_down_lip_follow_grp.rotateZ = System_Lower_down_lip_follow_grp.rotateZ/2*(Lower_lip_ctrl.lip_lower_side_rotate_follow);\n' + '\n//Lower Side Corner Follow' + '\nSystem_L_lip_lower_corner_down_follow.translateX = L_lip_lower_corner_down_ctrl_grp.translateX/2;' + '\nSystem_L_lip_lower_corner_down_follow.translateY = L_lip_lower_corner_down_ctrl_grp.translateY/2;' + '\nSystem_L_lip_lower_corner_down_follow.translateZ = L_lip_lower_corner_down_ctrl_grp.translateZ/2;' + '\nSystem_R_lip_lower_corner_down_follow.translateX = -R_lip_lower_corner_down_ctrl_grp.translateX/2;' + '\nSystem_R_lip_lower_corner_down_follow.translateY = R_lip_lower_corner_down_ctrl_grp.translateY/2;' + '\nSystem_R_lip_lower_corner_down_follow.translateZ = R_lip_lower_corner_down_ctrl_grp.translateZ/2;' + '\nSystem_L_lip_lower_corner_down_follow.rotateX = L_lip_lower_corner_down_ctrl_grp.rotateX/2*(L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lip_lower_corner_down_follow.rotateY = L_lip_lower_corner_down_ctrl_grp.rotateY/2*(L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lip_lower_corner_down_follow.rotateZ = L_lip_lower_corner_down_ctrl_grp.rotateZ/2*(L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lip_lower_corner_down_follow.rotateX = R_lip_lower_corner_down_ctrl_grp.rotateX/2*(R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lip_lower_corner_down_follow.rotateY = -R_lip_lower_corner_down_ctrl_grp.rotateY/2*(R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lip_lower_corner_down_follow.rotateZ = -R_lip_lower_corner_down_ctrl_grp.rotateZ/2*(R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Lower_Lip_expression')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lower Lip Follow' + '\nSystem_L_lower_down_lip_follow_grp.translateX = System_Lower_down_lip_follow_grp.translateX/1.3;' + '\nSystem_L_lower_down_lip_follow_grp.translateY = System_Lower_down_lip_follow_grp.translateY/1.3;' + '\nSystem_L_lower_down_lip_follow_grp.translateZ = System_Lower_down_lip_follow_grp.translateZ/1.3;' + '\nSystem_R_lower_down_lip_follow_grp.translateX = System_Lower_down_lip_follow_grp.translateX/1.3;' + '\nSystem_R_lower_down_lip_follow_grp.translateY = System_Lower_down_lip_follow_grp.translateY/1.3;' + '\nSystem_R_lower_down_lip_follow_grp.translateZ = System_Lower_down_lip_follow_grp.translateZ/1.3;' + '\nSystem_L_lower_down_lip_follow_grp.rotateX = System_Lower_down_lip_follow_grp.rotateX/1.3*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lower_down_lip_follow_grp.rotateY = System_Lower_down_lip_follow_grp.rotateY/1.3*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lower_down_lip_follow_grp.rotateZ = System_Lower_down_lip_follow_grp.rotateZ/1.3*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lower_down_lip_follow_grp.rotateX = System_Lower_down_lip_follow_grp.rotateX/1.3*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lower_down_lip_follow_grp.rotateY = System_Lower_down_lip_follow_grp.rotateY/1.3*(Lower_lip_ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lower_down_lip_follow_grp.rotateZ = System_Lower_down_lip_follow_grp.rotateZ/1.3*(Lower_lip_ctrl.lip_lower_side_rotate_follow);\n' + '\n//Lower Side Corner Follow' + '\nSystem_L_lip_lower_corner_down_follow.translateX = L_lip_lower_corner_down_ctrl_grp.translateX/2.6;' + '\nSystem_L_lip_lower_corner_down_follow.translateY = L_lip_lower_corner_down_ctrl_grp.translateY/2.6;' + '\nSystem_L_lip_lower_corner_down_follow.translateZ = L_lip_lower_corner_down_ctrl_grp.translateZ/2.6;' + '\nSystem_R_lip_lower_corner_down_follow.translateX = -R_lip_lower_corner_down_ctrl_grp.translateX/2.6;' + '\nSystem_R_lip_lower_corner_down_follow.translateY = R_lip_lower_corner_down_ctrl_grp.translateY/2.6;' + '\nSystem_R_lip_lower_corner_down_follow.translateZ = R_lip_lower_corner_down_ctrl_grp.translateZ/2.6;' + '\nSystem_L_lip_lower_corner_down_follow.rotateX = L_lip_lower_corner_down_ctrl_grp.rotateX/2.6*(L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lip_lower_corner_down_follow.rotateY = L_lip_lower_corner_down_ctrl_grp.rotateY/2.6*(L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_L_lip_lower_corner_down_follow.rotateZ = L_lip_lower_corner_down_ctrl_grp.rotateZ/2.6*(L_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lip_lower_corner_down_follow.rotateX = R_lip_lower_corner_down_ctrl_grp.rotateX/2.6*(R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lip_lower_corner_down_follow.rotateY = -R_lip_lower_corner_down_ctrl_grp.rotateY/2.6*(R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\nSystem_R_lip_lower_corner_down_follow.rotateZ = -R_lip_lower_corner_down_ctrl_grp.rotateZ/2.6*(R_lip_corner_down_Ctrl.lip_lower_side_rotate_follow);' + '\n//Lower_02 Lip Follow' + '\nSystem_L_lower_02_down_lip_follow_grp.translateX = System_Lower_down_lip_follow_grp.translateX/2.6;' + '\nSystem_L_lower_02_down_lip_follow_grp.translateY = System_Lower_down_lip_follow_grp.translateY/2.6;' + '\nSystem_L_lower_02_down_lip_follow_grp.translateZ = System_Lower_down_lip_follow_grp.translateZ/2.6;' + '\nSystem_R_lower_02_down_lip_follow_grp.translateX = System_Lower_down_lip_follow_grp.translateX/2.6;' + '\nSystem_R_lower_02_down_lip_follow_grp.translateY = System_Lower_down_lip_follow_grp.translateY/2.6;' + '\nSystem_R_lower_02_down_lip_follow_grp.translateZ = System_Lower_down_lip_follow_grp.translateZ/2.6;' + '\nSystem_L_lower_02_down_lip_follow_grp.rotateX = System_Lower_down_lip_follow_grp.rotateX/2.6*(Lower_lip_ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_L_lower_02_down_lip_follow_grp.rotateY = System_Lower_down_lip_follow_grp.rotateY/2.6*(Lower_lip_ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_L_lower_02_down_lip_follow_grp.rotateZ = System_Lower_down_lip_follow_grp.rotateZ/2.6*(Lower_lip_ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_R_lower_02_down_lip_follow_grp.rotateX = System_Lower_down_lip_follow_grp.rotateX/2.6*(Lower_lip_ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_R_lower_02_down_lip_follow_grp.rotateY = System_Lower_down_lip_follow_grp.rotateY/2.6*(Lower_lip_ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_R_lower_02_down_lip_follow_grp.rotateZ = System_Lower_down_lip_follow_grp.rotateZ/2.6*(Lower_lip_ctrl.lip_lower_side_02_rotate_follow);\n' + '\n//Lower Side_02 Corner Follow' + '\nSystem_L_lip_lower_02_corner_down_follow.translateX = L_lip_lower_corner_down_ctrl_grp.translateX/1.3;' + '\nSystem_L_lip_lower_02_corner_down_follow.translateY = L_lip_lower_corner_down_ctrl_grp.translateY/1.3;' + '\nSystem_L_lip_lower_02_corner_down_follow.translateZ = L_lip_lower_corner_down_ctrl_grp.translateZ/1.3;' + '\nSystem_R_lip_lower_02_corner_down_follow.translateX = -R_lip_lower_corner_down_ctrl_grp.translateX/1.3;' + '\nSystem_R_lip_lower_02_corner_down_follow.translateY = R_lip_lower_corner_down_ctrl_grp.translateY/1.3;' + '\nSystem_R_lip_lower_02_corner_down_follow.translateZ = R_lip_lower_corner_down_ctrl_grp.translateZ/1.3;' + '\nSystem_L_lip_lower_02_corner_down_follow.rotateX = L_lip_lower_corner_down_ctrl_grp.rotateX/1.3*(L_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_L_lip_lower_02_corner_down_follow.rotateY = L_lip_lower_corner_down_ctrl_grp.rotateY/1.3*(L_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_L_lip_lower_02_corner_down_follow.rotateZ = L_lip_lower_corner_down_ctrl_grp.rotateZ/1.3*(L_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_R_lip_lower_02_corner_down_follow.rotateX = R_lip_lower_corner_down_ctrl_grp.rotateX/1.3*(R_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_R_lip_lower_02_corner_down_follow.rotateY = -R_lip_lower_corner_down_ctrl_grp.rotateY/1.3*(R_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow);' + '\nSystem_R_lip_lower_02_corner_down_follow.rotateZ = -R_lip_lower_corner_down_ctrl_grp.rotateZ/1.3*(R_lip_corner_down_Ctrl.lip_lower_side_02_rotate_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Lower_Lip_expression')
        if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parentConstraint('Lip_Master_ctrl', 'Lip_master_follow_ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'Lip_Master_Ctrl_grp', mo=True)
            cmds.group('System_L_lip_corner_jnt', n='System_L_lip_upper_part_follow_grp')
            cmds.group('System_R_lip_corner_jnt', n='System_R_lip_upper_part_follow_grp')
            cmds.parent('System_L_lip_corner_jnt', 'System_L_lip_up_corner_jnt_grp')
            cmds.parent('System_R_lip_corner_jnt', 'System_R_lip_up_corner_jnt_grp')
            cmds.parent('System_L_lip_upper_part_follow_grp', 'System_R_lip_upper_part_follow_grp', 'Upper_lip_follow_grp')
            cmds.parentConstraint('L_lip_corner_Ctrl', 'System_L_lip_upper_part_follow_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_Ctrl', 'System_R_lip_upper_part_follow_grp', mo=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parent('System_L_lip_corner_jnt', 'System_L_lip_corner_FK_grp')
            cmds.parent('System_R_lip_corner_jnt', 'System_R_lip_corner_FK_grp')
            cmds.addAttr('Lip_Master_ctrl', ln='Zip_val', at='double', min=0, max=10)
            cmds.setAttr('Lip_Master_ctrl.Zip_val', e=1, keyable=True)
            cmds.setAttr('Lip_Master_ctrl.Zip_val', 3)
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.addAttr('L_lip_corner_Ctrl', ln='Zip', at='double', min=0, max=10 + 20)
            cmds.setAttr('L_lip_corner_Ctrl.Zip', e=1, keyable=True)
            cmds.addAttr('R_lip_corner_Ctrl', ln='Zip', at='double', min=0, max=10 + 20)
            cmds.setAttr('R_lip_corner_Ctrl.Zip', e=1, keyable=True)
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.addAttr('L_lip_corner_Ctrl', ln='Zip', at='double', min=0, max=10 + 40)
            cmds.setAttr('L_lip_corner_Ctrl.Zip', e=1, keyable=True)
            cmds.addAttr('R_lip_corner_Ctrl', ln='Zip', at='double', min=0, max=10 + 40)
            cmds.setAttr('R_lip_corner_Ctrl.Zip', e=1, keyable=True)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('L_lip_corner_up_Ctrl', n='L_lip_corner_up_zip_follow_grp')
            cmds.group('L_lip_corner_down_Ctrl', n='L_lip_corner_down_zip_follow_grp')
            cmds.group('R_lip_corner_up_Ctrl', n='R_lip_corner_up_zip_follow_grp')
            cmds.group('R_lip_corner_down_Ctrl', n='R_lip_corner_down_zip_follow_grp')
            cmds.parent('L_lip_upper_corner_up_ctrl_grp', 'L_lip_corner_up_zip_follow_grp')
            cmds.parent('L_lip_lower_corner_down_ctrl_grp', 'L_lip_corner_down_zip_follow_grp')
            cmds.parent('R_lip_upper_corner_up_ctrl_grp', 'R_lip_corner_up_zip_follow_grp')
            cmds.parent('R_lip_lower_corner_down_ctrl_grp', 'R_lip_corner_down_zip_follow_grp')
            cmds.group('L_lip_upper_side_ctrl', n='L_lip_upper_side_zip_follow_grp')
            cmds.group('L_lip_lower_side_ctrl', n='L_lip_lower_side_zip_follow_grp')
            cmds.group('R_lip_upper_side_ctrl', n='R_lip_upper_side_zip_follow_grp')
            cmds.group('R_lip_lower_side_ctrl', n='R_lip_lower_side_zip_follow_grp')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_upper_02_corner_jaw_follow', n='L_lip_upper_02_side_zip_follow_grp')
            cmds.group('System_L_lip_lower_02_corner_down_follow', n='L_lip_lower_02_side_zip_follow_grp')
            cmds.group('System_R_lip_upper_02_corner_jaw_follow', n='R_lip_upper_02_side_zip_follow_grp')
            cmds.group('System_R_lip_lower_02_corner_down_follow', n='R_lip_lower_02_side_zip_follow_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_Lip_upper_jaw_follow_grp', n='L_Upper_lip_ctrl_zip_follow_grp')
            cmds.group('System_L_side_down_lip_follow_grp', n='L_Lower_lip_ctrl_zip_follow_grp')
            cmds.group('System_Lip_upper_jaw_follow_grp', n='R_Upper_lip_ctrl_zip_follow_grp')
            cmds.group('System_L_side_down_lip_follow_grp', n='R_Lower_lip_ctrl_zip_follow_grp')
        self.square_control(13, 'Lip_FACS_Ctrl')
        cmds.scale(7 * self.ctrl_scale, 7 * self.ctrl_scale, 7 * self.ctrl_scale, 'Lip_FACS_Ctrl')
        cmds.pointConstraint('System_Jaw_master_jnt', 'Lip_FACS_Ctrl')
        cmds.delete('Lip_FACS_Ctrl_pointConstraint1')
        cmds.move(0, 0, 15 * self.ctrl_scale, 'Lip_FACS_Ctrl', r=True)
        if 'Jaw joint Only' != self.ui.LipOption.currentText():
            cmds.pointConstraint('Lip_Master_ctrl', 'Lip_FACS_Ctrl', skip=('x', 'z'))
            cmds.delete('Lip_FACS_Ctrl_pointConstraint1')
        cmds.makeIdentity('Lip_FACS_Ctrl', t=True, r=True, s=True, apply=True)
        self.square_control(16, 'Lip_FACS_bar_ctrl')
        cmds.scale(1 * self.ctrl_scale, 1 * self.ctrl_scale, 1 * self.ctrl_scale, 'Lip_FACS_bar_ctrl')
        cmds.pointConstraint('Lip_FACS_Ctrl', 'Lip_FACS_bar_ctrl')
        cmds.delete('Lip_FACS_bar_ctrl_pointConstraint1')
        cmds.makeIdentity('Lip_FACS_bar_ctrl', t=True, r=True, s=True, apply=True)
        cmds.select('Lip_FACS_bar_ctrl')
        cmds.transformLimits(tx=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                             ty=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                             tz=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale))
        cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
        cmds.parent('Lip_FACS_bar_ctrl', 'Lip_FACS_Ctrl')
        if 'Jaw joint Only' != self.ui.LipOption.currentText():
            self.square_control(23, 'Lip_FACS_L_bar_ctrl')
            cmds.scale(0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 'Lip_FACS_L_bar_ctrl')
            cmds.pointConstraint('Lip_FACS_Ctrl', 'Lip_FACS_L_bar_ctrl')
            cmds.delete('Lip_FACS_L_bar_ctrl_pointConstraint1')
            cmds.move(0.3 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'Lip_FACS_L_bar_ctrl', r=True)
            cmds.makeIdentity('Lip_FACS_L_bar_ctrl', t=True, r=True, s=True, apply=True)
            cmds.select('Lip_FACS_L_bar_ctrl')
            cmds.transformLimits(tx=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 ty=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 tz=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale))
            cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
            cmds.group('Lip_FACS_L_bar_ctrl', n='Lip_FACS_L_bar_Ctrl_grp')
            cmds.parent('Lip_FACS_L_bar_Ctrl_grp', 'Lip_FACS_bar_ctrl')
            cmds.group(em=True, n='System_Lip_FACS_L_bar_follow_grp')
            cmds.pointConstraint('Lip_FACS_L_bar_ctrl', 'System_Lip_FACS_L_bar_follow_grp')
            cmds.delete('System_Lip_FACS_L_bar_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_Lip_FACS_L_bar_follow_grp', t=True, apply=True)
            cmds.pointConstraint('Lip_FACS_L_bar_ctrl', 'System_Lip_FACS_L_bar_follow_grp', mo=True)
            self.square_control(29, 'Lip_FACS_R_bar_ctrl')
            cmds.scale(0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 'Lip_FACS_R_bar_ctrl')
            cmds.pointConstraint('Lip_FACS_Ctrl', 'Lip_FACS_R_bar_ctrl')
            cmds.delete('Lip_FACS_R_bar_ctrl_pointConstraint1')
            cmds.move(0.3 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'Lip_FACS_R_bar_ctrl', r=True)
            cmds.makeIdentity('Lip_FACS_R_bar_ctrl', t=True, r=True, s=True, apply=True)
            cmds.select('Lip_FACS_R_bar_ctrl')
            cmds.transformLimits(tx=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 ty=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 tz=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale))
            cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
            cmds.group('Lip_FACS_R_bar_ctrl', n='Lip_FACS_R_bar_Ctrl_grp')
            cmds.parent('Lip_FACS_R_bar_Ctrl_grp', 'Lip_FACS_bar_ctrl')
            cmds.group(em=True, n='R_SymGroup')
            cmds.parent('Lip_FACS_R_bar_Ctrl_grp', 'R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.parent('Lip_FACS_R_bar_Ctrl_grp', 'Lip_FACS_bar_ctrl')
            cmds.delete('R_SymGroup')
            cmds.group(em=True, n='System_Lip_FACS_R_bar_follow_grp')
            cmds.pointConstraint('Lip_FACS_R_bar_ctrl', 'System_Lip_FACS_R_bar_follow_grp')
            cmds.delete('System_Lip_FACS_R_bar_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_Lip_FACS_R_bar_follow_grp', t=True, apply=True)
            cmds.pointConstraint('Lip_FACS_R_bar_ctrl', 'System_Lip_FACS_R_bar_follow_grp', mo=True)
            self.square_control(17, 'Lip_FACS_upper_bar_ctrl')
            cmds.scale(0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 'Lip_FACS_upper_bar_ctrl')
            cmds.pointConstraint('Lip_FACS_Ctrl', 'Lip_FACS_upper_bar_ctrl')
            cmds.delete('Lip_FACS_upper_bar_ctrl_pointConstraint1')
            cmds.move(0 * self.ctrl_scale, 0.3 * self.ctrl_scale, 0 * self.ctrl_scale, 'Lip_FACS_upper_bar_ctrl', r=True)
            cmds.makeIdentity('Lip_FACS_upper_bar_ctrl', t=True, r=True, s=True, apply=True)
            cmds.select('Lip_FACS_upper_bar_ctrl')
            cmds.transformLimits(tx=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 ty=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 tz=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale))
            cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
            cmds.group('Lip_FACS_upper_bar_ctrl', n='Lip_FACS_upper_bar_Ctrl_grp')
            cmds.parent('Lip_FACS_upper_bar_Ctrl_grp', 'Lip_FACS_bar_ctrl')
            cmds.group(em=True, n='System_Lip_FACS_upper_bar_follow_grp')
            cmds.pointConstraint('Lip_FACS_upper_bar_ctrl', 'System_Lip_FACS_upper_bar_follow_grp')
            cmds.delete('System_Lip_FACS_upper_bar_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_Lip_FACS_upper_bar_follow_grp', t=True, apply=True)
            cmds.pointConstraint('Lip_FACS_upper_bar_ctrl', 'System_Lip_FACS_upper_bar_follow_grp', mo=True)
            self.square_control(17, 'Lip_FACS_lower_bar_ctrl')
            cmds.scale(0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 0.25 * self.ctrl_scale, 'Lip_FACS_lower_bar_ctrl')
            cmds.pointConstraint('Lip_FACS_Ctrl', 'Lip_FACS_lower_bar_ctrl')
            cmds.delete('Lip_FACS_lower_bar_ctrl_pointConstraint1')
            cmds.move(0 * self.ctrl_scale, -0.3 * self.ctrl_scale, 0 * self.ctrl_scale, 'Lip_FACS_lower_bar_ctrl', r=True)
            cmds.makeIdentity('Lip_FACS_lower_bar_ctrl', t=True, r=True, s=True, apply=True)
            cmds.select('Lip_FACS_lower_bar_ctrl')
            cmds.transformLimits(tx=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 ty=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale),
                                 tz=(-3.5 * self.ctrl_scale, 3.5 * self.ctrl_scale))
            cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
            cmds.group('Lip_FACS_lower_bar_ctrl', n='Lip_FACS_lower_bar_Ctrl_grp')
            cmds.parent('Lip_FACS_lower_bar_Ctrl_grp', 'Lip_FACS_bar_ctrl')
            cmds.group('Lip_FACS_lower_bar_Ctrl_grp', n='Down_Group')
            cmds.setAttr('Down_Group.scaleY', -1)
            cmds.parent('Lip_FACS_lower_bar_Ctrl_grp', 'Lip_FACS_bar_ctrl')
            cmds.delete('Down_Group')
            cmds.group(em=True, n='System_Lip_FACS_lower_bar_follow_grp')
            cmds.pointConstraint('Lip_FACS_lower_bar_ctrl', 'System_Lip_FACS_lower_bar_follow_grp')
            cmds.delete('System_Lip_FACS_lower_bar_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_Lip_FACS_lower_bar_follow_grp', t=True, apply=True)
            cmds.pointConstraint('Lip_FACS_lower_bar_ctrl', 'System_Lip_FACS_lower_bar_follow_grp', mo=True)
        cmds.group(em=True, n='Jaw_Master_FACS_follow_grp')
        cmds.pointConstraint('Jaw_Master_Ctrl', 'Jaw_Master_FACS_follow_grp')
        cmds.delete('Jaw_Master_FACS_follow_grp_pointConstraint1')
        cmds.makeIdentity('Jaw_Master_FACS_follow_grp', t=True, apply=True)
        cmds.parent('Jaw_Master_FACS_follow_grp', 'Jaw_Master_Ctrl_grp')
        cmds.parent('Jaw_Master_Ctrl', 'Jaw_Master_FACS_follow_grp')
        if 'Jaw joint Only' != self.ui.LipOption.currentText():
            cmds.group(em=True, n='L_lip_corner_FACS_follow_grp')
            cmds.pointConstraint('L_lip_corner_Ctrl', 'L_lip_corner_FACS_follow_grp')
            cmds.delete('L_lip_corner_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_FACS_follow_grp', t=True, apply=True)
            cmds.parent('L_lip_corner_FACS_follow_grp', 'L_lip_corner_Ctrl_grp')
            cmds.parent('L_lip_corner_Ctrl', 'L_lip_corner_FACS_follow_grp')
            cmds.group(em=True, n='L_lip_corner_up_FACS_follow_grp')
            cmds.pointConstraint('L_lip_corner_up_Ctrl', 'L_lip_corner_up_FACS_follow_grp')
            cmds.delete('L_lip_corner_up_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('L_lip_corner_up_FACS_follow_grp', t=True, apply=True)
            if 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.parent('L_lip_corner_up_FACS_follow_grp', 'L_lip_corner_up_master_follow_grp')
            else:
                cmds.parent('L_lip_corner_up_FACS_follow_grp', 'L_lip_corner_up_zip_follow_grp')
            cmds.parent('L_lip_corner_up_Ctrl', 'L_lip_corner_up_FACS_follow_grp')
            cmds.group(em=True, n='R_lip_corner_FACS_follow_grp')
            cmds.pointConstraint('R_lip_corner_Ctrl', 'R_lip_corner_FACS_follow_grp')
            cmds.delete('R_lip_corner_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_corner_FACS_follow_grp', t=True, apply=True)
            cmds.parent('R_lip_corner_FACS_follow_grp', 'R_lip_corner_Ctrl_grp')
            cmds.makeIdentity('R_lip_corner_FACS_follow_grp', t=True, r=True, s=True, apply=True)
            cmds.parent('R_lip_corner_Ctrl', 'R_lip_corner_FACS_follow_grp')
            cmds.group(em=True, n='R_lip_corner_up_FACS_follow_grp')
            cmds.pointConstraint('R_lip_corner_up_Ctrl', 'R_lip_corner_up_FACS_follow_grp')
            cmds.delete('R_lip_corner_up_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('R_lip_corner_up_FACS_follow_grp', t=True, apply=True)
            if 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.parent('R_lip_corner_up_FACS_follow_grp', 'R_lip_corner_up_master_follow_grp')
            else:
                cmds.parent('R_lip_corner_up_FACS_follow_grp', 'R_lip_corner_up_zip_follow_grp')
            cmds.makeIdentity('R_lip_corner_up_FACS_follow_grp', t=True, r=True, s=True, apply=True)
            cmds.parent('R_lip_corner_up_Ctrl', 'R_lip_corner_up_FACS_follow_grp')
            cmds.group(em=True, n='Upper_lip_FACS_follow_grp')
            cmds.pointConstraint('Upper_lip_ctrl', 'Upper_lip_FACS_follow_grp')
            cmds.delete('Upper_lip_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('Upper_lip_FACS_follow_grp', t=True, apply=True)
            cmds.parent('Upper_lip_FACS_follow_grp', 'R_Upper_lip_Ctrl_grp')
            cmds.parent('Upper_lip_ctrl', 'Upper_lip_FACS_follow_grp')
            cmds.group(em=True, n='Lower_lip_FACS_follow_grp')
            cmds.pointConstraint('Lower_lip_ctrl', 'Lower_lip_FACS_follow_grp')
            cmds.delete('Lower_lip_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('Lower_lip_FACS_follow_grp', t=True, apply=True)
            cmds.parent('Lower_lip_FACS_follow_grp', 'R_Lower_lip_Ctrl_grp')
            cmds.parent('Lower_lip_ctrl', 'Lower_lip_FACS_follow_grp')
            cmds.group(em=True, n='Lip_Master_FACS_follow_grp')
            cmds.pointConstraint('Lip_Master_ctrl', 'Lip_Master_FACS_follow_grp')
            cmds.delete('Lip_Master_FACS_follow_grp_pointConstraint1')
            cmds.makeIdentity('Lip_Master_FACS_follow_grp', t=True, apply=True)
            cmds.parent('Lip_Master_FACS_follow_grp', 'Lip_Master_jaw_follow_ctrl_grp')
            cmds.parent('Lip_Master_ctrl', 'Lip_Master_FACS_follow_grp')
            cmds.parent('System_Lip_FACS_*_bar_follow_grp', 'Lip_FACS_Ctrl')
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group(em=True, n='L_lip_corner_down_FACS_follow_grp')
                cmds.pointConstraint('L_lip_corner_down_Ctrl', 'L_lip_corner_down_FACS_follow_grp')
                cmds.delete('L_lip_corner_down_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('L_lip_corner_down_FACS_follow_grp', t=True, apply=True)
                cmds.parent('L_lip_corner_down_FACS_follow_grp', 'L_lip_corner_down_zip_follow_grp')
                cmds.makeIdentity('L_lip_corner_down_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('L_lip_corner_down_Ctrl', 'L_lip_corner_down_FACS_follow_grp')
                cmds.group(em=True, n='R_lip_corner_down_FACS_follow_grp')
                cmds.pointConstraint('R_lip_corner_down_Ctrl', 'R_lip_corner_down_FACS_follow_grp')
                cmds.delete('R_lip_corner_down_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_corner_down_FACS_follow_grp', t=True, apply=True)
                cmds.parent('R_lip_corner_down_FACS_follow_grp', 'R_lip_corner_down_zip_follow_grp')
                cmds.makeIdentity('R_lip_corner_down_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('R_lip_corner_down_Ctrl', 'R_lip_corner_down_FACS_follow_grp')
                cmds.group(em=True, n='L_lip_upper_side_FACS_follow_grp')
                cmds.pointConstraint('L_lip_upper_side_ctrl', 'L_lip_upper_side_FACS_follow_grp')
                cmds.delete('L_lip_upper_side_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('L_lip_upper_side_FACS_follow_grp', t=True, apply=True)
                cmds.parent('L_lip_upper_side_FACS_follow_grp', 'L_lip_upper_side_zip_follow_grp')
                cmds.makeIdentity('L_lip_upper_side_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('L_lip_upper_side_ctrl', 'L_lip_upper_side_FACS_follow_grp')
                cmds.group(em=True, n='R_lip_upper_side_FACS_follow_grp')
                cmds.pointConstraint('R_lip_upper_side_ctrl', 'R_lip_upper_side_FACS_follow_grp')
                cmds.delete('R_lip_upper_side_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_upper_side_FACS_follow_grp', t=True, apply=True)
                cmds.parent('R_lip_upper_side_FACS_follow_grp', 'R_lip_upper_side_zip_follow_grp')
                cmds.makeIdentity('R_lip_upper_side_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('R_lip_upper_side_ctrl', 'R_lip_upper_side_FACS_follow_grp')
                cmds.group(em=True, n='L_lip_lower_side_FACS_follow_grp')
                cmds.pointConstraint('L_lip_lower_side_ctrl', 'L_lip_lower_side_FACS_follow_grp')
                cmds.delete('L_lip_lower_side_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('L_lip_lower_side_FACS_follow_grp', t=True, apply=True)
                cmds.parent('L_lip_lower_side_FACS_follow_grp', 'L_lip_lower_side_zip_follow_grp')
                cmds.makeIdentity('L_lip_lower_side_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('L_lip_lower_side_ctrl', 'L_lip_lower_side_FACS_follow_grp')
                cmds.group(em=True, n='R_lip_lower_side_FACS_follow_grp')
                cmds.pointConstraint('R_lip_lower_side_ctrl', 'R_lip_lower_side_FACS_follow_grp')
                cmds.delete('R_lip_lower_side_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_lower_side_FACS_follow_grp', t=True, apply=True)
                cmds.parent('R_lip_lower_side_FACS_follow_grp', 'R_lip_lower_side_zip_follow_grp')
                cmds.makeIdentity('R_lip_lower_side_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('R_lip_lower_side_ctrl', 'R_lip_lower_side_FACS_follow_grp')
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group(em=True, n='L_lip_upper_side_02_FACS_follow_grp')
                cmds.pointConstraint('L_lip_upper_side_02_FK_ctrl', 'L_lip_upper_side_02_FACS_follow_grp')
                cmds.delete('L_lip_upper_side_02_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('L_lip_upper_side_02_FACS_follow_grp', t=True, apply=True)
                cmds.parent('L_lip_upper_side_02_FACS_follow_grp', 'L_lip_upper_side_02_FK_Ctrl_grp')
                cmds.makeIdentity('L_lip_upper_side_02_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('L_lip_upper_side_02_FK_ctrl', 'L_lip_upper_side_02_FACS_follow_grp')
                cmds.group(em=True, n='R_lip_upper_side_02_FACS_follow_grp')
                cmds.pointConstraint('R_lip_upper_side_02_FK_ctrl', 'R_lip_upper_side_02_FACS_follow_grp')
                cmds.delete('R_lip_upper_side_02_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_upper_side_02_FACS_follow_grp', t=True, apply=True)
                cmds.parent('R_lip_upper_side_02_FACS_follow_grp', 'R_lip_upper_side_02_FK_Ctrl_grp')
                cmds.makeIdentity('R_lip_upper_side_02_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('R_lip_upper_side_02_FK_ctrl', 'R_lip_upper_side_02_FACS_follow_grp')
                cmds.group(em=True, n='L_lip_lower_side_02_FACS_follow_grp')
                cmds.pointConstraint('L_lip_lower_side_02_FK_ctrl', 'L_lip_lower_side_02_FACS_follow_grp')
                cmds.delete('L_lip_lower_side_02_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('L_lip_lower_side_02_FACS_follow_grp', t=True, apply=True)
                cmds.parent('L_lip_lower_side_02_FACS_follow_grp', 'L_lip_lower_side_02_FK_Ctrl_grp')
                cmds.makeIdentity('L_lip_lower_side_02_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('L_lip_lower_side_02_FK_ctrl', 'L_lip_lower_side_02_FACS_follow_grp')
                cmds.group(em=True, n='R_lip_lower_side_02_FACS_follow_grp')
                cmds.pointConstraint('R_lip_lower_side_02_FK_ctrl', 'R_lip_lower_side_02_FACS_follow_grp')
                cmds.delete('R_lip_lower_side_02_FACS_follow_grp_pointConstraint1')
                cmds.makeIdentity('R_lip_lower_side_02_FACS_follow_grp', t=True, apply=True)
                cmds.parent('R_lip_lower_side_02_FACS_follow_grp', 'R_lip_lower_side_02_FK_Ctrl_grp')
                cmds.makeIdentity('R_lip_lower_side_02_FACS_follow_grp', t=True, r=True, s=True, apply=True)
                cmds.parent('R_lip_lower_side_02_FK_ctrl', 'R_lip_lower_side_02_FACS_follow_grp')
        if cmds.objExists('Lip_FACS_Ctrl'):
            if 'Jaw joint Only' != self.ui.LipOption.currentText():
                cmds.addAttr('Lip_FACS_Ctrl', ln='Open_Follow', at='double', min=0.1, max=2)
                cmds.setAttr('Lip_FACS_Ctrl.Open_Follow', e=1, keyable=True)
                cmds.setAttr('Lip_FACS_Ctrl.Open_Follow', 1)
                cmds.addAttr('Lip_FACS_Ctrl', ln='Up_Follow', at='double', min=0.1, max=2)
                cmds.setAttr('Lip_FACS_Ctrl.Up_Follow', e=1, keyable=True)
                cmds.setAttr('Lip_FACS_Ctrl.Up_Follow', 1)
            cmds.addAttr('Lip_FACS_Ctrl', ln='Down_Follow', at='double', min=0.1, max=2)
            cmds.setAttr('Lip_FACS_Ctrl.Down_Follow', e=1, keyable=True)
            cmds.setAttr('Lip_FACS_Ctrl.Down_Follow', 1)
            if 'Jaw joint Only' != self.ui.LipOption.currentText():
                cmds.addAttr('Lip_FACS_Ctrl', ln='Side_Follow', at='double', min=0.1, max=2)
                cmds.setAttr('Lip_FACS_Ctrl.Side_Follow', e=1, keyable=True)
                cmds.setAttr('Lip_FACS_Ctrl.Side_Follow', 1)
                cmds.addAttr('Lip_FACS_Ctrl', ln='Inside_Follow', at='double', min=0.1, max=2)
                cmds.setAttr('Lip_FACS_Ctrl.Inside_Follow', e=1, keyable=True)
                cmds.setAttr('Lip_FACS_Ctrl.Inside_Follow', 1)
                cmds.addAttr('Lip_FACS_Ctrl', ln='Outside_Follow', at='double', min=0.1, max=2)
                cmds.setAttr('Lip_FACS_Ctrl.Outside_Follow', e=1, keyable=True)
                cmds.setAttr('Lip_FACS_Ctrl.Outside_Follow', 1)
        if 'Jaw joint Only' == self.ui.LipOption.currentText():
            cmds.expression(
                s='\n//Lip FACS Follow' + '\nif(Lip_FACS_bar_ctrl.translateY<0){' + '\nJaw_Master_FACS_follow_grp.rotateX =-Lip_FACS_bar_ctrl.translateY*7/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateZ =-Lip_FACS_bar_ctrl.translateY/5*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{Jaw_Master_FACS_follow_grp.rotateX=-Lip_FACS_bar_ctrl.translateY/$sumXYZ;' + '\nJaw_Master_FACS_follow_grp.translateZ=0;}' + '\nJaw_Master_FACS_follow_grp.rotateZ =Lip_FACS_bar_ctrl.translateX/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateX =Lip_FACS_bar_ctrl.translateX/7*(Lip_FACS_Ctrl.Down_Follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_FACS_System_expression')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip FACS Follow' + '\n//Jaw' + '\nif(Lip_FACS_bar_ctrl.translateY<0){' + '\nJaw_Master_FACS_follow_grp.rotateX =-Lip_FACS_bar_ctrl.translateY*7/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateZ =-Lip_FACS_bar_ctrl.translateY/5*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{Jaw_Master_FACS_follow_grp.rotateX=-Lip_FACS_bar_ctrl.translateY/$sumXYZ;' + '\nJaw_Master_FACS_follow_grp.translateZ=0;}' + '\nJaw_Master_FACS_follow_grp.rotateZ =Lip_FACS_bar_ctrl.translateX/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateX =Lip_FACS_bar_ctrl.translateX/7*(Lip_FACS_Ctrl.Down_Follow);\n//Lip Corner' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateZ<0){' + '\nL_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_L_bar_follow_grp.translateY/10+System_Lip_FACS_L_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nelse{L_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_L_bar_follow_grp.translateY/10+System_Lip_FACS_L_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateY=System_Lip_FACS_L_bar_follow_grp.translateX/3*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateY=0;}}' + '\nelse{' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateZ<0){' + '\nL_lip_corner_FACS_follow_grp.translateX=(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateX=(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_L_bar_follow_grp.translateY/3+System_Lip_FACS_L_bar_follow_grp.translateX/3)*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_L_bar_follow_grp.translateY/3)*(Lip_FACS_Ctrl.Up_Follow);}}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateZ = -System_Lip_FACS_L_bar_follow_grp.translateX/8*(Lip_FACS_Ctrl.Inside_Follow)+Lip_FACS_L_bar_ctrl.translateZ/2;}' + '\nelse{L_lip_corner_FACS_follow_grp.translateZ = Lip_FACS_L_bar_ctrl.translateZ/2;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateZ<0){' + '\nR_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_R_bar_follow_grp.translateY/10+System_Lip_FACS_R_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nelse{R_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_R_bar_follow_grp.translateY/10+System_Lip_FACS_R_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateY=-System_Lip_FACS_R_bar_follow_grp.translateX/3*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateY=0;}}' + '\nelse{' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateZ<0){' + '\nR_lip_corner_FACS_follow_grp.translateX=(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateX=(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_R_bar_follow_grp.translateY/3-System_Lip_FACS_R_bar_follow_grp.translateX/3)*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_R_bar_follow_grp.translateY/3)*(Lip_FACS_Ctrl.Up_Follow);}}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateZ = System_Lip_FACS_R_bar_follow_grp.translateX/8*(Lip_FACS_Ctrl.Inside_Follow)+Lip_FACS_R_bar_ctrl.translateZ/2;}' + '\nelse{R_lip_corner_FACS_follow_grp.translateZ = Lip_FACS_R_bar_ctrl.translateZ/2;}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_corner_up_FACS_follow_grp.translateY = (System_Lip_FACS_L_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_corner_up_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_corner_up_FACS_follow_grp.translateY = (System_Lip_FACS_R_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_corner_up_FACS_follow_grp.translateY = 0;}' + '\n//Upper_lip' + '\nif(System_Lip_FACS_upper_bar_follow_grp.translateY>0){' + '\nUpper_lip_FACS_follow_grp.translateY = (System_Lip_FACS_upper_bar_follow_grp.translateY/2*(Lip_FACS_Ctrl.Up_Follow)+Lip_FACS_upper_bar_ctrl.translateY/1.2);}' + '\nelse{Upper_lip_FACS_follow_grp.translateY = (System_Lip_FACS_upper_bar_follow_grp.translateY/1.5*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+Lip_FACS_upper_bar_ctrl.translateY/1.2;}' + '\nUpper_lip_FACS_follow_grp.translateX = System_Lip_FACS_upper_bar_follow_grp.translateX/5*(Lip_FACS_Ctrl.Side_Follow);' + '\nif(System_Lip_FACS_upper_bar_follow_grp.translateZ<0){' + '\nUpper_lip_FACS_follow_grp.rotateX = -System_Lip_FACS_upper_bar_follow_grp.translateZ*15/$sumXYZ*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Upper_lip_FACS_follow_grp.rotateX = -System_Lip_FACS_upper_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//Lower_lip' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateY>0){' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.translateY = (System_Lip_FACS_lower_bar_follow_grp.translateY/3*(Lip_FACS_Ctrl.Up_Follow)-System_Lip_FACS_lower_bar_follow_grp.translateZ/8-Lip_FACS_lower_bar_ctrl.translateY/1.2);' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateZ/8*(Lip_FACS_Ctrl.Outside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.translateY = (System_Lip_FACS_lower_bar_follow_grp.translateY/3*(Lip_FACS_Ctrl.Up_Follow)-Lip_FACS_lower_bar_ctrl.translateY/1.2);' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateZ/16*(Lip_FACS_Ctrl.Outside_Follow);}}' + '\nelse{' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.translateY = (-System_Lip_FACS_lower_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)-System_Lip_FACS_lower_bar_follow_grp.translateZ/8-Lip_FACS_lower_bar_ctrl.translateY/1.2;' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateY/8*(Lip_FACS_Ctrl.Down_Follow)+System_Lip_FACS_lower_bar_follow_grp.translateZ/8*(Lip_FACS_Ctrl.Outside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.translateY = (-System_Lip_FACS_lower_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)-Lip_FACS_lower_bar_ctrl.translateY/1.2;' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateY/8*(Lip_FACS_Ctrl.Down_Follow)+System_Lip_FACS_lower_bar_follow_grp.translateZ/16*(Lip_FACS_Ctrl.Outside_Follow);}}' + '\nLower_lip_FACS_follow_grp.translateX = System_Lip_FACS_lower_bar_follow_grp.translateX/16*(Lip_FACS_Ctrl.Side_Follow);' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.rotateX = System_Lip_FACS_lower_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.rotateX = System_Lip_FACS_lower_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//Lip_Master' + '\nif(Lip_FACS_bar_ctrl.translateZ<0){' + '\nLip_Master_FACS_follow_grp.translateZ = Lip_FACS_bar_ctrl.translateZ/6*(Lip_FACS_Ctrl.Inside_Follow);}\nelse{Lip_Master_FACS_follow_grp.translateZ = Lip_FACS_bar_ctrl.translateZ/2.5*(Lip_FACS_Ctrl.Outside_Follow);}',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_FACS_System_expression')
        elif 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip FACS Follow' + '\n//Jaw' + '\nif(Lip_FACS_bar_ctrl.translateY<0){' + '\nJaw_Master_FACS_follow_grp.rotateX =-Lip_FACS_bar_ctrl.translateY*7/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateZ =-Lip_FACS_bar_ctrl.translateY/5*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{Jaw_Master_FACS_follow_grp.rotateX=-Lip_FACS_bar_ctrl.translateY/$sumXYZ;' + '\nJaw_Master_FACS_follow_grp.translateZ=0;}' + '\nJaw_Master_FACS_follow_grp.rotateZ =Lip_FACS_bar_ctrl.translateX/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateX =Lip_FACS_bar_ctrl.translateX/7*(Lip_FACS_Ctrl.Down_Follow);\n//Lip Corner' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateZ<0){' + '\nL_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_L_bar_follow_grp.translateY/10+System_Lip_FACS_L_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nelse{L_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_L_bar_follow_grp.translateY/10+System_Lip_FACS_L_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateY=System_Lip_FACS_L_bar_follow_grp.translateX/3*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateY=0;}}' + '\nelse{' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateZ<0){' + '\nL_lip_corner_FACS_follow_grp.translateX=(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateX=(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_L_bar_follow_grp.translateY/3+System_Lip_FACS_L_bar_follow_grp.translateX/3)*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_L_bar_follow_grp.translateY/3)*(Lip_FACS_Ctrl.Up_Follow);}}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateZ = -System_Lip_FACS_L_bar_follow_grp.translateX/8*(Lip_FACS_Ctrl.Inside_Follow)+Lip_FACS_L_bar_ctrl.translateZ/2;}' + '\nelse{L_lip_corner_FACS_follow_grp.translateZ = Lip_FACS_L_bar_ctrl.translateZ/2;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateZ<0){' + '\nR_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_R_bar_follow_grp.translateY/10+System_Lip_FACS_R_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nelse{R_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_R_bar_follow_grp.translateY/10+System_Lip_FACS_R_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateY=-System_Lip_FACS_R_bar_follow_grp.translateX/3*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateY=0;}}' + '\nelse{' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateZ<0){' + '\nR_lip_corner_FACS_follow_grp.translateX=(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateX=(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_R_bar_follow_grp.translateY/3-System_Lip_FACS_R_bar_follow_grp.translateX/3)*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_R_bar_follow_grp.translateY/3)*(Lip_FACS_Ctrl.Up_Follow);}}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateZ = System_Lip_FACS_R_bar_follow_grp.translateX/8*(Lip_FACS_Ctrl.Inside_Follow)+Lip_FACS_R_bar_ctrl.translateZ/2;}' + '\nelse{R_lip_corner_FACS_follow_grp.translateZ = Lip_FACS_R_bar_ctrl.translateZ/2;}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_corner_up_FACS_follow_grp.translateY = (System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_corner_up_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_corner_up_FACS_follow_grp.translateY = (System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_corner_up_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_corner_down_FACS_follow_grp.translateY = -(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_corner_down_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_corner_down_FACS_follow_grp.translateY = -(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_corner_down_FACS_follow_grp.translateY = 0;}' + '\n//Upper_lip' + '\nif(System_Lip_FACS_upper_bar_follow_grp.translateY>0){' + '\nUpper_lip_FACS_follow_grp.translateY = (System_Lip_FACS_upper_bar_follow_grp.translateY/2*(Lip_FACS_Ctrl.Up_Follow)+Lip_FACS_upper_bar_ctrl.translateY/1.2);}' + '\nelse{Upper_lip_FACS_follow_grp.translateY = (System_Lip_FACS_upper_bar_follow_grp.translateY/1.5*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+Lip_FACS_upper_bar_ctrl.translateY/1.2;}' + '\nUpper_lip_FACS_follow_grp.translateX = System_Lip_FACS_upper_bar_follow_grp.translateX/5*(Lip_FACS_Ctrl.Side_Follow);' + '\nif(System_Lip_FACS_upper_bar_follow_grp.translateZ<0){' + '\nUpper_lip_FACS_follow_grp.rotateX = -System_Lip_FACS_upper_bar_follow_grp.translateZ*15/$sumXYZ*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Upper_lip_FACS_follow_grp.rotateX = -System_Lip_FACS_upper_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//Lower_lip' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateY>0){' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.translateY = (System_Lip_FACS_lower_bar_follow_grp.translateY/3*(Lip_FACS_Ctrl.Up_Follow)-System_Lip_FACS_lower_bar_follow_grp.translateZ/8-Lip_FACS_lower_bar_ctrl.translateY/1.2);' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateZ/8*(Lip_FACS_Ctrl.Outside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.translateY = (System_Lip_FACS_lower_bar_follow_grp.translateY/3*(Lip_FACS_Ctrl.Up_Follow)-Lip_FACS_lower_bar_ctrl.translateY/1.2);' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateZ/16*(Lip_FACS_Ctrl.Outside_Follow);}}' + '\nelse{' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.translateY = (-System_Lip_FACS_lower_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)-System_Lip_FACS_lower_bar_follow_grp.translateZ/8-Lip_FACS_lower_bar_ctrl.translateY/1.2;' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateY/8*(Lip_FACS_Ctrl.Down_Follow)+System_Lip_FACS_lower_bar_follow_grp.translateZ/8*(Lip_FACS_Ctrl.Outside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.translateY = (-System_Lip_FACS_lower_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)-Lip_FACS_lower_bar_ctrl.translateY/1.2;' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateY/8*(Lip_FACS_Ctrl.Down_Follow)+System_Lip_FACS_lower_bar_follow_grp.translateZ/16*(Lip_FACS_Ctrl.Outside_Follow);}}' + '\nLower_lip_FACS_follow_grp.translateX = System_Lip_FACS_lower_bar_follow_grp.translateX/16*(Lip_FACS_Ctrl.Side_Follow);' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.rotateX = System_Lip_FACS_lower_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.rotateX = System_Lip_FACS_lower_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//Lip_Master' + '\nif(Lip_FACS_bar_ctrl.translateZ<0){' + '\nLip_Master_FACS_follow_grp.translateZ = Lip_FACS_bar_ctrl.translateZ/6*(Lip_FACS_Ctrl.Inside_Follow);}\nelse{Lip_Master_FACS_follow_grp.translateZ = Lip_FACS_bar_ctrl.translateZ/2.5*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//L_lip_upper_side' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_upper_side_FACS_follow_grp.translateX =(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_upper_side_FACS_follow_grp.translateX=0;}' + '\n//R_lip_upper_side' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_upper_side_FACS_follow_grp.translateX =(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_upper_side_FACS_follow_grp.translateX=0;}' + '\n//L_lip_lower_side' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_lower_side_FACS_follow_grp.translateX =(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_lower_side_FACS_follow_grp.translateX=0;}' + '\n//R_lip_lower_side' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_lower_side_FACS_follow_grp.translateX =(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_lower_side_FACS_follow_grp.translateX=0;}',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_FACS_System_expression')
        elif 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Lip FACS Follow' + '\n//Jaw' + '\nif(Lip_FACS_bar_ctrl.translateY<0){' + '\nJaw_Master_FACS_follow_grp.rotateX =-Lip_FACS_bar_ctrl.translateY*7/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateZ =-Lip_FACS_bar_ctrl.translateY/5*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{Jaw_Master_FACS_follow_grp.rotateX=-Lip_FACS_bar_ctrl.translateY/$sumXYZ;' + '\nJaw_Master_FACS_follow_grp.translateZ=0;}' + '\nJaw_Master_FACS_follow_grp.rotateZ =Lip_FACS_bar_ctrl.translateX/$sumXYZ*(Lip_FACS_Ctrl.Down_Follow);' + '\nJaw_Master_FACS_follow_grp.translateX =Lip_FACS_bar_ctrl.translateX/7*(Lip_FACS_Ctrl.Down_Follow);\n//Lip Corner' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateZ<0){' + '\nL_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_L_bar_follow_grp.translateY/10+System_Lip_FACS_L_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nelse{L_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_L_bar_follow_grp.translateY/10+System_Lip_FACS_L_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateY=System_Lip_FACS_L_bar_follow_grp.translateX/3*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateY=0;}}' + '\nelse{' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateZ<0){' + '\nL_lip_corner_FACS_follow_grp.translateX=(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateX=(System_Lip_FACS_L_bar_follow_grp.translateX/5-System_Lip_FACS_L_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_L_bar_follow_grp.translateY/3+System_Lip_FACS_L_bar_follow_grp.translateX/3)*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{L_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_L_bar_follow_grp.translateY/3)*(Lip_FACS_Ctrl.Up_Follow);}}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateX>0){' + '\nL_lip_corner_FACS_follow_grp.translateZ = -System_Lip_FACS_L_bar_follow_grp.translateX/8*(Lip_FACS_Ctrl.Inside_Follow)+Lip_FACS_L_bar_ctrl.translateZ/2;}' + '\nelse{L_lip_corner_FACS_follow_grp.translateZ = Lip_FACS_L_bar_ctrl.translateZ/2;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateZ<0){' + '\nR_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_R_bar_follow_grp.translateY/10+System_Lip_FACS_R_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nelse{R_lip_corner_FACS_follow_grp.translateX =((System_Lip_FACS_R_bar_follow_grp.translateY/10+System_Lip_FACS_R_bar_follow_grp.translateY/4*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow));}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateY=-System_Lip_FACS_R_bar_follow_grp.translateX/3*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateY=0;}}' + '\nelse{' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateZ<0){' + '\nR_lip_corner_FACS_follow_grp.translateX=(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/8)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateX=(-System_Lip_FACS_R_bar_follow_grp.translateX/5-System_Lip_FACS_R_bar_follow_grp.translateZ/4)*(Lip_FACS_Ctrl.Side_Follow);}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_R_bar_follow_grp.translateY/3-System_Lip_FACS_R_bar_follow_grp.translateX/3)*(Lip_FACS_Ctrl.Up_Follow);}' + '\nelse{R_lip_corner_FACS_follow_grp.translateY=(System_Lip_FACS_R_bar_follow_grp.translateY/3)*(Lip_FACS_Ctrl.Up_Follow);}}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateX<0){' + '\nR_lip_corner_FACS_follow_grp.translateZ = System_Lip_FACS_R_bar_follow_grp.translateX/8*(Lip_FACS_Ctrl.Inside_Follow)+Lip_FACS_R_bar_ctrl.translateZ/2;}' + '\nelse{R_lip_corner_FACS_follow_grp.translateZ = Lip_FACS_R_bar_ctrl.translateZ/2;}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_corner_up_FACS_follow_grp.translateY = (System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_corner_up_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_corner_up_FACS_follow_grp.translateY = (System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_corner_up_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_corner_down_FACS_follow_grp.translateY = -(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_corner_down_FACS_follow_grp.translateY = 0;}' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_corner_down_FACS_follow_grp.translateY = -(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_corner_down_FACS_follow_grp.translateY = 0;}' + '\n//Upper_lip' + '\nif(System_Lip_FACS_upper_bar_follow_grp.translateY>0){' + '\nUpper_lip_FACS_follow_grp.translateY = (System_Lip_FACS_upper_bar_follow_grp.translateY/2*(Lip_FACS_Ctrl.Up_Follow)+Lip_FACS_upper_bar_ctrl.translateY/1.2);}' + '\nelse{Upper_lip_FACS_follow_grp.translateY = (System_Lip_FACS_upper_bar_follow_grp.translateY/1.5*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)+Lip_FACS_upper_bar_ctrl.translateY/1.2;}' + '\nUpper_lip_FACS_follow_grp.translateX = System_Lip_FACS_upper_bar_follow_grp.translateX/5*(Lip_FACS_Ctrl.Side_Follow);' + '\nif(System_Lip_FACS_upper_bar_follow_grp.translateZ<0){' + '\nUpper_lip_FACS_follow_grp.rotateX = -System_Lip_FACS_upper_bar_follow_grp.translateZ*15/$sumXYZ*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Upper_lip_FACS_follow_grp.rotateX = -System_Lip_FACS_upper_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//Lower_lip' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateY>0){' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.translateY = (System_Lip_FACS_lower_bar_follow_grp.translateY/3*(Lip_FACS_Ctrl.Up_Follow)-System_Lip_FACS_lower_bar_follow_grp.translateZ/8-Lip_FACS_lower_bar_ctrl.translateY/1.2);' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateZ/8*(Lip_FACS_Ctrl.Outside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.translateY = (System_Lip_FACS_lower_bar_follow_grp.translateY/3*(Lip_FACS_Ctrl.Up_Follow)-Lip_FACS_lower_bar_ctrl.translateY/1.2);' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateZ/16*(Lip_FACS_Ctrl.Outside_Follow);}}' + '\nelse{' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.translateY = (-System_Lip_FACS_lower_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)-System_Lip_FACS_lower_bar_follow_grp.translateZ/8-Lip_FACS_lower_bar_ctrl.translateY/1.2;' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateY/8*(Lip_FACS_Ctrl.Down_Follow)+System_Lip_FACS_lower_bar_follow_grp.translateZ/8*(Lip_FACS_Ctrl.Outside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.translateY = (-System_Lip_FACS_lower_bar_follow_grp.translateY/2*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow)-Lip_FACS_lower_bar_ctrl.translateY/1.2;' + '\nLower_lip_FACS_follow_grp.translateZ = System_Lip_FACS_lower_bar_follow_grp.translateY/8*(Lip_FACS_Ctrl.Down_Follow)+System_Lip_FACS_lower_bar_follow_grp.translateZ/16*(Lip_FACS_Ctrl.Outside_Follow);}}' + '\nLower_lip_FACS_follow_grp.translateX = System_Lip_FACS_lower_bar_follow_grp.translateX/16*(Lip_FACS_Ctrl.Side_Follow);' + '\nif(System_Lip_FACS_lower_bar_follow_grp.translateZ<0){' + '\nLower_lip_FACS_follow_grp.rotateX = System_Lip_FACS_lower_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Lower_lip_FACS_follow_grp.rotateX = System_Lip_FACS_lower_bar_follow_grp.translateZ*8/$sumXYZ*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//Lip_Master' + '\nif(Lip_FACS_bar_ctrl.translateZ<0){' + '\nLip_Master_FACS_follow_grp.translateZ = Lip_FACS_bar_ctrl.translateZ/6*(Lip_FACS_Ctrl.Inside_Follow);}' + '\nelse{Lip_Master_FACS_follow_grp.translateZ = Lip_FACS_bar_ctrl.translateZ/2.5*(Lip_FACS_Ctrl.Outside_Follow);}' + '\n//L_lip_upper_side' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_upper_side_FACS_follow_grp.translateX =(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_upper_side_FACS_follow_grp.translateX=0;}' + '\n//R_lip_upper_side' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_upper_side_FACS_follow_grp.translateX =(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_upper_side_FACS_follow_grp.translateX=0;}' + '\n//L_lip_lower_side' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_lower_side_FACS_follow_grp.translateX =(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_lower_side_FACS_follow_grp.translateX=0;}' + '\n//R_lip_lower_side' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_lower_side_FACS_follow_grp.translateX =(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_lower_side_FACS_follow_grp.translateX=0;}' + '\n//L_lip_upper_side_02' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_upper_side_02_FACS_follow_grp.translateX =(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_upper_side_02_FACS_follow_grp.translateX=0;}' + '\n//R_lip_upper_side_02' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_upper_side_02_FACS_follow_grp.translateX =(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_upper_side_02_FACS_follow_grp.translateX=0;}' + '\n//L_lip_lower_side_02' + '\nif(System_Lip_FACS_L_bar_follow_grp.translateY<0){' + '\nL_lip_lower_side_02_FACS_follow_grp.translateX =(System_Lip_FACS_L_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{L_lip_lower_side_02_FACS_follow_grp.translateX=0;}' + '\n//R_lip_lower_side_02' + '\nif(System_Lip_FACS_R_bar_follow_grp.translateY<0){' + '\nR_lip_lower_side_02_FACS_follow_grp.translateX =(System_Lip_FACS_R_bar_follow_grp.translateY/3*(1-Lip_FACS_Ctrl.Open_Follow))*(Lip_FACS_Ctrl.Down_Follow);}' + '\nelse{R_lip_lower_side_02_FACS_follow_grp.translateX=0;}',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_FACS_System_expression')
        if 'Lip 10 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\nif(L_lip_corner_Ctrl.Zip>Lip_Master_ctrl.Zip_val*2+10){' + '\nsetAttr L_lip_corner_Ctrl.Zip (Lip_Master_ctrl.Zip_val*2+10);}' + '\nif(R_lip_corner_Ctrl.Zip>Lip_Master_ctrl.Zip_val*2+10){' + '\nsetAttr R_lip_corner_Ctrl.Zip (Lip_Master_ctrl.Zip_val*2+10);}' + '\n//Lip Corner Zip Attribute' + '\nfloat $L_first_var = 0;' + '\nfloat $R_first_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<3.333){' + '\n$L_first_var = L_lip_corner_Ctrl.Zip;}' + '\nelse{$L_first_var = 3.333;}' + '\nif(R_lip_corner_Ctrl.Zip<3.333){' + '\n$R_first_var = R_lip_corner_Ctrl.Zip;}' + '\nelse{$R_first_var = 3.333;}' + '\nL_lip_corner_up_zip_follow_grp.translateX = -((System_L_lip_corner_jnt.translateX+L_lip_corner_up_Ctrl.translateX) - (System_L_lip_lower_corner_jnt.translateX+L_lip_corner_down_Ctrl.translateX))*0.5*($L_first_var/3.33);' + '\nL_lip_corner_up_zip_follow_grp.translateY = -((System_L_lip_corner_jnt.translateY+L_lip_corner_up_Ctrl.translateY) - (System_L_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY))*0.5*($L_first_var/3.33);' + '\nL_lip_corner_up_zip_follow_grp.translateZ = -((System_L_lip_corner_jnt.translateZ+L_lip_corner_up_Ctrl.translateZ) - (System_L_lip_lower_corner_jnt.translateZ+L_lip_corner_down_Ctrl.translateZ))*0.5*($L_first_var/3.33);' + '\nL_lip_corner_down_zip_follow_grp.translateX = ((System_L_lip_corner_jnt.translateX+L_lip_corner_up_Ctrl.translateX) - (System_L_lip_lower_corner_jnt.translateX+L_lip_corner_down_Ctrl.translateX))*0.5*($L_first_var/3.33);' + '\nL_lip_corner_down_zip_follow_grp.translateY = ((System_L_lip_corner_jnt.translateY+L_lip_corner_up_Ctrl.translateY) - (System_L_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ-Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY))*0.5*($L_first_var/3.33);' + '\nL_lip_corner_down_zip_follow_grp.translateZ = ((System_L_lip_corner_jnt.translateZ+L_lip_corner_up_Ctrl.translateZ) - (System_L_lip_lower_corner_jnt.translateZ+L_lip_corner_down_Ctrl.translateZ))*0.5*($L_first_var/3.33);' + '\nR_lip_corner_up_zip_follow_grp.translateX = -((System_R_lip_corner_jnt.translateX+R_lip_corner_up_Ctrl.translateX) - (System_R_lip_lower_corner_jnt.translateX+R_lip_corner_down_Ctrl.translateX))*0.5*($R_first_var/3.33);' + '\nR_lip_corner_up_zip_follow_grp.translateY = -((System_R_lip_corner_jnt.translateY+R_lip_corner_up_Ctrl.translateY) - (System_R_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY))*0.5*($R_first_var/3.33);' + '\nR_lip_corner_up_zip_follow_grp.translateZ = -((System_R_lip_corner_jnt.translateZ+R_lip_corner_up_Ctrl.translateZ) - (System_R_lip_lower_corner_jnt.translateZ+R_lip_corner_down_Ctrl.translateZ))*0.5*($R_first_var/3.33);' + '\nR_lip_corner_down_zip_follow_grp.translateX = ((System_R_lip_corner_jnt.translateX+R_lip_corner_up_Ctrl.translateX) - (System_R_lip_lower_corner_jnt.translateX+R_lip_corner_down_Ctrl.translateX))*0.5*($R_first_var/3.33);' + '\nR_lip_corner_down_zip_follow_grp.translateY = ((System_R_lip_corner_jnt.translateY+R_lip_corner_up_Ctrl.translateY) - (System_R_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ-Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY))*0.5*($R_first_var/3.33);' + '\nR_lip_corner_down_zip_follow_grp.translateZ = ((System_R_lip_corner_jnt.translateZ+R_lip_corner_up_Ctrl.translateZ) - (System_R_lip_lower_corner_jnt.translateZ+R_lip_corner_down_Ctrl.translateZ))*0.5*($R_first_var/3.33);' + '\n//Side_Lip Zip Attribute' + '\nfloat $L_second_var = 0;' + '\nfloat $R_second_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<6.66+Lip_Master_ctrl.Zip_val){' + '\n$L_second_var = L_lip_corner_Ctrl.Zip-Lip_Master_ctrl.Zip_val;}' + '\nelse{$L_second_var = 6.66;}' + '\nif($L_second_var<0){' + '\n$L_second_var = 0;}' + '\nif(R_lip_corner_Ctrl.Zip<6.66+Lip_Master_ctrl.Zip_val){' + '\n$R_second_var = R_lip_corner_Ctrl.Zip-Lip_Master_ctrl.Zip_val;}' + '\nelse{$R_second_var = 6.66;}' + '\nif($R_second_var<0){' + '\n$R_second_var = 0;}' + '\nL_lip_upper_side_zip_follow_grp.translateX = -((System_L_lip_upper_side_jnt.translateX+L_lip_upper_side_ctrl.translateX+L_lip_corner_up_Ctrl.translateX*0.5+Upper_lip_ctrl.translateX*0.5+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX*0.5) - (System_L_lip_lower_side_jnt.translateX+L_lip_lower_side_ctrl.translateX+L_lip_corner_down_Ctrl.translateX*0.5+Lower_lip_ctrl.translateX*0.5+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX*0.5))*0.5*($L_second_var/(6.66));' + '\nL_lip_upper_side_zip_follow_grp.translateY = -((System_L_lip_upper_side_jnt.translateY+L_lip_upper_side_ctrl.translateY+L_lip_corner_up_Ctrl.translateY*0.5+Upper_lip_ctrl.translateY*0.5+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY*0.5) - (System_L_lip_lower_side_jnt.translateY+L_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.169*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.169*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY*0.5+Lower_lip_ctrl.translateY*0.5+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY*0.5))*0.5*($L_second_var/(6.66));' + '\nL_lip_upper_side_zip_follow_grp.translateZ = -((System_L_lip_upper_side_jnt.translateZ+L_lip_upper_side_ctrl.translateZ+L_lip_corner_up_Ctrl.translateZ*0.5+Upper_lip_ctrl.translateZ*0.5+Upper_lip_Master_ctrl.translateZ) - (System_L_lip_lower_side_jnt.translateZ+L_lip_lower_side_ctrl.translateZ+L_lip_corner_down_Ctrl.translateZ*0.5+Lower_lip_ctrl.translateZ*0.5+Lower_lip_Master_ctrl.translateZ))*0.5*($L_second_var/(6.66));' + '\nL_lip_lower_side_zip_follow_grp.translateX = ((System_L_lip_upper_side_jnt.translateX+L_lip_upper_side_ctrl.translateX+L_lip_corner_up_Ctrl.translateX*0.5+Upper_lip_ctrl.translateX*0.5+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX*0.5) - (System_L_lip_lower_side_jnt.translateX+L_lip_lower_side_ctrl.translateX+L_lip_corner_down_Ctrl.translateX*0.5+Lower_lip_ctrl.translateX*0.5+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX*0.5))*0.5*($L_second_var/(6.66));' + '\nL_lip_lower_side_zip_follow_grp.translateY = ((System_L_lip_upper_side_jnt.translateY+L_lip_upper_side_ctrl.translateY+L_lip_corner_up_Ctrl.translateY*0.5+Upper_lip_ctrl.translateY*0.5+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY*0.5) - (System_L_lip_lower_side_jnt.translateY+L_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.169*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.169*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY*0.5+Lower_lip_ctrl.translateY*0.5+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY*0.5))*0.5*($L_second_var/(6.66));' + '\nL_lip_lower_side_zip_follow_grp.translateZ = ((System_L_lip_upper_side_jnt.translateZ+L_lip_upper_side_ctrl.translateZ+L_lip_corner_up_Ctrl.translateZ*0.5+Upper_lip_ctrl.translateZ*0.5+Upper_lip_Master_ctrl.translateZ) - (System_L_lip_lower_side_jnt.translateZ+L_lip_lower_side_ctrl.translateZ+L_lip_corner_down_Ctrl.translateZ*0.5+Lower_lip_ctrl.translateZ*0.5+Lower_lip_Master_ctrl.translateZ))*0.5*($L_second_var/(6.66));' + '\nR_lip_upper_side_zip_follow_grp.translateX = -((System_R_lip_upper_side_jnt.translateX+R_lip_upper_side_ctrl.translateX+R_lip_corner_up_Ctrl.translateX*0.5-Upper_lip_ctrl.translateX*0.5-Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX*0.5) - (System_R_lip_lower_side_jnt.translateX+R_lip_lower_side_ctrl.translateX+R_lip_corner_down_Ctrl.translateX*0.5-Lower_lip_ctrl.translateX*0.5-Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX*0.5))*0.5*($R_second_var/(6.66));' + '\nR_lip_upper_side_zip_follow_grp.translateY = -((System_R_lip_upper_side_jnt.translateY+R_lip_upper_side_ctrl.translateY+R_lip_corner_up_Ctrl.translateY*0.5+Upper_lip_ctrl.translateY*0.5+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY*0.5) - (System_R_lip_lower_side_jnt.translateY+R_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.169*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.169*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY*0.5+Lower_lip_ctrl.translateY*0.5+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY*0.5))*0.5*($R_second_var/6.66);' + '\nR_lip_upper_side_zip_follow_grp.translateZ = -((System_R_lip_upper_side_jnt.translateZ+R_lip_upper_side_ctrl.translateZ+R_lip_corner_up_Ctrl.translateZ*0.5+Upper_lip_ctrl.translateZ*0.5+Upper_lip_Master_ctrl.translateZ) - (System_R_lip_lower_side_jnt.translateZ+R_lip_lower_side_ctrl.translateZ+R_lip_corner_down_Ctrl.translateZ*0.5+Lower_lip_ctrl.translateZ*0.5+Lower_lip_Master_ctrl.translateZ))*0.5*($R_second_var/6.66);' + '\nR_lip_lower_side_zip_follow_grp.translateX = ((System_R_lip_upper_side_jnt.translateX+R_lip_upper_side_ctrl.translateX+R_lip_corner_up_Ctrl.translateX*0.5-Upper_lip_ctrl.translateX*0.5-Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX*0.5) - (System_R_lip_lower_side_jnt.translateX+R_lip_lower_side_ctrl.translateX+R_lip_corner_down_Ctrl.translateX*0.5-Lower_lip_ctrl.translateX*0.5-Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX*0.5))*0.5*($R_second_var/(6.66));' + '\nR_lip_lower_side_zip_follow_grp.translateY = ((System_R_lip_upper_side_jnt.translateY+R_lip_upper_side_ctrl.translateY+R_lip_corner_up_Ctrl.translateY*0.5+Upper_lip_ctrl.translateY*0.5+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY*0.5) - (System_R_lip_lower_side_jnt.translateY+R_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.169*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.169*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY*0.5+Lower_lip_ctrl.translateY*0.5+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY*0.5))*0.5*($R_second_var/6.66);' + '\nR_lip_lower_side_zip_follow_grp.translateZ = ((System_R_lip_upper_side_jnt.translateZ+R_lip_upper_side_ctrl.translateZ+R_lip_corner_up_Ctrl.translateZ*0.5+Upper_lip_ctrl.translateZ*0.5+Upper_lip_Master_ctrl.translateZ) - (System_R_lip_lower_side_jnt.translateZ+R_lip_lower_side_ctrl.translateZ+R_lip_corner_down_Ctrl.translateZ*0.5+Lower_lip_ctrl.translateZ*0.5+Lower_lip_Master_ctrl.translateZ))*0.5*($R_second_var/6.66);' + '\n//Upper_down_Lip Zip Attribute' + '\nfloat $L_third_var = 0;' + '\nfloat $R_third_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<9.999+(Lip_Master_ctrl.Zip_val*2)){' + '\n$L_third_var = L_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val*2);}' + '\nelse{$L_third_var = 9.999;}' + '\nif($L_third_var<0){' + '\n$L_third_var = 0;}' + '\nif(R_lip_corner_Ctrl.Zip<9.999+(Lip_Master_ctrl.Zip_val*2)){' + '\n$R_third_var = R_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val*2);}' + '\nelse{$R_third_var = 9.999;}' + '\nif($R_third_var<0){' + '\n$R_third_var = 0;}' + '\nL_Upper_lip_ctrl_zip_follow_grp.translateX = -((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX+L_lip_upper_side_ctrl.translateX/2.3-R_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_third_var/9.99)/2;' + '\nL_Upper_lip_ctrl_zip_follow_grp.translateY = -((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+L_lip_upper_side_ctrl.translateY/2.3+R_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($L_third_var/9.99)/2;' + '\nL_Upper_lip_ctrl_zip_follow_grp.translateZ = -((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+L_lip_upper_side_ctrl.translateZ/2.3+R_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($L_third_var/9.99)/2;' + '\nL_Lower_lip_ctrl_zip_follow_grp.translateX = ((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX+L_lip_upper_side_ctrl.translateX/2.3-R_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_third_var/9.99)/2;' + '\nL_Lower_lip_ctrl_zip_follow_grp.translateY = ((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+L_lip_upper_side_ctrl.translateY/2.3+R_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($L_third_var/9.99)/2;' + '\nL_Lower_lip_ctrl_zip_follow_grp.translateZ = ((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+L_lip_upper_side_ctrl.translateZ/2.3+R_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($L_third_var/9.99)/2;' + '\nR_Upper_lip_ctrl_zip_follow_grp.translateX = -((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX-R_lip_upper_side_ctrl.translateX/2.3+L_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_third_var/9.99)/2;' + '\nR_Upper_lip_ctrl_zip_follow_grp.translateY = -((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+R_lip_upper_side_ctrl.translateY/2.3+L_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($R_third_var/9.99)/2;' + '\nR_Upper_lip_ctrl_zip_follow_grp.translateZ = -((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+R_lip_upper_side_ctrl.translateZ/2.3+L_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($R_third_var/9.99)/2;' + '\nR_Lower_lip_ctrl_zip_follow_grp.translateX = ((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX-R_lip_upper_side_ctrl.translateX/2.3+L_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_third_var/9.99)/2;' + '\nR_Lower_lip_ctrl_zip_follow_grp.translateY = ((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+R_lip_upper_side_ctrl.translateY/2.3+L_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($R_third_var/9.99)/2;' + '\nR_Lower_lip_ctrl_zip_follow_grp.translateZ = ((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+R_lip_upper_side_ctrl.translateZ/2.3+L_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($R_third_var/9.99)/2;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_Zip_Attribute_expression')
        if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\nif(L_lip_corner_Ctrl.Zip>Lip_Master_ctrl.Zip_val*2+30){' + '\nsetAttr L_lip_corner_Ctrl.Zip (Lip_Master_ctrl.Zip_val*2+30);}' + '\nif(R_lip_corner_Ctrl.Zip>Lip_Master_ctrl.Zip_val*2+30){' + '\nsetAttr R_lip_corner_Ctrl.Zip (Lip_Master_ctrl.Zip_val*2+30);}' + '\n//Lip Corner Zip Attribute' + '\nfloat $L_first_var = 0;' + '\nfloat $R_first_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<2.5){' + '\n$L_first_var = L_lip_corner_Ctrl.Zip;}' + '\nelse{$L_first_var = 2.5;}' + '\nif(R_lip_corner_Ctrl.Zip<2.5){' + '\n$R_first_var = R_lip_corner_Ctrl.Zip;}' + '\nelse{$R_first_var = 2.5;}' + '\nL_lip_corner_up_zip_follow_grp.translateX = -((System_L_lip_corner_jnt.translateX+L_lip_corner_up_Ctrl.translateX) - (System_L_lip_lower_corner_jnt.translateX+L_lip_corner_down_Ctrl.translateX))*0.5*($L_first_var/2.5);' + '\nL_lip_corner_up_zip_follow_grp.translateY = -((System_L_lip_corner_jnt.translateY+L_lip_corner_up_Ctrl.translateY) - (System_L_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY))*0.5*($L_first_var/2.5);' + '\nL_lip_corner_up_zip_follow_grp.translateZ = -((System_L_lip_corner_jnt.translateZ+L_lip_corner_up_Ctrl.translateZ) - (System_L_lip_lower_corner_jnt.translateZ+L_lip_corner_down_Ctrl.translateZ))*0.5*($L_first_var/2.5);' + '\nL_lip_corner_down_zip_follow_grp.translateX = ((System_L_lip_corner_jnt.translateX+L_lip_corner_up_Ctrl.translateX) - (System_L_lip_lower_corner_jnt.translateX+L_lip_corner_down_Ctrl.translateX))*0.5*($L_first_var/2.5);' + '\nL_lip_corner_down_zip_follow_grp.translateY = ((System_L_lip_corner_jnt.translateY+L_lip_corner_up_Ctrl.translateY) - (System_L_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ-Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY))*0.5*($L_first_var/2.5);' + '\nL_lip_corner_down_zip_follow_grp.translateZ = ((System_L_lip_corner_jnt.translateZ+L_lip_corner_up_Ctrl.translateZ) - (System_L_lip_lower_corner_jnt.translateZ+L_lip_corner_down_Ctrl.translateZ))*0.5*($L_first_var/2.5);' + '\nR_lip_corner_up_zip_follow_grp.translateX = -((System_R_lip_corner_jnt.translateX+R_lip_corner_up_Ctrl.translateX) - (System_R_lip_lower_corner_jnt.translateX+R_lip_corner_down_Ctrl.translateX))*0.5*($R_first_var/2.5);' + '\nR_lip_corner_up_zip_follow_grp.translateY = -((System_R_lip_corner_jnt.translateY+R_lip_corner_up_Ctrl.translateY) - (System_R_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY))*0.5*($R_first_var/2.5);' + '\nR_lip_corner_up_zip_follow_grp.translateZ = -((System_R_lip_corner_jnt.translateZ+R_lip_corner_up_Ctrl.translateZ) - (System_R_lip_lower_corner_jnt.translateZ+R_lip_corner_down_Ctrl.translateZ))*0.5*($R_first_var/2.5);' + '\nR_lip_corner_down_zip_follow_grp.translateX = ((System_R_lip_corner_jnt.translateX+R_lip_corner_up_Ctrl.translateX) - (System_R_lip_lower_corner_jnt.translateX+R_lip_corner_down_Ctrl.translateX))*0.5*($R_first_var/2.5);' + '\nR_lip_corner_down_zip_follow_grp.translateY = ((System_R_lip_corner_jnt.translateY+R_lip_corner_up_Ctrl.translateY) - (System_R_lip_lower_corner_jnt.translateY+Jaw_Master_Ctrl.rotateX*-0.05*$sumXYZ-Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.05*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY))*0.5*($R_first_var/2.5);' + '\nR_lip_corner_down_zip_follow_grp.translateZ = ((System_R_lip_corner_jnt.translateZ+R_lip_corner_up_Ctrl.translateZ) - (System_R_lip_lower_corner_jnt.translateZ+R_lip_corner_down_Ctrl.translateZ))*0.5*($R_first_var/2.5);' + '\n//Side_02_Lip Zip Attribute' + '\nfloat $L_second_var = 0;' + '\nfloat $R_second_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<5+(Lip_Master_ctrl.Zip_val)){' + '\n$L_second_var = L_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val);}' + '\nelse{$L_second_var = 5;}' + '\nif($L_second_var<0){' + '\n$L_second_var = 0;}' + '\nif(R_lip_corner_Ctrl.Zip<5+(Lip_Master_ctrl.Zip_val)){' + '\n$R_second_var = R_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val);}' + '\nelse{$R_second_var = 5;}' + '\nif($R_second_var<0){' + '\n$R_second_var = 0;}' + '\nL_lip_upper_02_side_zip_follow_grp.translateX = -((System_L_lip_upper_side_02_jnt.translateX+L_lip_upper_side_ctrl.translateX/2+L_lip_corner_up_Ctrl.translateX/1.3+Upper_lip_ctrl.translateX/2.6+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/2.6) - (System_L_lip_lower_side_02_jnt.translateX+L_lip_lower_side_ctrl.translateX/2+L_lip_corner_down_Ctrl.translateX/1.3+Lower_lip_ctrl.translateX/2.6+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/2.6))*0.5*($L_second_var/(5));' + '\nL_lip_upper_02_side_zip_follow_grp.translateY = -((System_L_lip_upper_side_02_jnt.translateY+L_lip_upper_side_ctrl.translateY/2+L_lip_corner_up_Ctrl.translateY/1.3+Upper_lip_ctrl.translateY/2.6+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/2.6) - (System_L_lip_lower_side_02_jnt.translateY+L_lip_lower_side_ctrl.translateY/2+Jaw_Master_Ctrl.rotateX*-0.13*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.13*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY/1.3+Lower_lip_ctrl.translateY/2.6+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/2.6))*0.5*($L_second_var/(5));' + '\nL_lip_upper_02_side_zip_follow_grp.translateZ = -((System_L_lip_upper_side_02_jnt.translateZ+L_lip_upper_side_ctrl.translateZ/2+L_lip_corner_up_Ctrl.translateZ/1.3+Upper_lip_ctrl.translateZ/2.6+Upper_lip_Master_ctrl.translateZ) - (System_L_lip_lower_side_02_jnt.translateZ+L_lip_lower_side_ctrl.translateZ/2+L_lip_corner_down_Ctrl.translateZ/1.3+Lower_lip_ctrl.translateZ/2.6+Lower_lip_Master_ctrl.translateZ))*0.5*($L_second_var/(5));' + '\nL_lip_lower_02_side_zip_follow_grp.translateX = ((System_L_lip_upper_side_02_jnt.translateX+L_lip_upper_side_ctrl.translateX/2+L_lip_corner_up_Ctrl.translateX/1.3+Upper_lip_ctrl.translateX/2.6+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/2.6) - (System_L_lip_lower_side_02_jnt.translateX+L_lip_lower_side_ctrl.translateX/2+L_lip_corner_down_Ctrl.translateX/1.3+Lower_lip_ctrl.translateX/2.6+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/2.6))*0.5*($L_second_var/(5));' + '\nL_lip_lower_02_side_zip_follow_grp.translateY = ((System_L_lip_upper_side_02_jnt.translateY+L_lip_upper_side_ctrl.translateY/2+L_lip_corner_up_Ctrl.translateY/1.3+Upper_lip_ctrl.translateY/2.6+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/2.6) - (System_L_lip_lower_side_02_jnt.translateY+L_lip_lower_side_ctrl.translateY/2+Jaw_Master_Ctrl.rotateX*-0.13*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.13*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY/1.3+Lower_lip_ctrl.translateY/2.6+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/2.6))*0.5*($L_second_var/(5));' + '\nL_lip_lower_02_side_zip_follow_grp.translateZ = ((System_L_lip_upper_side_02_jnt.translateZ+L_lip_upper_side_ctrl.translateZ/2+L_lip_corner_up_Ctrl.translateZ/1.3+Upper_lip_ctrl.translateZ/2.6+Upper_lip_Master_ctrl.translateZ) - (System_L_lip_lower_side_02_jnt.translateZ+L_lip_lower_side_ctrl.translateZ/2+L_lip_corner_down_Ctrl.translateZ/1.3+Lower_lip_ctrl.translateZ/2.6+Lower_lip_Master_ctrl.translateZ))*0.5*($L_second_var/(5));' + '\nR_lip_upper_02_side_zip_follow_grp.translateX = -((System_R_lip_upper_side_02_jnt.translateX-R_lip_upper_side_ctrl.translateX/2-R_lip_corner_up_Ctrl.translateX/1.3+Upper_lip_ctrl.translateX/2.6+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/2.6) - (System_R_lip_lower_side_02_jnt.translateX-R_lip_lower_side_ctrl.translateX/2-R_lip_corner_down_Ctrl.translateX/1.3+Lower_lip_ctrl.translateX/2.6+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/2.6))*0.5*($R_second_var/(5));' + '\nR_lip_upper_02_side_zip_follow_grp.translateY = -((System_R_lip_upper_side_02_jnt.translateY+R_lip_upper_side_ctrl.translateY/2+R_lip_corner_up_Ctrl.translateY/1.3+Upper_lip_ctrl.translateY/2.6+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/2.6) - (System_R_lip_lower_side_02_jnt.translateY+R_lip_lower_side_ctrl.translateY/2+Jaw_Master_Ctrl.rotateX*-0.13*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.13*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY/1.3+Lower_lip_ctrl.translateY/2.6+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/2.6))*0.5*($R_second_var/5);' + '\nR_lip_upper_02_side_zip_follow_grp.translateZ = -((System_R_lip_upper_side_02_jnt.translateZ+R_lip_upper_side_ctrl.translateZ/2+R_lip_corner_up_Ctrl.translateZ/1.3+Upper_lip_ctrl.translateZ/2.6+Upper_lip_Master_ctrl.translateZ) - (System_R_lip_lower_side_02_jnt.translateZ+R_lip_lower_side_ctrl.translateZ/2+R_lip_corner_down_Ctrl.translateZ/1.3+Lower_lip_ctrl.translateZ/2.6+Lower_lip_Master_ctrl.translateZ))*0.5*($R_second_var/5);' + '\nR_lip_lower_02_side_zip_follow_grp.translateX = ((System_R_lip_upper_side_02_jnt.translateX-R_lip_upper_side_ctrl.translateX/2-R_lip_corner_up_Ctrl.translateX/1.3+Upper_lip_ctrl.translateX/2.6+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/2.6) - (System_R_lip_lower_side_02_jnt.translateX-R_lip_lower_side_ctrl.translateX/2-R_lip_corner_down_Ctrl.translateX/1.3+Lower_lip_ctrl.translateX/2.6+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/2.6))*0.5*($R_second_var/(5));' + '\nR_lip_lower_02_side_zip_follow_grp.translateY = ((System_R_lip_upper_side_02_jnt.translateY+R_lip_upper_side_ctrl.translateY/2+R_lip_corner_up_Ctrl.translateY/1.3+Upper_lip_ctrl.translateY/2.6+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/2.6) - (System_R_lip_lower_side_02_jnt.translateY+R_lip_lower_side_ctrl.translateY/2+Jaw_Master_Ctrl.rotateX*-0.13*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.13*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY/1.3+Lower_lip_ctrl.translateY/2.6+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/2.6))*0.5*($R_second_var/5);' + '\nR_lip_lower_02_side_zip_follow_grp.translateZ = ((System_R_lip_upper_side_02_jnt.translateZ+R_lip_upper_side_ctrl.translateZ/2+R_lip_corner_up_Ctrl.translateZ/1.3+Upper_lip_ctrl.translateZ/2.6+Upper_lip_Master_ctrl.translateZ) - (System_R_lip_lower_side_02_jnt.translateZ+R_lip_lower_side_ctrl.translateZ/2+R_lip_corner_down_Ctrl.translateZ/1.3+Lower_lip_ctrl.translateZ/2.6+Lower_lip_Master_ctrl.translateZ))*0.5*($R_second_var/5);' + '\n//Side_Lip Zip Attribute' + '\nfloat $L_third_var = 0;' + '\nfloat $R_third_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<7.5+(Lip_Master_ctrl.Zip_val*2)){' + '\n$L_third_var = L_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val*2);}' + '\nelse{$L_third_var = 7.5;}' + '\nif($L_third_var<0){' + '\n$L_third_var = 0;}' + '\nif(R_lip_corner_Ctrl.Zip<7.5+(Lip_Master_ctrl.Zip_val*2)){' + '\n$R_third_var = R_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val*2);}' + '\nelse{$R_third_var = 7.5;}' + '\nif($R_third_var<0){' + '\n$R_third_var = 0;}' + '\nL_lip_upper_side_zip_follow_grp.translateX = -((System_L_lip_upper_side_jnt.translateX+L_lip_upper_side_ctrl.translateX+L_lip_corner_up_Ctrl.translateX/2.6+Upper_lip_ctrl.translateX/1.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/1.3) - (System_L_lip_lower_side_jnt.translateX+L_lip_lower_side_ctrl.translateX+L_lip_corner_down_Ctrl.translateX/2.6+Lower_lip_ctrl.translateX/1.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/1.3))*0.5*($L_third_var/(7.5));' + '\nL_lip_upper_side_zip_follow_grp.translateY = -((System_L_lip_upper_side_jnt.translateY+L_lip_upper_side_ctrl.translateY+L_lip_corner_up_Ctrl.translateY/2.6+Upper_lip_ctrl.translateY/1.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/1.3) - (System_L_lip_lower_side_jnt.translateY+L_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.16*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.16*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY/2.6+Lower_lip_ctrl.translateY/1.3+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/1.3))*0.5*($L_third_var/(7.5));' + '\nL_lip_upper_side_zip_follow_grp.translateZ = -((System_L_lip_upper_side_jnt.translateZ+L_lip_upper_side_ctrl.translateZ+L_lip_corner_up_Ctrl.translateZ/2.6+Upper_lip_ctrl.translateZ/1.3+Upper_lip_Master_ctrl.translateZ) - (System_L_lip_lower_side_jnt.translateZ+L_lip_lower_side_ctrl.translateZ+L_lip_corner_down_Ctrl.translateZ/2.6+Lower_lip_ctrl.translateZ/1.3+Lower_lip_Master_ctrl.translateZ))*0.5*($L_third_var/(7.5));' + '\nL_lip_lower_side_zip_follow_grp.translateX = ((System_L_lip_upper_side_jnt.translateX+L_lip_upper_side_ctrl.translateX+L_lip_corner_up_Ctrl.translateX/2.6+Upper_lip_ctrl.translateX/1.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/1.3) - (System_L_lip_lower_side_jnt.translateX+L_lip_lower_side_ctrl.translateX+L_lip_corner_down_Ctrl.translateX/2.6+Lower_lip_ctrl.translateX/1.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/1.3))*0.5*($L_third_var/(7.5));' + '\nL_lip_lower_side_zip_follow_grp.translateY = ((System_L_lip_upper_side_jnt.translateY+L_lip_upper_side_ctrl.translateY+L_lip_corner_up_Ctrl.translateY/2.6+Upper_lip_ctrl.translateY/1.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/1.3) - (System_L_lip_lower_side_jnt.translateY+L_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.16*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.16*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+L_lip_corner_down_Ctrl.translateY/2.6+Lower_lip_ctrl.translateY/1.3+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/1.3))*0.5*($L_third_var/(7.5));' + '\nL_lip_lower_side_zip_follow_grp.translateZ = ((System_L_lip_upper_side_jnt.translateZ+L_lip_upper_side_ctrl.translateZ+L_lip_corner_up_Ctrl.translateZ/2.6+Upper_lip_ctrl.translateZ/1.3+Upper_lip_Master_ctrl.translateZ) - (System_L_lip_lower_side_jnt.translateZ+L_lip_lower_side_ctrl.translateZ+L_lip_corner_down_Ctrl.translateZ/2.6+Lower_lip_ctrl.translateZ/1.3+Lower_lip_Master_ctrl.translateZ))*0.5*($L_third_var/(7.5));' + '\nR_lip_upper_side_zip_follow_grp.translateX = -((System_R_lip_upper_side_jnt.translateX+R_lip_upper_side_ctrl.translateX+R_lip_corner_up_Ctrl.translateX/2.6-Upper_lip_ctrl.translateX/1.3-Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/1.3) - (System_R_lip_lower_side_jnt.translateX+R_lip_lower_side_ctrl.translateX+R_lip_corner_down_Ctrl.translateX/2.6-Lower_lip_ctrl.translateX/1.3-Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/1.3))*0.5*($R_third_var/(7.5));' + '\nR_lip_upper_side_zip_follow_grp.translateY = -((System_R_lip_upper_side_jnt.translateY+R_lip_upper_side_ctrl.translateY+R_lip_corner_up_Ctrl.translateY/2.6+Upper_lip_ctrl.translateY/1.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/1.3) - (System_R_lip_lower_side_jnt.translateY+R_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.16*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.16*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY/2.6+Lower_lip_ctrl.translateY/1.3+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/1.3))*0.5*($R_third_var/7.5);' + '\nR_lip_upper_side_zip_follow_grp.translateZ = -((System_R_lip_upper_side_jnt.translateZ+R_lip_upper_side_ctrl.translateZ+R_lip_corner_up_Ctrl.translateZ/2.6+Upper_lip_ctrl.translateZ/1.3+Upper_lip_Master_ctrl.translateZ) - (System_R_lip_lower_side_jnt.translateZ+R_lip_lower_side_ctrl.translateZ+R_lip_corner_down_Ctrl.translateZ/2.6+Lower_lip_ctrl.translateZ/1.3+Lower_lip_Master_ctrl.translateZ))*0.5*($R_third_var/7.5);' + '\nR_lip_lower_side_zip_follow_grp.translateX = ((System_R_lip_upper_side_jnt.translateX+R_lip_upper_side_ctrl.translateX+R_lip_corner_up_Ctrl.translateX/2.6-Upper_lip_ctrl.translateX/1.3-Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX/1.3) - (System_R_lip_lower_side_jnt.translateX+R_lip_lower_side_ctrl.translateX+R_lip_corner_down_Ctrl.translateX/2.6-Lower_lip_ctrl.translateX/1.3-Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX/1.3))*0.5*($R_third_var/(7.5));' + '\nR_lip_lower_side_zip_follow_grp.translateY = ((System_R_lip_upper_side_jnt.translateY+R_lip_upper_side_ctrl.translateY+R_lip_corner_up_Ctrl.translateY/2.6+Upper_lip_ctrl.translateY/1.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY/1.3) - (System_R_lip_lower_side_jnt.translateY+R_lip_lower_side_ctrl.translateY+Jaw_Master_Ctrl.rotateX*-0.16*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.16*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+R_lip_corner_down_Ctrl.translateY/2.6+Lower_lip_ctrl.translateY/1.3+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY/1.3))*0.5*($R_third_var/7.5);' + '\nR_lip_lower_side_zip_follow_grp.translateZ = ((System_R_lip_upper_side_jnt.translateZ+R_lip_upper_side_ctrl.translateZ+R_lip_corner_up_Ctrl.translateZ/2.6+Upper_lip_ctrl.translateZ/1.3+Upper_lip_Master_ctrl.translateZ) - (System_R_lip_lower_side_jnt.translateZ+R_lip_lower_side_ctrl.translateZ+R_lip_corner_down_Ctrl.translateZ/2.6+Lower_lip_ctrl.translateZ/1.3+Lower_lip_Master_ctrl.translateZ))*0.5*($R_third_var/7.5);' + '\n//Upper_down_Lip Zip Attribute' + '\nfloat $L_four_var = 0;' + '\nfloat $R_four_var = 0;' + '\nif(L_lip_corner_Ctrl.Zip<10+(Lip_Master_ctrl.Zip_val*4)){' + '\n$L_four_var = L_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val*4);}' + '\nelse{$L_four_var = 10;}' + '\nif($L_four_var<0){' + '\n$L_four_var = 0;}' + '\nif(R_lip_corner_Ctrl.Zip<10+(Lip_Master_ctrl.Zip_val*4)){' + '\n$R_four_var = R_lip_corner_Ctrl.Zip-(Lip_Master_ctrl.Zip_val*4);}' + '\nelse{$R_four_var = 10;}' + '\nif($R_four_var<0){' + '\n$R_four_var = 0;}' + '\nL_Upper_lip_ctrl_zip_follow_grp.translateX = -((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX+L_lip_upper_side_ctrl.translateX/2.3-R_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_four_var/10)/2;' + '\nL_Upper_lip_ctrl_zip_follow_grp.translateY = -((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+L_lip_upper_side_ctrl.translateY/2.3+R_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($L_four_var/10)/2;' + '\nL_Upper_lip_ctrl_zip_follow_grp.translateZ = -((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+L_lip_upper_side_ctrl.translateZ/2.3+R_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($L_four_var/10)/2;' + '\nL_Lower_lip_ctrl_zip_follow_grp.translateX = ((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX+L_lip_upper_side_ctrl.translateX/2.3-R_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_four_var/10)/2;' + '\nL_Lower_lip_ctrl_zip_follow_grp.translateY = ((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+L_lip_upper_side_ctrl.translateY/2.3+R_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($L_four_var/10)/2;' + '\nL_Lower_lip_ctrl_zip_follow_grp.translateZ = ((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+L_lip_upper_side_ctrl.translateZ/2.3+R_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($L_four_var/10)/2;' + '\nR_Upper_lip_ctrl_zip_follow_grp.translateX = -((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX-R_lip_upper_side_ctrl.translateX/2.3+L_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_four_var/10)/2;' + '\nR_Upper_lip_ctrl_zip_follow_grp.translateY = -((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+R_lip_upper_side_ctrl.translateY/2.3+L_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($R_four_var/10)/2;' + '\nR_Upper_lip_ctrl_zip_follow_grp.translateZ = -((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+R_lip_upper_side_ctrl.translateZ/2.3+L_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($R_four_var/10)/2;' + '\nR_Lower_lip_ctrl_zip_follow_grp.translateX = ((System_upper_lip_jnt.translateX+Upper_lip_ctrl.translateX-R_lip_upper_side_ctrl.translateX/2.3+L_lip_upper_side_ctrl.translateX/2.3+Upper_lip_Master_ctrl.translateX+Upper_lip_FACS_follow_grp.translateX) - (System_Lower_lip_jnt.translateX+Lower_lip_ctrl.translateX+L_lip_lower_side_ctrl.translateX/2.3-R_lip_lower_side_ctrl.translateX/2.3+Lower_lip_Master_ctrl.translateX+Lower_lip_FACS_follow_grp.translateX))*0.5*($L_four_var/10)/2;' + '\nR_Lower_lip_ctrl_zip_follow_grp.translateY = ((System_upper_lip_jnt.translateY+Upper_lip_ctrl.translateY+R_lip_upper_side_ctrl.translateY/2.3+L_lip_upper_side_ctrl.translateY/2.3+Upper_lip_Master_ctrl.translateY+Upper_lip_FACS_follow_grp.translateY) - (System_Lower_lip_jnt.translateY+Lower_lip_ctrl.translateY+L_lip_lower_side_ctrl.translateY/2.3+R_lip_lower_side_ctrl.translateY/2.3+Jaw_Master_Ctrl.rotateX*-0.189*$sumXYZ+Jaw_Master_Ctrl.translateY+Jaw_Master_FACS_follow_grp.rotateX*-0.189*$sumXYZ*(Lip_FACS_Ctrl.Open_Follow)+Lower_lip_Master_ctrl.translateY+Lower_lip_FACS_follow_grp.translateY))*0.5*($R_four_var/10)/2;' + '\nR_Lower_lip_ctrl_zip_follow_grp.translateZ = ((System_upper_lip_jnt.translateZ+Upper_lip_ctrl.translateZ+R_lip_upper_side_ctrl.translateZ/2.3+L_lip_upper_side_ctrl.translateZ/2.3+Upper_lip_Master_ctrl.translateZ) - (System_Lower_lip_jnt.translateZ+Lower_lip_ctrl.translateZ+L_lip_lower_side_ctrl.translateZ/2.3+R_lip_lower_side_ctrl.translateZ/2.3+Lower_lip_Master_ctrl.translateZ))*0.5*($R_four_var/10)/2;',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_Zip_Attribute_expression')
        if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_upper_outer_jnt', n='System_L_lip_upper_outer_jnt_grp')
            cmds.group('System_R_lip_upper_outer_jnt', n='System_R_lip_upper_outer_jnt_grp')
            cmds.group('L_lip_upper_outer_ctrl', n='L_lip_upper_outer_upper_side_follow_grp')
            cmds.group('R_lip_upper_outer_ctrl', n='R_lip_upper_outer_upper_side_follow_grp')
            cmds.group('L_lip_upper_outer_upper_side_follow_grp', n='L_lip_upper_outer_lip_corner_follow_grp')
            cmds.group('R_lip_upper_outer_upper_side_follow_grp', n='R_lip_upper_outer_lip_corner_follow_grp')
            cmds.group(n='System_L_lip_upper_outer_follow_grp', em=True)
            cmds.group(n='System_R_lip_upper_outer_follow_grp', em=True)
            cmds.group(n='System_L_lip_upper_outer_lip_corner_follow_ctrl_grp', em=True)
            cmds.group(n='System_R_lip_upper_outer_lip_corner_follow_ctrl_grp', em=True)
            cmds.pointConstraint('L_lip_upper_outer_ctrl', 'System_L_lip_upper_outer_follow_grp')
            cmds.delete('System_L_lip_upper_outer_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_lip_upper_outer_follow_grp', apply=True, t=True)
            cmds.pointConstraint('R_lip_upper_outer_ctrl', 'System_R_lip_upper_outer_follow_grp')
            cmds.delete('System_R_lip_upper_outer_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_R_lip_upper_outer_follow_grp', apply=True, t=True)
            cmds.pointConstraint('L_lip_upper_outer_ctrl', 'System_L_lip_upper_outer_lip_corner_follow_ctrl_grp')
            cmds.delete('System_L_lip_upper_outer_lip_corner_follow_ctrl_grp_pointConstraint1')
            cmds.makeIdentity('System_L_lip_upper_outer_lip_corner_follow_ctrl_grp', apply=True, t=True)
            cmds.pointConstraint('R_lip_upper_outer_ctrl', 'System_R_lip_upper_outer_lip_corner_follow_ctrl_grp')
            cmds.delete('System_R_lip_upper_outer_lip_corner_follow_ctrl_grp_pointConstraint1')
            cmds.makeIdentity('System_R_lip_upper_outer_lip_corner_follow_ctrl_grp', apply=True, t=True)
            cmds.addAttr('L_lip_upper_side_ctrl', ln='lip_upper_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_upper_side_ctrl.lip_upper_outer_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_upper_side_ctrl.lip_upper_outer_follow', 1)
            cmds.addAttr('R_lip_upper_side_ctrl', ln='lip_upper_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_upper_side_ctrl.lip_upper_outer_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_upper_side_ctrl.lip_upper_outer_follow', 1)
            cmds.addAttr('L_lip_corner_up_Ctrl', ln='lip_upper_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_up_Ctrl.lip_upper_outer_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_up_Ctrl.lip_upper_outer_follow', 1)
            cmds.addAttr('R_lip_corner_up_Ctrl', ln='lip_upper_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_up_Ctrl.lip_upper_outer_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_up_Ctrl.lip_upper_outer_follow', 1)
            cmds.parentConstraint('L_lip_upper_side_ctrl', 'System_L_lip_upper_outer_follow_grp', mo=True)
            cmds.parentConstraint('R_lip_upper_side_ctrl', 'System_R_lip_upper_outer_follow_grp', mo=True)
            cmds.parentConstraint('L_lip_upper_outer_ctrl', 'System_L_lip_upper_outer_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lip_upper_outer_ctrl', 'System_L_lip_upper_outer_jnt_grp', mo=True)
            cmds.parentConstraint('R_lip_upper_outer_ctrl', 'System_R_lip_upper_outer_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lip_upper_outer_ctrl', 'System_R_lip_upper_outer_jnt_grp', mo=True)
            cmds.parentConstraint('L_lip_corner_up_Ctrl', 'System_L_lip_upper_outer_lip_corner_follow_ctrl_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_up_Ctrl', 'System_R_lip_upper_outer_lip_corner_follow_ctrl_grp', mo=True)
        if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.group('System_L_lip_lower_outer_jnt', n='System_L_lip_lower_outer_jnt_grp')
            cmds.group('System_R_lip_lower_outer_jnt', n='System_R_lip_lower_outer_jnt_grp')
            cmds.group('L_lip_lower_outer_ctrl', n='L_lip_lower_outer_lower_side_follow_grp')
            cmds.group('R_lip_lower_outer_ctrl', n='R_lip_lower_outer_lower_side_follow_grp')
            cmds.group('L_lip_lower_outer_lower_side_follow_grp', n='L_lip_lower_outer_lip_corner_follow_grp')
            cmds.group('R_lip_lower_outer_lower_side_follow_grp', n='R_lip_lower_outer_lip_corner_follow_grp')
            cmds.group(n='System_L_lip_lower_outer_follow_grp', em=True)
            cmds.group(n='System_R_lip_lower_outer_follow_grp', em=True)
            cmds.group(n='System_L_lip_lower_outer_lip_corner_follow_ctrl_grp', em=True)
            cmds.group(n='System_R_lip_lower_outer_lip_corner_follow_ctrl_grp', em=True)
            cmds.group('L_lip_lower_outer_lip_corner_follow_grp', n='L_lip_lower_outer_jaw_follow_grp')
            cmds.group('R_lip_lower_outer_lip_corner_follow_grp', n='R_lip_lower_outer_jaw_follow_grp')
            cmds.parentConstraint('Jaw_Master_Ctrl', 'L_lip_lower_outer_jaw_follow_grp', mo=True)
            cmds.parentConstraint('Jaw_Master_Ctrl', 'R_lip_lower_outer_jaw_follow_grp', mo=True)
            cmds.pointConstraint('L_lip_lower_outer_ctrl', 'System_L_lip_lower_outer_follow_grp')
            cmds.delete('System_L_lip_lower_outer_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_lip_lower_outer_follow_grp', apply=True, t=True)
            cmds.pointConstraint('R_lip_lower_outer_ctrl', 'System_R_lip_lower_outer_follow_grp')
            cmds.delete('System_R_lip_lower_outer_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_R_lip_lower_outer_follow_grp', apply=True, t=True)
            cmds.pointConstraint('L_lip_lower_outer_ctrl', 'System_L_lip_lower_outer_lip_corner_follow_ctrl_grp')
            cmds.delete('System_L_lip_lower_outer_lip_corner_follow_ctrl_grp_pointConstraint1')
            cmds.makeIdentity('System_L_lip_lower_outer_lip_corner_follow_ctrl_grp', apply=True, t=True)
            cmds.pointConstraint('R_lip_lower_outer_ctrl', 'System_R_lip_lower_outer_lip_corner_follow_ctrl_grp')
            cmds.delete('System_R_lip_lower_outer_lip_corner_follow_ctrl_grp_pointConstraint1')
            cmds.makeIdentity('System_R_lip_lower_outer_lip_corner_follow_ctrl_grp', apply=True, t=True)
            cmds.addAttr('L_lip_lower_side_ctrl', ln='lip_lower_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_lower_side_ctrl.lip_lower_outer_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_lower_side_ctrl.lip_lower_outer_follow', 1)
            cmds.addAttr('R_lip_lower_side_ctrl', ln='lip_lower_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_lower_side_ctrl.lip_lower_outer_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_lower_side_ctrl.lip_lower_outer_follow', 1)
            cmds.addAttr('L_lip_corner_down_Ctrl', ln='lip_lower_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_down_Ctrl.lip_lower_outer_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_down_Ctrl.lip_lower_outer_follow', 1)
            cmds.addAttr('R_lip_corner_down_Ctrl', ln='lip_lower_outer_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_down_Ctrl.lip_lower_outer_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_down_Ctrl.lip_lower_outer_follow', 1)
            cmds.parentConstraint('L_lip_lower_side_ctrl', 'System_L_lip_lower_outer_follow_grp', mo=True)
            cmds.parentConstraint('R_lip_lower_side_ctrl', 'System_R_lip_lower_outer_follow_grp', mo=True)
            cmds.parentConstraint('L_lip_lower_outer_ctrl', 'System_L_lip_lower_outer_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lip_lower_outer_ctrl', 'System_L_lip_lower_outer_jnt_grp', mo=True)
            cmds.parentConstraint('R_lip_lower_outer_ctrl', 'System_R_lip_lower_outer_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lip_lower_outer_ctrl', 'System_R_lip_lower_outer_jnt_grp', mo=True)
            cmds.parentConstraint('L_lip_corner_down_Ctrl', 'System_L_lip_lower_outer_lip_corner_follow_ctrl_grp', mo=True)
            cmds.parentConstraint('R_lip_corner_down_Ctrl', 'System_R_lip_lower_outer_lip_corner_follow_ctrl_grp', mo=True)
            cmds.expression(
                s='\n//L_lip_upper_Outer Follow' + '\nif(System_L_lip_upper_outer_follow_grp.translateX>0){' + '\nL_lip_upper_outer_upper_side_follow_grp.translateX = System_L_lip_upper_outer_follow_grp.translateX/2*(L_lip_upper_side_ctrl.lip_upper_outer_follow);}' + '\nelse{L_lip_upper_outer_upper_side_follow_grp.translateX = System_L_lip_upper_outer_follow_grp.translateX/8*(L_lip_upper_side_ctrl.lip_upper_outer_follow);}' + '\nL_lip_upper_outer_upper_side_follow_grp.translateY = System_L_lip_upper_outer_follow_grp.translateY/2*(L_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nL_lip_upper_outer_upper_side_follow_grp.translateZ = System_L_lip_upper_outer_follow_grp.translateZ/2*(L_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nL_lip_upper_outer_upper_side_follow_grp.rotateX = System_L_lip_upper_outer_follow_grp.rotateX/6*(L_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nL_lip_upper_outer_upper_side_follow_grp.rotateY = System_L_lip_upper_outer_follow_grp.rotateY/6*(L_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nL_lip_upper_outer_upper_side_follow_grp.rotateZ = System_L_lip_upper_outer_follow_grp.rotateZ/6*(L_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nif(System_R_lip_upper_outer_follow_grp.translateX<0){' + '\nR_lip_upper_outer_upper_side_follow_grp.translateX = -System_R_lip_upper_outer_follow_grp.translateX/2*(R_lip_upper_side_ctrl.lip_upper_outer_follow);}' + '\nelse{R_lip_upper_outer_upper_side_follow_grp.translateX = -System_R_lip_upper_outer_follow_grp.translateX/8*(R_lip_upper_side_ctrl.lip_upper_outer_follow);}' + '\nR_lip_upper_outer_upper_side_follow_grp.translateY = System_R_lip_upper_outer_follow_grp.translateY/2*(R_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nR_lip_upper_outer_upper_side_follow_grp.translateZ = System_R_lip_upper_outer_follow_grp.translateZ/2*(R_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nR_lip_upper_outer_upper_side_follow_grp.rotateX = System_R_lip_upper_outer_follow_grp.rotateX/6*(R_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nR_lip_upper_outer_upper_side_follow_grp.rotateY = System_R_lip_upper_outer_follow_grp.rotateY/6*(R_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nR_lip_upper_outer_upper_side_follow_grp.rotateZ = System_R_lip_upper_outer_follow_grp.rotateZ/6*(R_lip_upper_side_ctrl.lip_upper_outer_follow);' + '\nif(System_L_lip_lower_outer_follow_grp.translateX>0){' + '\nL_lip_lower_outer_lower_side_follow_grp.translateX = System_L_lip_lower_outer_follow_grp.translateX/2*(L_lip_lower_side_ctrl.lip_lower_outer_follow);}' + '\nelse{L_lip_lower_outer_lower_side_follow_grp.translateX = System_L_lip_lower_outer_follow_grp.translateX/8*(L_lip_lower_side_ctrl.lip_lower_outer_follow);}' + '\nL_lip_lower_outer_lower_side_follow_grp.translateY = System_L_lip_lower_outer_follow_grp.translateY/2*(L_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nL_lip_lower_outer_lower_side_follow_grp.translateZ = System_L_lip_lower_outer_follow_grp.translateZ/2*(L_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nL_lip_lower_outer_lower_side_follow_grp.rotateX = System_L_lip_lower_outer_follow_grp.rotateX/6*(L_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nL_lip_lower_outer_lower_side_follow_grp.rotateY = System_L_lip_lower_outer_follow_grp.rotateY/6*(L_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nL_lip_lower_outer_lower_side_follow_grp.rotateZ = System_L_lip_lower_outer_follow_grp.rotateZ/6*(L_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nif(System_R_lip_lower_outer_follow_grp.translateX<0){' + '\nR_lip_lower_outer_lower_side_follow_grp.translateX = -System_R_lip_lower_outer_follow_grp.translateX/2*(R_lip_lower_side_ctrl.lip_lower_outer_follow);}' + '\nelse{R_lip_lower_outer_lower_side_follow_grp.translateX = -System_R_lip_lower_outer_follow_grp.translateX/8*(R_lip_lower_side_ctrl.lip_lower_outer_follow);}' + '\nR_lip_lower_outer_lower_side_follow_grp.translateY = System_R_lip_lower_outer_follow_grp.translateY/2*(R_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nR_lip_lower_outer_lower_side_follow_grp.translateZ = System_R_lip_lower_outer_follow_grp.translateZ/2*(R_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nR_lip_lower_outer_lower_side_follow_grp.rotateX = System_R_lip_lower_outer_follow_grp.rotateX/6*(R_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nR_lip_lower_outer_lower_side_follow_grp.rotateY = System_R_lip_lower_outer_follow_grp.rotateY/6*(R_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nR_lip_lower_outer_lower_side_follow_grp.rotateZ = System_R_lip_lower_outer_follow_grp.rotateZ/6*(R_lip_lower_side_ctrl.lip_lower_outer_follow);' + '\nLower_lip_outer_lower_follow_grp.translateX = System_Lower_lip_outer_follow_grp.translateX/1.5*(Lower_lip_ctrl.lip_lower_outer_follow);' + '\nLower_lip_outer_lower_follow_grp.translateY = System_Lower_lip_outer_follow_grp.translateY/1.5*(Lower_lip_ctrl.lip_lower_outer_follow);' + '\nLower_lip_outer_lower_follow_grp.translateZ = (System_Lower_lip_outer_follow_grp.translateZ-Lower_lip_master_follow_grp.translateZ)/1.5*(Lower_lip_ctrl.lip_lower_outer_follow);' + '\nLower_lip_outer_lower_follow_grp.rotateX = System_Lower_lip_outer_follow_grp.rotateX/4*(Lower_lip_ctrl.lip_lower_outer_follow);' + '\nLower_lip_outer_lower_follow_grp.rotateY = System_Lower_lip_outer_follow_grp.rotateY/4*(Lower_lip_ctrl.lip_lower_outer_follow);' + '\nLower_lip_outer_lower_follow_grp.rotateZ = System_Lower_lip_outer_follow_grp.rotateZ/4*(Lower_lip_ctrl.lip_lower_outer_follow);' + '\n//Lip_upper_Outer lip corner Follow' + '\nif(System_L_lip_upper_outer_lip_corner_follow_ctrl_grp.translateX>0){' + '\nL_lip_upper_outer_lip_corner_follow_grp.translateX = System_L_lip_upper_outer_lip_corner_follow_ctrl_grp.translateX/2*(L_lip_corner_up_Ctrl.lip_upper_outer_follow);}' + '\nelse{L_lip_upper_outer_lip_corner_follow_grp.translateX = System_L_lip_upper_outer_lip_corner_follow_ctrl_grp.translateX/8*(L_lip_corner_up_Ctrl.lip_upper_outer_follow);}' + '\nL_lip_upper_outer_lip_corner_follow_grp.translateY = (System_L_lip_upper_outer_lip_corner_follow_ctrl_grp.translateY-System_L_lip_up_down_corner_grp.translateY)/2*(L_lip_corner_up_Ctrl.lip_upper_outer_follow);' + '\nL_lip_upper_outer_lip_corner_follow_grp.translateZ = (System_L_lip_upper_outer_lip_corner_follow_ctrl_grp.translateZ-System_L_lip_up_down_corner_grp.translateZ)/2*(L_lip_corner_up_Ctrl.lip_upper_outer_follow);' + '\nif(System_R_lip_upper_outer_lip_corner_follow_ctrl_grp.translateX<0){' + '\nR_lip_upper_outer_lip_corner_follow_grp.translateX = -System_R_lip_upper_outer_lip_corner_follow_ctrl_grp.translateX/2*(R_lip_corner_up_Ctrl.lip_upper_outer_follow);}' + '\nelse{R_lip_upper_outer_lip_corner_follow_grp.translateX = -System_R_lip_upper_outer_lip_corner_follow_ctrl_grp.translateX/8*(R_lip_corner_up_Ctrl.lip_upper_outer_follow);}' + '\nR_lip_upper_outer_lip_corner_follow_grp.translateY = (System_R_lip_upper_outer_lip_corner_follow_ctrl_grp.translateY-System_R_lip_up_down_corner_grp.translateY)/2*(R_lip_corner_up_Ctrl.lip_upper_outer_follow);' + '\nR_lip_upper_outer_lip_corner_follow_grp.translateZ = (System_R_lip_upper_outer_lip_corner_follow_ctrl_grp.translateZ-System_R_lip_up_down_corner_grp.translateZ)/2*(R_lip_corner_up_Ctrl.lip_upper_outer_follow);' + '\n//Lip_lower_Outer lip corner Follow' + '\nif(System_L_lip_lower_outer_lip_corner_follow_ctrl_grp.translateX>0){' + '\nL_lip_lower_outer_lip_corner_follow_grp.translateX = System_L_lip_lower_outer_lip_corner_follow_ctrl_grp.translateX/4*(L_lip_corner_down_Ctrl.lip_lower_outer_follow);}' + '\nelse{L_lip_lower_outer_lip_corner_follow_grp.translateX = System_L_lip_lower_outer_lip_corner_follow_ctrl_grp.translateX/8*(L_lip_corner_down_Ctrl.lip_lower_outer_follow);}' + '\nL_lip_lower_outer_lip_corner_follow_grp.translateY = System_L_lip_lower_outer_lip_corner_follow_ctrl_grp.translateY/4*(L_lip_corner_down_Ctrl.lip_lower_outer_follow);' + '\nL_lip_lower_outer_lip_corner_follow_grp.translateZ = (System_L_lip_lower_outer_lip_corner_follow_ctrl_grp.translateZ-L_lip_follow_grp.translateZ)/4*(L_lip_corner_down_Ctrl.lip_lower_outer_follow);' + '\nif(System_R_lip_lower_outer_lip_corner_follow_ctrl_grp.translateX<0){' + '\nR_lip_lower_outer_lip_corner_follow_grp.translateX = -System_R_lip_lower_outer_lip_corner_follow_ctrl_grp.translateX/4*(R_lip_corner_down_Ctrl.lip_lower_outer_follow);}' + '\nelse{R_lip_lower_outer_lip_corner_follow_grp.translateX = -System_R_lip_lower_outer_lip_corner_follow_ctrl_grp.translateX/8*(R_lip_corner_down_Ctrl.lip_lower_outer_follow);}' + '\nR_lip_lower_outer_lip_corner_follow_grp.translateY = System_R_lip_lower_outer_lip_corner_follow_ctrl_grp.translateY/4*(R_lip_corner_down_Ctrl.lip_lower_outer_follow);' + '\nR_lip_lower_outer_lip_corner_follow_grp.translateZ = (System_R_lip_lower_outer_lip_corner_follow_ctrl_grp.translateZ-R_lip_follow_grp.translateZ)/4*(R_lip_corner_down_Ctrl.lip_lower_outer_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Lip_Outer_expression')
        if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parent('System_Lower_lip_outer_follow_grp', 'Lower_lip_Master_Ctrl_grp')
            cmds.parent('System_L_lip_upper_outer_follow_grp', 'System_R_lip_upper_outer_follow_grp', 'Upper_lip_follow_grp')
            cmds.parent('System_L_lip_lower_outer_follow_grp', 'System_R_lip_lower_outer_follow_grp', 'Lower_lip_follow_grp')
            cmds.parent('System_*_lip_upper_outer_lip_corner_follow_ctrl_grp', 'Upper_lip_Master_Ctrl_grp')
            cmds.parent('System_*_lip_lower_outer_lip_corner_follow_ctrl_grp', 'Lower_lip_Master_Ctrl_grp')
        if 'Jaw joint Only' != self.ui.LipOption.currentText():
            cmds.addAttr('Lip_Master_ctrl', ln='scale_val', at='double', min=0, max=2)
            cmds.setAttr('Lip_Master_ctrl.scale_val', e=1, keyable=True)
            cmds.setAttr('Lip_Master_ctrl.scale_val', 0.8)
            cmds.addAttr('Lip_Master_ctrl', ln='scale_min_val', at='double', min=0.1, max=1)
            cmds.setAttr('Lip_Master_ctrl.scale_min_val', e=1, keyable=True)
            cmds.setAttr('Lip_Master_ctrl.scale_min_val', 0.4)
            cmds.addAttr('Lip_Master_ctrl', ln='scale_max_val', at='double', min=0.2, max=2)
            cmds.setAttr('Lip_Master_ctrl.scale_max_val', e=1, keyable=True)
            cmds.setAttr('Lip_Master_ctrl.scale_max_val', 1.3)
            cmds.addAttr('Upper_lip_ctrl', ln='scale_val', at='double', min=0, max=4)
            cmds.setAttr('Upper_lip_ctrl.scale_val', e=1, keyable=True)
            cmds.setAttr('Upper_lip_ctrl.scale_val', 1)
            cmds.addAttr('Lower_lip_ctrl', ln='scale_val', at='double', min=0, max=4)
            cmds.setAttr('Lower_lip_ctrl.scale_val', e=1, keyable=True)
            cmds.setAttr('Lower_lip_ctrl.scale_val', 1)
            if cmds.objExists('L_lip_upper_side_ctrl'):
                cmds.addAttr('L_lip_upper_side_ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('L_lip_upper_side_ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('L_lip_upper_side_ctrl.scale_val', 1)
            if cmds.objExists('L_lip_upper_side_02_FK_ctrl'):
                cmds.addAttr('L_lip_upper_side_ctrl', ln='scale_val_02', at='double', min=0, max=4)
                cmds.setAttr('L_lip_upper_side_ctrl.scale_val_02', e=1, keyable=True)
                cmds.setAttr('L_lip_upper_side_ctrl.scale_val_02', 1)
            if cmds.objExists('L_lip_corner_up_Ctrl'):
                cmds.addAttr('L_lip_corner_up_Ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('L_lip_corner_up_Ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_up_Ctrl.scale_val', 1)
            if cmds.objExists('R_lip_upper_side_ctrl'):
                cmds.addAttr('R_lip_upper_side_ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('R_lip_upper_side_ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('R_lip_upper_side_ctrl.scale_val', 1)
            if cmds.objExists('R_lip_upper_side_02_FK_ctrl'):
                cmds.addAttr('R_lip_upper_side_ctrl', ln='scale_val_02', at='double', min=0, max=4)
                cmds.setAttr('R_lip_upper_side_ctrl.scale_val_02', e=1, keyable=True)
                cmds.setAttr('R_lip_upper_side_ctrl.scale_val_02', 1)
            if cmds.objExists('R_lip_corner_up_Ctrl'):
                cmds.addAttr('R_lip_corner_up_Ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('R_lip_corner_up_Ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_up_Ctrl.scale_val', 1)
            if cmds.objExists('L_lip_lower_side_ctrl'):
                cmds.addAttr('L_lip_lower_side_ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('L_lip_lower_side_ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('L_lip_lower_side_ctrl.scale_val', 1)
            if cmds.objExists('L_lip_lower_side_02_FK_ctrl'):
                cmds.addAttr('L_lip_lower_side_ctrl', ln='scale_val_02', at='double', min=0, max=4)
                cmds.setAttr('L_lip_lower_side_ctrl.scale_val_02', e=1, keyable=True)
                cmds.setAttr('L_lip_lower_side_ctrl.scale_val_02', 1)
            if cmds.objExists('L_lip_corner_down_Ctrl'):
                cmds.addAttr('L_lip_corner_down_Ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('L_lip_corner_down_Ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_down_Ctrl.scale_val', 1)
            if cmds.objExists('R_lip_lower_side_ctrl'):
                cmds.addAttr('R_lip_lower_side_ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('R_lip_lower_side_ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('R_lip_lower_side_ctrl.scale_val', 1)
            if cmds.objExists('R_lip_lower_side_02_FK_ctrl'):
                cmds.addAttr('R_lip_lower_side_ctrl', ln='scale_val_02', at='double', min=0, max=4)
                cmds.setAttr('R_lip_lower_side_ctrl.scale_val_02', e=1, keyable=True)
                cmds.setAttr('R_lip_lower_side_ctrl.scale_val_02', 1)
            if cmds.objExists('R_lip_corner_down_Ctrl'):
                cmds.addAttr('R_lip_corner_down_Ctrl', ln='scale_val', at='double', min=0, max=4)
                cmds.setAttr('R_lip_corner_down_Ctrl.scale_val', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_down_Ctrl.scale_val', 1)
            if 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Upper Lip Scale' + '\nSystem_upper_lip_jnt_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/50+L_Upper_lip_Ctrl_grp.rotateX/50-System_Lip_upper_jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));' + '\nif((System_L_lip_corner_jnt_grp.translateY>0)||(System_R_lip_corner_jnt_grp.translateY>0)){' + '\nSystem_upper_lip_jnt_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nelse{System_upper_lip_jnt_grp.scaleY = 1-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nif((System_L_lip_corner_jnt_grp.translateX>0)||(System_R_lip_corner_jnt_grp.translateX<0)){' + '\nSystem_upper_lip_jnt_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nelse{System_upper_lip_jnt_grp.scaleX = 1-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nif(System_upper_lip_jnt_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_upper_lip_jnt_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_upper_lip_jnt_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_upper_lip_jnt_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_upper_lip_jnt_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_upper_lip_jnt_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_upper_lip_jnt_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_upper_lip_jnt_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_upper_lip_jnt_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_upper_lip_jnt_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_upper_lip_jnt_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_upper_lip_jnt_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//Lower Lip Scale' + '\nSystem_Lower_lip_jnt_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/50+L_Lower_lip_Ctrl_grp.rotateX/50-System_Lower_lip_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));' + '\nif((System_L_lip_corner_jnt_grp.translateY>0)||(System_R_lip_corner_jnt_grp.translateY>0)){' + '\nSystem_Lower_lip_jnt_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nelse{System_Lower_lip_jnt_grp.scaleY = 1+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nif((System_L_lip_corner_jnt_grp.translateX>0)||(System_R_lip_corner_jnt_grp.translateX<0)){' + '\nSystem_Lower_lip_jnt_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nelse{System_Lower_lip_jnt_grp.scaleX = 1+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nif(System_Lower_lip_jnt_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_jnt_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_jnt_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_jnt_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Lower_lip_jnt_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_jnt_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_jnt_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_jnt_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Lower_lip_jnt_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_jnt_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_jnt_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_jnt_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_corner_up Scale' + '\nSystem_L_lip_up_corner_jnt_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/50+System_L_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_L_lip_up_corner_jnt_grp.scaleY = 1-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_L_lip_up_corner_jnt_grp.scaleX =1-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_L_lip_up_corner_jnt_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_up_corner_jnt_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_up_corner_jnt_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_up_corner_jnt_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_up_corner_jnt_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_up_corner_jnt_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_up_corner_jnt_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_corner_up Scale' + '\nSystem_R_lip_up_corner_jnt_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/50+System_R_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_R_lip_up_corner_jnt_grp.scaleY = 1-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_R_lip_up_corner_jnt_grp.scaleX = 1-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_R_lip_up_corner_jnt_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_up_corner_jnt_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_up_corner_jnt_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_up_corner_jnt_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_up_corner_jnt_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_up_corner_jnt_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_up_corner_jnt_grp.scaleX = Lip_Master_ctrl.scale_max_val;}',
                    ae=1, uc=all, alwaysEvaluate=0, n='Lip_Scale_expression')
            if 'Lip 10 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Upper Lip Scale' + '\nSystem_Upper_lip_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/50+L_Upper_lip_Ctrl_grp.rotateX/50-System_Lip_upper_jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));' + '\nif((System_L_lip_corner_jnt_grp.translateY>0)||(System_R_lip_corner_jnt_grp.translateY>0)){' + '\nSystem_Upper_lip_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nelse{System_Upper_lip_FK_grp.scaleY = 1-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nif((System_L_lip_corner_jnt_grp.translateX>0)||(System_R_lip_corner_jnt_grp.translateX<0)){' + '\nSystem_Upper_lip_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nelse{System_Upper_lip_FK_grp.scaleX = 1-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nif(System_Upper_lip_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Upper_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Upper_lip_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Upper_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Upper_lip_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Upper_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Upper_lip_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Upper_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Upper_lip_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Upper_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Upper_lip_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Upper_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//Lower Lip Scale' + '\nSystem_Lower_lip_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/50+L_Lower_lip_Ctrl_grp.rotateX/50-System_Lower_lip_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));' + '\nif((System_L_lip_corner_jnt_grp.translateY>0)||(System_R_lip_corner_jnt_grp.translateY>0)){' + '\nSystem_Lower_lip_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nelse{System_Lower_lip_FK_grp.scaleY = 1+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nif((System_L_lip_corner_jnt_grp.translateX>0)||(System_R_lip_corner_jnt_grp.translateX<0)){' + '\nSystem_Lower_lip_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nelse{System_Lower_lip_FK_grp.scaleX = 1+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nif(System_Lower_lip_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Lower_lip_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Lower_lip_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_upper_side Scale' + '\nSystem_L_lip_upper_side_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val))-((System_L_lip_upper_side_jnt_grp.rotateX/50+L_lip_upper_side_follow_Ctrl_grp.rotateX/50+L_upper_up_lip_follow_Ctrl_grp.rotateX/50-System_L_lip_upper_corner_jaw_follow.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_upper_side_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val))-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_L_lip_upper_side_FK_grp.scaleY = 1-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_upper_side_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val))-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_L_lip_upper_side_FK_grp.scaleX = 1-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nif(System_L_lip_upper_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_corner_up Scale' + '\nSystem_L_lip_corner_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/50+System_L_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_corner_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_L_lip_corner_FK_grp.scaleY = 1-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_corner_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_L_lip_corner_FK_grp.scaleX =1-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_upper_side Scale' + '\nSystem_R_lip_upper_side_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val))-((System_R_lip_upper_side_jnt_grp.rotateX/50+R_lip_upper_side_follow_Ctrl_grp.rotateX/50+R_upper_up_lip_follow_Ctrl_grp.rotateX/50-System_R_lip_upper_corner_jaw_follow.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_upper_side_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val))-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_R_lip_upper_side_FK_grp.scaleY = 1-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_upper_side_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val))-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_R_lip_upper_side_FK_grp.scaleX = 1-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nif(System_R_lip_upper_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_corner_up Scale' + '\nSystem_R_lip_corner_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/50+System_R_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_corner_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_R_lip_corner_FK_grp.scaleY = 1-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_corner_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_R_lip_corner_FK_grp.scaleX = 1-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_lower_side Scale' + '\nSystem_L_lip_lower_side_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val))+((System_L_lip_lower_side_jnt_grp.rotateX/50+L_lip_lower_side_follow_Ctrl_grp.rotateX/50+L_lower_down_lip_follow_Ctrl_grp.rotateX/50-System_L_lip_lower_side_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_lower_side_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val))+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_L_lip_lower_side_FK_grp.scaleY = 1+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_lower_side_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val))+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_L_lip_lower_side_FK_grp.scaleX = 1+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nif(System_L_lip_lower_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_corner_down Scale' + '\nSystem_L_lip_lower_corner_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val))+((System_L_lip_down_corner_jnt_grp.rotateX/50+System_L_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val))+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_L_lip_lower_corner_FK_grp.scaleY = 1+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val))+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_L_lip_lower_corner_FK_grp.scaleX = 1+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_lower_side Scale' + '\nSystem_R_lip_lower_side_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val))+((System_R_lip_lower_side_jnt_grp.rotateX/50+R_lip_lower_side_follow_Ctrl_grp.rotateX/50+R_lower_down_lip_follow_Ctrl_grp.rotateX/50-System_R_lip_lower_side_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_lower_side_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val))+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_R_lip_lower_side_FK_grp.scaleY = 1+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_lower_side_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val))+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_R_lip_lower_side_FK_grp.scaleX = 1+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nif(System_R_lip_lower_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_corner_down Scale' + '\nSystem_R_lip_lower_corner_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val))+((System_R_lip_down_corner_jnt_grp.rotateX/50+System_R_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val))+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_R_lip_lower_corner_FK_grp.scaleY = 1+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val))+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_R_lip_lower_corner_FK_grp.scaleX = 1+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}',
                    ae=1, uc=all, alwaysEvaluate=0, n='Lip_Scale_expression')
            if 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Upper Lip Scale' + '\nSystem_Upper_lip_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/50+L_Upper_lip_Ctrl_grp.rotateX/50-System_Lip_upper_jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));' + '\nif((System_L_lip_corner_jnt_grp.translateY>0)||(System_R_lip_corner_jnt_grp.translateY>0)){' + '\nSystem_Upper_lip_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nelse{System_Upper_lip_FK_grp.scaleY = 1-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nif((System_L_lip_corner_jnt_grp.translateX>0)||(System_R_lip_corner_jnt_grp.translateX<0)){' + '\nSystem_Upper_lip_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val))-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nelse{System_Upper_lip_FK_grp.scaleX = 1-((System_upper_lip_jnt_grp.rotateX/70+L_Upper_lip_Ctrl_grp.rotateX/70-System_Lip_upper_jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Upper_lip_ctrl.scale_val));}' + '\nif(System_Upper_lip_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Upper_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Upper_lip_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Upper_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Upper_lip_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Upper_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Upper_lip_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Upper_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Upper_lip_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Upper_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Upper_lip_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Upper_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//Lower Lip Scale' + '\nSystem_Lower_lip_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/50+L_Lower_lip_Ctrl_grp.rotateX/50-System_Lower_lip_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));' + '\nif((System_L_lip_corner_jnt_grp.translateY>0)||(System_R_lip_corner_jnt_grp.translateY>0)){' + '\nSystem_Lower_lip_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nelse{System_Lower_lip_FK_grp.scaleY = 1+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nif((System_L_lip_corner_jnt_grp.translateX>0)||(System_R_lip_corner_jnt_grp.translateX<0)){' + '\nSystem_Lower_lip_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/8*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val))+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nelse{System_Lower_lip_FK_grp.scaleX = 1+((System_Lower_lip_jnt_grp.rotateX/70+L_Lower_lip_Ctrl_grp.rotateX/70-System_Lower_lip_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(Lower_lip_ctrl.scale_val));}' + '\nif(System_Lower_lip_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Lower_lip_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_Lower_lip_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_Lower_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_Lower_lip_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_Lower_lip_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_upper_side Scale' + '\nSystem_L_lip_upper_side_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val))-((System_L_lip_upper_side_jnt_grp.rotateX/50+L_lip_upper_side_follow_Ctrl_grp.rotateX/50+L_upper_up_lip_follow_Ctrl_grp.rotateX/50-System_L_lip_upper_corner_jaw_follow.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_upper_side_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val))-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_L_lip_upper_side_FK_grp.scaleY = 1-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_upper_side_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val))-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_L_lip_upper_side_FK_grp.scaleX = 1-((System_L_lip_upper_side_jnt_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val));}' + '\nif(System_L_lip_upper_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_upper_side_02 Scale' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02))-((L_lip_upper_side_02_FK_Ctrl_grp.rotateX/50+L_lip_upper_side_follow_Ctrl_grp.rotateX/50+L_upper_up_lip_follow_Ctrl_grp.rotateX/50-System_L_lip_upper_02_corner_jaw_follow.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02))-((L_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_02_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02));}' + '\nelse{System_L_lip_upper_side_02_FK_grp.scaleY = 1-((L_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_02_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02))-((L_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_02_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02));}' + '\nelse{System_L_lip_upper_side_02_FK_grp.scaleX = 1-((L_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+L_lip_upper_side_follow_Ctrl_grp.rotateX/70+L_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_upper_02_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_upper_side_ctrl.scale_val_02));}' + '\nif(System_L_lip_upper_side_02_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_02_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_upper_side_02_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_02_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_upper_side_02_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_upper_side_02_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_upper_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_corner_up Scale' + '\nSystem_L_lip_corner_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/50+System_L_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_corner_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_L_lip_corner_FK_grp.scaleY = 1-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_corner_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val))-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_L_lip_corner_FK_grp.scaleX =1-((System_L_lip_up_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_upper_side Scale' + '\nSystem_R_lip_upper_side_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val))-((System_R_lip_upper_side_jnt_grp.rotateX/50+R_lip_upper_side_follow_Ctrl_grp.rotateX/50+R_upper_up_lip_follow_Ctrl_grp.rotateX/50-System_R_lip_upper_corner_jaw_follow.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_upper_side_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val))-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_R_lip_upper_side_FK_grp.scaleY = 1-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_upper_side_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val))-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nelse{System_R_lip_upper_side_FK_grp.scaleX = 1-((System_R_lip_upper_side_jnt_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val));}' + '\nif(System_R_lip_upper_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_upper_side_02 Scale' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02))-((R_lip_upper_side_02_FK_Ctrl_grp.rotateX/50+R_lip_upper_side_follow_Ctrl_grp.rotateX/50+R_upper_up_lip_follow_Ctrl_grp.rotateX/50-System_R_lip_upper_02_corner_jaw_follow.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02));' + '\nif(System_R_lip_corner_jnt_grp.translateY >0){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02))-((R_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_02_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02));}' + '\nelse{System_R_lip_upper_side_02_FK_grp.scaleY = 1-((R_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_02_corner_jaw_follow.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02));}' + '\nif(System_R_lip_corner_jnt_grp.translateX <0){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02))-((R_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_02_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02));}' + '\nelse{System_R_lip_upper_side_02_FK_grp.scaleX = 1-((R_lip_upper_side_02_FK_Ctrl_grp.rotateX/70+R_lip_upper_side_follow_Ctrl_grp.rotateX/70+R_upper_up_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_upper_02_corner_jaw_follow.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_upper_side_ctrl.scale_val_02));}' + '\nif(System_R_lip_upper_side_02_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_02_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_upper_side_02_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_02_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_upper_side_02_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_upper_side_02_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_upper_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_corner_up Scale' + '\nSystem_R_lip_corner_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/50+System_R_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_corner_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_R_lip_corner_FK_grp.scaleY = 1-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_corner_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val))-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nelse{System_R_lip_corner_FK_grp.scaleX = 1-((System_R_lip_up_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_up_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_lower_side Scale' + '\nSystem_L_lip_lower_side_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val))+((System_L_lip_lower_side_jnt_grp.rotateX/50+L_lip_lower_side_follow_Ctrl_grp.rotateX/50+L_lower_down_lip_follow_Ctrl_grp.rotateX/50-System_L_lip_lower_side_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_lower_side_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val))+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_L_lip_lower_side_FK_grp.scaleY = 1+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_lower_side_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val))+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_L_lip_lower_side_FK_grp.scaleX = 1+((System_L_lip_lower_side_jnt_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val));}' + '\nif(System_L_lip_lower_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_lower_side_02 Scale' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02))+((L_lip_lower_side_02_FK_Ctrl_grp.rotateX/50+L_lip_lower_side_follow_Ctrl_grp.rotateX/50+L_lower_down_lip_follow_Ctrl_grp.rotateX/50-System_L_lip_lower_side_02_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02));' + '\nif(System_L_lip_corner_jnt_grp.translateY >0){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02))+((L_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_02_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02));}' + '\nelse{System_L_lip_lower_side_02_FK_grp.scaleY = 1+((L_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_02_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02));}' + '\nif(System_L_lip_corner_jnt_grp.translateX >0){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02))+((L_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_02_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02));}' + '\nelse{System_L_lip_lower_side_02_FK_grp.scaleX = 1+((L_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+L_lip_lower_side_follow_Ctrl_grp.rotateX/70+L_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_L_lip_lower_side_02_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_lower_side_ctrl.scale_val_02));}' + '\nif(System_L_lip_lower_side_02_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_02_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_side_02_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_02_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_side_02_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_side_02_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//L_lip_corner_down Scale' + '\nSystem_L_lip_lower_corner_FK_grp.scaleZ = 1+((System_L_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val))+((System_L_lip_down_corner_jnt_grp.rotateX/50+System_L_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));' + '\nif(System_L_lip_corner_jnt_grp.translateY>0){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleY = 1-((System_L_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val))+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_L_lip_lower_corner_FK_grp.scaleY = 1+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_L_lip_corner_jnt_grp.translateX>0){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleX = 1-((System_L_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val))+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_L_lip_lower_corner_FK_grp.scaleX = 1+((System_L_lip_down_corner_jnt_grp.rotateX/70+System_L_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(L_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_L_lip_lower_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_L_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_lower_side Scale' + '\nSystem_R_lip_lower_side_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val))+((System_R_lip_lower_side_jnt_grp.rotateX/50+R_lip_lower_side_follow_Ctrl_grp.rotateX/50+R_lower_down_lip_follow_Ctrl_grp.rotateX/50-System_R_lip_lower_side_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_lower_side_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val))+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_R_lip_lower_side_FK_grp.scaleY = 1+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_lower_side_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/3*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val))+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nelse{System_R_lip_lower_side_FK_grp.scaleX = 1+((System_R_lip_lower_side_jnt_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val));}' + '\nif(System_R_lip_lower_side_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_lower_side_02 Scale' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02))+((R_lip_lower_side_02_FK_Ctrl_grp.rotateX/50+R_lip_lower_side_follow_Ctrl_grp.rotateX/50+R_lower_down_lip_follow_Ctrl_grp.rotateX/50-System_R_lip_lower_side_02_Jaw_follow_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02))+((R_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_02_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02));}' + '\nelse{System_R_lip_lower_side_02_FK_grp.scaleY = 1+((R_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_02_Jaw_follow_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ/2*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02))+((R_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_02_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02));}' + '\nelse{System_R_lip_lower_side_02_FK_grp.scaleX = 1+((R_lip_lower_side_02_FK_Ctrl_grp.rotateX/70+R_lip_lower_side_follow_Ctrl_grp.rotateX/70+R_lower_down_lip_follow_Ctrl_grp.rotateX/70-System_R_lip_lower_side_02_Jaw_follow_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_lower_side_ctrl.scale_val_02));}' + '\nif(System_R_lip_lower_side_02_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_02_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_side_02_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_02_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_side_02_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_side_02_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_side_02_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}' + '\n//R_lip_corner_down Scale' + '\nSystem_R_lip_lower_corner_FK_grp.scaleZ = 1+((System_R_lip_corner_jnt_grp.translateZ)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val))+((System_R_lip_down_corner_jnt_grp.rotateX/50+System_R_lip_corner_jnt_grp.rotateX/50)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));' + '\nif(System_R_lip_corner_jnt_grp.translateY>0){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleY = 1-((System_R_lip_corner_jnt_grp.translateY)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val))+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_R_lip_lower_corner_FK_grp.scaleY = 1+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_R_lip_corner_jnt_grp.translateX<0){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleX = 1-((-System_R_lip_corner_jnt_grp.translateX)/$sumXYZ*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val))+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nelse{System_R_lip_lower_corner_FK_grp.scaleX = 1+((System_R_lip_down_corner_jnt_grp.rotateX/70+System_R_lip_corner_jnt_grp.rotateX/70)/6*(Lip_Master_ctrl.scale_val)*(R_lip_corner_down_Ctrl.scale_val));}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleZ < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleZ > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleZ = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleY < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleY > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleY = Lip_Master_ctrl.scale_max_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleX < Lip_Master_ctrl.scale_min_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_min_val;}' + '\nif(System_R_lip_lower_corner_FK_grp.scaleX > Lip_Master_ctrl.scale_max_val){' + '\nSystem_R_lip_lower_corner_FK_grp.scaleX = Lip_Master_ctrl.scale_max_val;}',
                    ae=1, uc=all, alwaysEvaluate=0, n='Lip_Scale_expression')
        cmds.group(em=True, n='Lip_All_Ctrl_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.parent('*_lip_corner_Ctrl_grp', 'L_*_lip_Ctrl_grp', '*_lip_*_side_follow_Ctrl_grp',
                        '*_lip_Master_Ctrl_grp', 'Lip_Master_Ctrl_grp', 'Jaw_Master_Ctrl_grp', 'Lip_All_Ctrl_grp')
            cmds.parent('Lip_FACS_Ctrl', 'Lip_All_Ctrl_grp')
            if 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.parent('*_lip_*_outer_Ctrl_grp', 'Lower_lip_outer_Ctrl_grp', 'Lip_All_Ctrl_grp')
        elif 'Lip 04 joint' == self.ui.LipOption.currentText():
            cmds.parent('*_lip_corner_Ctrl_grp', 'L_*_lip_Ctrl_grp', '*_lip_Master_Ctrl_grp', 'Lip_Master_Ctrl_grp', 'Jaw_Master_Ctrl_grp', 'Lip_All_Ctrl_grp')
            cmds.parent('Lip_FACS_Ctrl', 'Lip_All_Ctrl_grp')
        else:
            cmds.parent('Jaw_Master_Ctrl_grp', 'Lip_All_Ctrl_grp')

    def square_control(self, color, name):
        cmds.nurbsSquare(nr=(0, 0, 1), c=(0, 0, 0), n=name)
        cmds.select('top' + name + 'Shape', 'left' + name + 'Shape', 'bottom' + name + 'Shape', 'right' + name + 'Shape', name, add=True)
        mel.eval('parent -r -s')
        cmds.delete('top' + name, 'left' + name, 'bottom' + name, 'right' + name)
        cmds.select(name)
        cmds.setAttr('top' + name + 'Shape.overrideEnabled', 1)
        cmds.setAttr('top' + name + 'Shape.overrideColor', color)
        cmds.setAttr('left' + name + 'Shape.overrideEnabled', 1)
        cmds.setAttr('left' + name + 'Shape.overrideColor', color)
        cmds.setAttr('bottom' + name + 'Shape.overrideEnabled', 1)
        cmds.setAttr('bottom' + name + 'Shape.overrideColor', color)
        cmds.setAttr('right' + name + 'Shape.overrideEnabled', 1)
        cmds.setAttr('right' + name + 'Shape.overrideColor', color)

    def cheek_all_system(self):
        self.create_cube_control(23)
        cmds.scale(self.ctrl_scale * 0.7, self.ctrl_scale * 0.7, self.ctrl_scale * 0.7, 'Cube_Shape')
        cmds.rename('Cube_Shape', 'L_cheek_ctrl')
        cmds.group('L_cheek_ctrl', n='L_cheek_Ctrl_grp')
        cmds.pointConstraint('System_L_cheek_jnt', 'L_cheek_Ctrl_grp')
        cmds.delete('L_cheek_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('L_cheek_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.select('L_cheek_ctrlShape3.cv[0:1]', 'L_cheek_ctrlShape2.cv[0:1]', 'L_cheek_ctrlShape1.cv[0:1]', 'L_cheek_ctrlShape.cv[0:9]')
        cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
        cmds.select(clear=True)
        cmds.select('L_cheek_ctrl')
        cmds.group(em=True, n='L_SymGroup')
        cmds.parent('L_cheek_Ctrl_grp', 'L_SymGroup')
        cmds.duplicate('L_SymGroup', n='R_SymGroup')
        cmds.setAttr('R_SymGroup.scaleX', -1)
        cmds.select('R_SymGroup', hi=True)
        mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
        cmds.parent('L_cheek_Ctrl_grp', 'R_cheek_Ctrl_grp', w=True)
        cmds.delete('L_SymGroup')
        cmds.delete('R_SymGroup')
        cmds.setAttr('R_cheek_ctrlShape.overrideColor', 29)
        cmds.setAttr('R_cheek_ctrlShape4.overrideColor', 29)
        cmds.setAttr('R_cheek_ctrlShape5.overrideColor', 29)
        cmds.setAttr('R_cheek_ctrlShape6.overrideColor', 29)
        cmds.pointConstraint('System_R_cheek_jnt', 'R_cheek_Ctrl_grp')
        cmds.delete('R_cheek_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('R_cheek_Ctrl_grp', apply=True, t=True)
        cmds.group('System_L_cheek_jnt', n='System_L_cheek_jnt_grp')
        cmds.group('System_R_cheek_jnt', n='System_R_cheek_jnt_grp')
        cmds.parentConstraint('L_cheek_ctrl', 'System_L_cheek_jnt_grp', mo=True)
        cmds.scaleConstraint('L_cheek_ctrl', 'System_L_cheek_jnt_grp', mo=True)
        cmds.parentConstraint('R_cheek_ctrl', 'System_R_cheek_jnt_grp', mo=True)
        cmds.scaleConstraint('R_cheek_ctrl', 'System_R_cheek_jnt_grp', mo=True)
        cmds.group('System_L_cheek_jnt', n='L_cheek_upper_side_follow_grp')
        cmds.parent('System_L_cheek_jnt', 'System_L_cheek_jnt_grp')
        cmds.group('System_R_cheek_jnt', n='R_cheek_upper_side_follow_grp')
        cmds.parent('System_R_cheek_jnt', 'System_R_cheek_jnt_grp')
        cmds.parent('L_cheek_upper_side_follow_grp', 'R_cheek_upper_side_follow_grp', w=True)
        cmds.parent('L_cheek_upper_side_follow_grp', 'L_cheek_Ctrl_grp')
        cmds.parent('R_cheek_upper_side_follow_grp', 'R_cheek_Ctrl_grp')
        cmds.makeIdentity('L_cheek_upper_side_follow_grp', apply=True, t=True, r=True, scale=True)
        cmds.makeIdentity('R_cheek_upper_side_follow_grp', apply=True, t=True, r=True, scale=True)
        cmds.parent('L_cheek_ctrl', 'L_cheek_upper_side_follow_grp')
        cmds.parent('R_cheek_ctrl', 'R_cheek_upper_side_follow_grp')
        cmds.group('System_L_cheek_jnt', n='System_L_cheek_upper_side_follow_grp')
        cmds.group('System_R_cheek_jnt', n='System_R_cheek_upper_side_follow_grp')
        cmds.parent('System_L_cheek_jnt', 'System_L_cheek_jnt_grp')
        cmds.parent('System_R_cheek_jnt', 'System_R_cheek_jnt_grp')
        cmds.parent('System_L_cheek_upper_side_follow_grp', 'System_R_cheek_upper_side_follow_grp', 'Upper_lip_follow_grp')
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.pointConstraint('L_lip_upper_side_ctrl', 'System_L_cheek_upper_side_follow_grp', mo=True)
            cmds.pointConstraint('R_lip_upper_side_ctrl', 'System_R_cheek_upper_side_follow_grp', mo=True)
        cmds.parentConstraint('System_Head_master_jnt', 'L_cheek_Ctrl_grp', mo=True)
        cmds.parentConstraint('System_Head_master_jnt', 'R_cheek_Ctrl_grp', mo=True)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.7, self.ctrl_scale * 0.7, self.ctrl_scale * 0.7, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lower_cheek_ctrl')
            cmds.group('L_lower_cheek_ctrl', n='L_lower_cheek_Ctrl_grp')
            cmds.pointConstraint('System_L_lower_cheek_jnt', 'L_lower_cheek_Ctrl_grp')
            cmds.delete('L_lower_cheek_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lower_cheek_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_lower_cheek_ctrlShape3.cv[0:1]', 'L_lower_cheek_ctrlShape2.cv[0:1]', 'L_lower_cheek_ctrlShape1.cv[0:1]', 'L_lower_cheek_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_lower_cheek_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lower_cheek_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_lower_cheek_Ctrl_grp', 'R_lower_cheek_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_lower_cheek_ctrlShape.overrideColor', 13)
            cmds.setAttr('R_lower_cheek_ctrlShape4.overrideColor', 13)
            cmds.setAttr('R_lower_cheek_ctrlShape5.overrideColor', 13)
            cmds.setAttr('R_lower_cheek_ctrlShape6.overrideColor', 13)
            cmds.pointConstraint('System_R_lower_cheek_jnt', 'R_lower_cheek_Ctrl_grp')
            cmds.delete('R_lower_cheek_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lower_cheek_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_lower_cheek_jnt', n='System_L_lower_cheek_jnt_grp')
            cmds.group('System_R_lower_cheek_jnt', n='System_R_lower_cheek_jnt_grp')
            cmds.group('System_L_lower_cheek_jnt', n='L_lower_cheek_lip_corner_follow_grp')
            cmds.parent('System_L_lower_cheek_jnt', 'System_L_lower_cheek_jnt_grp')
            cmds.group('System_R_lower_cheek_jnt', n='R_lower_cheek_lip_corner_follow_grp')
            cmds.parent('System_R_lower_cheek_jnt', 'System_R_lower_cheek_jnt_grp')
            cmds.parent('L_lower_cheek_lip_corner_follow_grp', 'R_lower_cheek_lip_corner_follow_grp', w=True)
            cmds.parent('L_lower_cheek_lip_corner_follow_grp', 'L_lower_cheek_Ctrl_grp')
            cmds.parent('R_lower_cheek_lip_corner_follow_grp', 'R_lower_cheek_Ctrl_grp')
            cmds.makeIdentity('L_lower_cheek_lip_corner_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_lower_cheek_lip_corner_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_lower_cheek_ctrl', 'L_lower_cheek_lip_corner_follow_grp')
            cmds.parent('R_lower_cheek_ctrl', 'R_lower_cheek_lip_corner_follow_grp')
            cmds.group('System_L_lower_cheek_jnt', n='System_L_lower_cheek_lip_corner_follow_grp')
            cmds.group('System_R_lower_cheek_jnt', n='System_R_lower_cheek_lip_corner_follow_grp')
            cmds.parent('System_L_lower_cheek_jnt', 'System_L_lower_cheek_jnt_grp')
            cmds.parent('System_R_lower_cheek_jnt', 'System_R_lower_cheek_jnt_grp')
            cmds.parentConstraint('L_lower_cheek_ctrl', 'System_L_lower_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lower_cheek_ctrl', 'System_L_lower_cheek_jnt_grp', mo=True)
            cmds.parentConstraint('R_lower_cheek_ctrl', 'System_R_lower_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lower_cheek_ctrl', 'System_R_lower_cheek_jnt_grp', mo=True)
            cmds.parent('System_L_lower_cheek_lip_corner_follow_grp', 'System_R_lower_cheek_lip_corner_follow_grp', 'Upper_lip_follow_grp')
            cmds.pointConstraint('L_lip_corner_up_Ctrl', 'System_L_lower_cheek_lip_corner_follow_grp', mo=True)
            cmds.pointConstraint('R_lip_corner_up_Ctrl', 'System_R_lower_cheek_lip_corner_follow_grp', mo=True)
            cmds.group('L_lower_cheek_lip_corner_follow_grp', n='L_lower_cheek_lip_corner_down_follow_grp')
            cmds.group('R_lower_cheek_lip_corner_follow_grp', n='R_lower_cheek_lip_corner_down_follow_grp')
            cmds.group(em=True, n='System_L_lower_cheek_lip_corner_down_follow_grp')
            cmds.group(em=True, n='System_R_lower_cheek_lip_corner_down_follow_grp')
            cmds.parent('System_L_lower_cheek_lip_corner_down_follow_grp', 'System_R_lower_cheek_lip_corner_down_follow_grp', 'Upper_lip_follow_grp')
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.pointConstraint('L_lip_corner_down_Ctrl', 'System_L_lower_cheek_lip_corner_down_follow_grp', mo=True)
                cmds.pointConstraint('R_lip_corner_down_Ctrl', 'System_R_lower_cheek_lip_corner_down_follow_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'L_lower_cheek_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_lower_cheek_Ctrl_grp', mo=True)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_upper_cheek_ctrl')
            cmds.group('L_upper_cheek_ctrl', n='L_upper_cheek_Ctrl_grp')
            cmds.pointConstraint('System_L_upper_cheek_jnt', 'L_upper_cheek_Ctrl_grp')
            cmds.delete('L_upper_cheek_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_upper_cheek_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_upper_cheek_ctrlShape3.cv[0:1]', 'L_upper_cheek_ctrlShape2.cv[0:1]', 'L_upper_cheek_ctrlShape1.cv[0:1]', 'L_upper_cheek_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_upper_cheek_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_upper_cheek_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_upper_cheek_Ctrl_grp', 'R_upper_cheek_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_upper_cheek_jnt', 'R_upper_cheek_Ctrl_grp')
            cmds.delete('R_upper_cheek_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_upper_cheek_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_upper_cheek_jnt', n='System_L_upper_cheek_jnt_grp')
            cmds.group('System_R_upper_cheek_jnt', n='System_R_upper_cheek_jnt_grp')
            cmds.group('System_L_upper_cheek_jnt', n='L_upper_cheek_cheek_follow_grp')
            cmds.parent('System_L_upper_cheek_jnt', 'System_L_upper_cheek_jnt_grp')
            cmds.group('System_R_upper_cheek_jnt', n='R_upper_cheek_cheek_follow_grp')
            cmds.parent('System_R_upper_cheek_jnt', 'System_R_upper_cheek_jnt_grp')
            cmds.parent('L_upper_cheek_cheek_follow_grp', 'R_upper_cheek_cheek_follow_grp', w=True)
            cmds.parent('L_upper_cheek_cheek_follow_grp', 'L_upper_cheek_Ctrl_grp')
            cmds.parent('R_upper_cheek_cheek_follow_grp', 'R_upper_cheek_Ctrl_grp')
            cmds.makeIdentity('L_upper_cheek_cheek_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_upper_cheek_cheek_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_upper_cheek_ctrl', 'L_upper_cheek_cheek_follow_grp')
            cmds.parent('R_upper_cheek_ctrl', 'R_upper_cheek_cheek_follow_grp')
            cmds.group('System_L_upper_cheek_jnt', n='System_L_upper_cheek_cheek_follow_grp')
            cmds.group('System_R_upper_cheek_jnt', n='System_R_upper_cheek_cheek_follow_grp')
            cmds.parent('System_L_upper_cheek_jnt', 'System_L_upper_cheek_jnt_grp')
            cmds.parent('System_R_upper_cheek_jnt', 'System_R_upper_cheek_jnt_grp')
            cmds.parentConstraint('L_upper_cheek_ctrl', 'System_L_upper_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('L_upper_cheek_ctrl', 'System_L_upper_cheek_jnt_grp', mo=True)
            cmds.parentConstraint('R_upper_cheek_ctrl', 'System_R_upper_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('R_upper_cheek_ctrl', 'System_R_upper_cheek_jnt_grp', mo=True)
            cmds.parent('System_L_upper_cheek_cheek_follow_grp', 'L_cheek_Ctrl_grp')
            cmds.parent('System_R_upper_cheek_cheek_follow_grp', 'R_cheek_Ctrl_grp')
            cmds.pointConstraint('L_cheek_ctrl', 'System_L_upper_cheek_cheek_follow_grp', mo=True)
            cmds.pointConstraint('R_cheek_ctrl', 'System_R_upper_cheek_cheek_follow_grp', mo=True)
        if 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_outer_orbicularis_cheek_FK_ctrl')
            cmds.group('L_outer_orbicularis_cheek_FK_ctrl', n='L_outer_orbicularis_cheek_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_outer_orbicularis_cheek_jnt', 'L_outer_orbicularis_cheek_FK_Ctrl_grp')
            cmds.delete('L_outer_orbicularis_cheek_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_outer_orbicularis_cheek_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_outer_orbicularis_cheek_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_outer_orbicularis_cheek_FK_ctrl')
            cmds.setAttr('L_outer_orbicularis_cheek_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_outer_orbicularis_cheek_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_outer_orbicularis_cheek_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_outer_orbicularis_cheek_FK_Ctrl_grp', 'R_outer_orbicularis_cheek_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_outer_orbicularis_cheek_jnt', 'R_outer_orbicularis_cheek_FK_Ctrl_grp')
            cmds.delete('R_outer_orbicularis_cheek_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_outer_orbicularis_cheek_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_outer_orbicularis_cheek_jnt', n='System_L_outer_orbicularis_cheek_jnt_grp')
            cmds.group('System_R_outer_orbicularis_cheek_jnt', n='System_R_outer_orbicularis_cheek_jnt_grp')
            cmds.group('System_L_outer_orbicularis_cheek_jnt', n='System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.parent('System_L_outer_orbicularis_cheek_jnt', 'System_L_outer_orbicularis_cheek_jnt_grp')
            cmds.group('System_R_outer_orbicularis_cheek_jnt', n='System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.parent('System_R_outer_orbicularis_cheek_jnt', 'System_R_outer_orbicularis_cheek_jnt_grp')
            cmds.parent('System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', 'System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', w=True)
            cmds.parent('System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', 'L_upper_cheek_Ctrl_grp')
            cmds.parent('System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', 'R_upper_cheek_Ctrl_grp')
            cmds.makeIdentity('System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.group('L_outer_orbicularis_cheek_FK_ctrl', n='L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.group('R_outer_orbicularis_cheek_FK_ctrl', n='R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.parentConstraint('L_outer_orbicularis_cheek_FK_ctrl', 'System_L_outer_orbicularis_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('L_outer_orbicularis_cheek_FK_ctrl', 'System_L_outer_orbicularis_cheek_jnt_grp', mo=True)
            cmds.parentConstraint('R_outer_orbicularis_cheek_FK_ctrl', 'System_R_outer_orbicularis_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('R_outer_orbicularis_cheek_FK_ctrl', 'System_R_outer_orbicularis_cheek_jnt_grp', mo=True)
            cmds.parentConstraint('L_upper_cheek_ctrl', 'System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', mo=True)
            cmds.parentConstraint('R_upper_cheek_ctrl', 'System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp', mo=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_inner_orbicularis_cheek_FK_ctrl')
            cmds.group('L_inner_orbicularis_cheek_FK_ctrl', n='L_inner_orbicularis_cheek_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_inner_orbicularis_cheek_jnt', 'L_inner_orbicularis_cheek_FK_Ctrl_grp')
            cmds.delete('L_inner_orbicularis_cheek_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_inner_orbicularis_cheek_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_inner_orbicularis_cheek_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_inner_orbicularis_cheek_FK_ctrl')
            cmds.setAttr('L_inner_orbicularis_cheek_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_inner_orbicularis_cheek_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_inner_orbicularis_cheek_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_inner_orbicularis_cheek_FK_Ctrl_grp', 'R_inner_orbicularis_cheek_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_inner_orbicularis_cheek_jnt', 'R_inner_orbicularis_cheek_FK_Ctrl_grp')
            cmds.delete('R_inner_orbicularis_cheek_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_inner_orbicularis_cheek_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_inner_orbicularis_cheek_jnt', n='System_L_inner_orbicularis_cheek_jnt_grp')
            cmds.group('System_R_inner_orbicularis_cheek_jnt', n='System_R_inner_orbicularis_cheek_jnt_grp')
            cmds.group('System_L_inner_orbicularis_cheek_jnt', n='System_L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.parent('System_L_inner_orbicularis_cheek_jnt', 'System_L_inner_orbicularis_cheek_jnt_grp')
            cmds.group('System_R_inner_orbicularis_cheek_jnt', n='System_R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.parent('System_R_inner_orbicularis_cheek_jnt', 'System_R_inner_orbicularis_cheek_jnt_grp')
            cmds.parent('System_L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', 'System_R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', w=True)
            cmds.parent('System_L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', 'L_upper_cheek_Ctrl_grp')
            cmds.parent('System_R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', 'R_upper_cheek_Ctrl_grp')
            cmds.makeIdentity('System_L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('System_R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.group('L_inner_orbicularis_cheek_FK_ctrl', n='L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.group('R_inner_orbicularis_cheek_FK_ctrl', n='R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp')
            cmds.parentConstraint('L_inner_orbicularis_cheek_FK_ctrl', 'System_L_inner_orbicularis_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('L_inner_orbicularis_cheek_FK_ctrl', 'System_L_inner_orbicularis_cheek_jnt_grp', mo=True)
            cmds.parentConstraint('R_inner_orbicularis_cheek_FK_ctrl', 'System_R_inner_orbicularis_cheek_jnt_grp', mo=True)
            cmds.scaleConstraint('R_inner_orbicularis_cheek_FK_ctrl', 'System_R_inner_orbicularis_cheek_jnt_grp', mo=True)
            cmds.parentConstraint('L_upper_cheek_ctrl', 'System_L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', mo=True)
            cmds.parentConstraint('R_upper_cheek_ctrl', 'System_R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp', mo=True)
            cmds.addAttr('L_upper_cheek_ctrl', ln='Orbicularis_cheek_follow', at='double', min=0, max=4)
            cmds.setAttr('L_upper_cheek_ctrl.Orbicularis_cheek_follow', e=1, keyable=True)
            cmds.setAttr('L_upper_cheek_ctrl.Orbicularis_cheek_follow', 1)
            cmds.addAttr('R_upper_cheek_ctrl', ln='Orbicularis_cheek_follow', at='double', min=0, max=4)
            cmds.setAttr('R_upper_cheek_ctrl.Orbicularis_cheek_follow', e=1, keyable=True)
            cmds.setAttr('R_upper_cheek_ctrl.Orbicularis_cheek_follow', 1)
            cmds.expression(
                s='\n//Outer_orbicularis_cheek Upper_cheek Follow\n' + '\nL_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateX = (-System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY/4+System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateX/4)*(L_upper_cheek_ctrl.Orbicularis_cheek_follow);' + '\nL_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY = System_L_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY/2*(L_upper_cheek_ctrl.Orbicularis_cheek_follow);' + '\nR_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateX = (-System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY/4+System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateX/4)*(R_upper_cheek_ctrl.Orbicularis_cheek_follow);' + '\nR_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY = System_R_outer_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY/2*(R_upper_cheek_ctrl.Orbicularis_cheek_follow);' + '\n//Inner_orbicularis_cheek Upper_cheek Follow\n' + '\nL_inner_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY = System_L_inner_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY/2*(L_upper_cheek_ctrl.Orbicularis_cheek_follow);' + '\nR_inner_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY = System_R_inner_orbicularis_cheek_FK_upper_cheek_follow_grp.translateY/2*(R_upper_cheek_ctrl.Orbicularis_cheek_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Orbicularis_cheek_follow_expression')
        cmds.group('L_cheek_upper_side_follow_grp', n='L_cheek_lip_corner_follow_grp')
        cmds.group('R_cheek_upper_side_follow_grp', n='R_cheek_lip_corner_follow_grp')
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.group('L_lower_cheek_lip_corner_down_follow_grp', n='L_lower_cheek_lip_corner_ctrl_follow_grp')
            cmds.group('R_lower_cheek_lip_corner_down_follow_grp', n='R_lower_cheek_lip_corner_ctrl_follow_grp')
            cmds.parentConstraint('System_Head_master_jnt', 'L_upper_cheek_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_upper_cheek_Ctrl_grp', mo=True)
        cmds.addAttr('L_lip_corner_Ctrl', ln='Cheek_follow', at='double', min=0, max=2)
        cmds.setAttr('L_lip_corner_Ctrl.Cheek_follow', e=1, keyable=True)
        cmds.setAttr('L_lip_corner_Ctrl.Cheek_follow', 0.6)
        cmds.addAttr('R_lip_corner_Ctrl', ln='Cheek_follow', at='double', min=0, max=2)
        cmds.setAttr('R_lip_corner_Ctrl.Cheek_follow', e=1, keyable=True)
        cmds.setAttr('R_lip_corner_Ctrl.Cheek_follow', 0.6)
        if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
            cmds.addAttr('L_lip_upper_side_ctrl', ln='Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_upper_side_ctrl.Cheek_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_upper_side_ctrl.Cheek_follow', 0.5)
            cmds.addAttr('R_lip_upper_side_ctrl', ln='Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_upper_side_ctrl.Cheek_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_upper_side_ctrl.Cheek_follow', 0.5)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.addAttr('L_lip_corner_Ctrl', ln='Lower_Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_Ctrl.Lower_Cheek_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_Ctrl.Lower_Cheek_follow', 0.7)
            cmds.addAttr('R_lip_corner_Ctrl', ln='Lower_Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_Ctrl.Lower_Cheek_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_Ctrl.Lower_Cheek_follow', 0.7)
            cmds.addAttr('L_lip_corner_up_Ctrl', ln='Lower_Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_up_Ctrl.Lower_Cheek_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_up_Ctrl.Lower_Cheek_follow', 0.3)
            cmds.addAttr('R_lip_corner_up_Ctrl', ln='Lower_Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_up_Ctrl.Lower_Cheek_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_up_Ctrl.Lower_Cheek_follow', 0.3)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('L_lip_corner_down_Ctrl', ln='Lower_Cheek_follow', at='double', min=0, max=2)
                cmds.setAttr('L_lip_corner_down_Ctrl.Lower_Cheek_follow', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_down_Ctrl.Lower_Cheek_follow', 0.3)
                cmds.addAttr('R_lip_corner_down_Ctrl', ln='Lower_Cheek_follow', at='double', min=0, max=2)
                cmds.setAttr('R_lip_corner_down_Ctrl.Lower_Cheek_follow', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_down_Ctrl.Lower_Cheek_follow', 0.3)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//Cheek Follow\n' + '\nif(System_L_cheek_upper_side_follow_grp.translateX<0){' + '\nL_cheek_upper_side_follow_grp.translateX = System_L_cheek_upper_side_follow_grp.translateX/6*(L_lip_upper_side_ctrl.Cheek_follow);}' + '\nelse{L_cheek_upper_side_follow_grp.translateX = System_L_cheek_upper_side_follow_grp.translateX/1.3*(L_lip_upper_side_ctrl.Cheek_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{L_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/1.3*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nL_cheek_upper_side_follow_grp.translateY = System_L_cheek_upper_side_follow_grp.translateY/3*(L_lip_upper_side_ctrl.Cheek_follow);' + '\nL_cheek_lip_corner_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Cheek_follow);' + '\nL_cheek_upper_side_follow_grp.translateZ = (System_L_cheek_upper_side_follow_grp.translateY/1.5+System_L_cheek_upper_side_follow_grp.translateZ/2)/2*(L_lip_upper_side_ctrl.Cheek_follow);' + '\nL_cheek_lip_corner_follow_grp.translateZ = (System_L_lip_upper_part_follow_grp.translateY/6+System_L_lip_upper_part_follow_grp.translateZ/3)*(L_lip_corner_Ctrl.Cheek_follow);' + '\nif(System_R_cheek_upper_side_follow_grp.translateX>0){' + '\nR_cheek_upper_side_follow_grp.translateX = -System_R_cheek_upper_side_follow_grp.translateX/6*(R_lip_upper_side_ctrl.Cheek_follow);}' + '\nelse{R_cheek_upper_side_follow_grp.translateX = -System_R_cheek_upper_side_follow_grp.translateX/1.3*(R_lip_upper_side_ctrl.Cheek_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{R_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/1.3*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nR_cheek_upper_side_follow_grp.translateY = System_R_cheek_upper_side_follow_grp.translateY/3*(R_lip_upper_side_ctrl.Cheek_follow);' + '\nR_cheek_lip_corner_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Cheek_follow);' + '\nR_cheek_upper_side_follow_grp.translateZ = (System_R_cheek_upper_side_follow_grp.translateY/1.5+System_R_cheek_upper_side_follow_grp.translateZ/2)/2*(R_lip_upper_side_ctrl.Cheek_follow);' + '\nR_cheek_lip_corner_follow_grp.translateZ = (System_R_lip_upper_part_follow_grp.translateY/6+System_R_lip_upper_part_follow_grp.translateZ/3)*(R_lip_corner_Ctrl.Cheek_follow);' + '\n//Lower_Cheek Follow\n' + '\nif(System_L_lower_cheek_lip_corner_follow_grp.translateX<0){' + '\nL_lower_cheek_lip_corner_follow_grp.translateX = System_L_lower_cheek_lip_corner_follow_grp.translateX/8*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nelse{L_lower_cheek_lip_corner_follow_grp.translateX = System_L_lower_cheek_lip_corner_follow_grp.translateX/3.5*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_lower_cheek_lip_corner_ctrl_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/8*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nelse{L_lower_cheek_lip_corner_ctrl_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/3.5*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nL_lower_cheek_lip_corner_follow_grp.translateY = System_L_lower_cheek_lip_corner_follow_grp.translateY/3*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);' + '\nL_lower_cheek_lip_corner_ctrl_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;' + '\nL_lower_cheek_lip_corner_follow_grp.translateZ = System_L_lower_cheek_lip_corner_follow_grp.translateZ/3.5*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);\n' + '\nL_lower_cheek_lip_corner_ctrl_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/3.5*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;\n' + '\nif(System_R_lower_cheek_lip_corner_follow_grp.translateX>0){' + '\nR_lower_cheek_lip_corner_follow_grp.translateX = -System_R_lower_cheek_lip_corner_follow_grp.translateX/8*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nelse{R_lower_cheek_lip_corner_follow_grp.translateX = -System_R_lower_cheek_lip_corner_follow_grp.translateX/3.5*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_lower_cheek_lip_corner_ctrl_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/8*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nelse{R_lower_cheek_lip_corner_ctrl_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/3.5*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nR_lower_cheek_lip_corner_follow_grp.translateY = System_R_lower_cheek_lip_corner_follow_grp.translateY/3*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);' + '\nR_lower_cheek_lip_corner_ctrl_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;' + '\nR_lower_cheek_lip_corner_follow_grp.translateZ = System_R_lower_cheek_lip_corner_follow_grp.translateZ/3.5*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);' + '\nR_lower_cheek_lip_corner_ctrl_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/3.5*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;\n' + '\nif(System_L_lower_cheek_lip_corner_down_follow_grp.translateX<0){' + '\nL_lower_cheek_lip_corner_down_follow_grp.translateX = System_L_lower_cheek_lip_corner_down_follow_grp.translateX/8*(L_lip_corner_down_Ctrl.Lower_Cheek_follow);}' + '\nelse{L_lower_cheek_lip_corner_down_follow_grp.translateX = System_L_lower_cheek_lip_corner_down_follow_grp.translateX/3.5*(L_lip_corner_down_Ctrl.Lower_Cheek_follow);}' + '\nL_lower_cheek_lip_corner_down_follow_grp.translateY = System_L_lower_cheek_lip_corner_down_follow_grp.translateY/4*(L_lip_corner_down_Ctrl.Lower_Cheek_follow);' + '\nL_lower_cheek_lip_corner_down_follow_grp.translateZ = System_L_lower_cheek_lip_corner_down_follow_grp.translateZ/4*(L_lip_corner_down_Ctrl.Lower_Cheek_follow);\n' + '\nif(System_R_lower_cheek_lip_corner_down_follow_grp.translateX>0){' + '\nR_lower_cheek_lip_corner_down_follow_grp.translateX = -System_R_lower_cheek_lip_corner_down_follow_grp.translateX/8*(R_lip_corner_down_Ctrl.Lower_Cheek_follow);}' + '\nelse{R_lower_cheek_lip_corner_down_follow_grp.translateX = -System_R_lower_cheek_lip_corner_down_follow_grp.translateX/3.5*(R_lip_corner_down_Ctrl.Lower_Cheek_follow);}' + '\nR_lower_cheek_lip_corner_down_follow_grp.translateY = System_R_lower_cheek_lip_corner_down_follow_grp.translateY/4*(R_lip_corner_down_Ctrl.Lower_Cheek_follow);' + '\nR_lower_cheek_lip_corner_down_follow_grp.translateZ = System_R_lower_cheek_lip_corner_down_follow_grp.translateZ/4*(R_lip_corner_down_Ctrl.Lower_Cheek_follow);',
                    ae=1, uc=all, alwaysEvaluate=0, n='Cheek_follow_expression')
            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//Cheek Follow\n' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{L_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/1.3*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nL_cheek_lip_corner_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Cheek_follow);' + '\nL_cheek_lip_corner_follow_grp.translateZ = (System_L_lip_upper_part_follow_grp.translateY/6+System_L_lip_upper_part_follow_grp.translateZ/3)*(L_lip_corner_Ctrl.Cheek_follow);' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{R_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/1.3*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nR_cheek_lip_corner_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Cheek_follow);' + '\nR_cheek_lip_corner_follow_grp.translateZ = (System_R_lip_upper_part_follow_grp.translateY/6+System_R_lip_upper_part_follow_grp.translateZ/3)*(R_lip_corner_Ctrl.Cheek_follow);' + '\n//Lower_Cheek Follow\n' + '\nif(System_L_lower_cheek_lip_corner_follow_grp.translateX<0){' + '\nL_lower_cheek_lip_corner_follow_grp.translateX = System_L_lower_cheek_lip_corner_follow_grp.translateX/8*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nelse{L_lower_cheek_lip_corner_follow_grp.translateX = System_L_lower_cheek_lip_corner_follow_grp.translateX/3.5*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_lower_cheek_lip_corner_ctrl_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/8*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nelse{L_lower_cheek_lip_corner_ctrl_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/3.5*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nL_lower_cheek_lip_corner_follow_grp.translateY = System_L_lower_cheek_lip_corner_follow_grp.translateY/3*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);' + '\nL_lower_cheek_lip_corner_ctrl_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;' + '\nL_lower_cheek_lip_corner_follow_grp.translateZ = System_L_lower_cheek_lip_corner_follow_grp.translateZ/3.5*(L_lip_corner_up_Ctrl.Lower_Cheek_follow);\n' + '\nL_lower_cheek_lip_corner_ctrl_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/3.5*(L_lip_corner_Ctrl.Lower_Cheek_follow)*2;\n' + '\nif(System_R_lower_cheek_lip_corner_follow_grp.translateX>0){' + '\nR_lower_cheek_lip_corner_follow_grp.translateX = -System_R_lower_cheek_lip_corner_follow_grp.translateX/8*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nelse{R_lower_cheek_lip_corner_follow_grp.translateX = -System_R_lower_cheek_lip_corner_follow_grp.translateX/3.5*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_lower_cheek_lip_corner_ctrl_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/8*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nelse{R_lower_cheek_lip_corner_ctrl_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/3.5*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;}' + '\nR_lower_cheek_lip_corner_follow_grp.translateY = System_R_lower_cheek_lip_corner_follow_grp.translateY/3*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);' + '\nR_lower_cheek_lip_corner_ctrl_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;' + '\nR_lower_cheek_lip_corner_follow_grp.translateZ = System_R_lower_cheek_lip_corner_follow_grp.translateZ/3.5*(R_lip_corner_up_Ctrl.Lower_Cheek_follow);' + '\nR_lower_cheek_lip_corner_ctrl_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/3.5*(R_lip_corner_Ctrl.Lower_Cheek_follow)*2;\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='Cheek_follow_expression')
        if 'Cheek 02 joint' == self.ui.CheekOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//Cheek Follow\n' + '\nif(System_L_cheek_upper_side_follow_grp.translateX<0){' + '\nL_cheek_upper_side_follow_grp.translateX = System_L_cheek_upper_side_follow_grp.translateX/6*(L_lip_upper_side_ctrl.Cheek_follow);}' + '\nelse{L_cheek_upper_side_follow_grp.translateX = System_L_cheek_upper_side_follow_grp.translateX/1.3*(L_lip_upper_side_ctrl.Cheek_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{L_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/1.3*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nL_cheek_upper_side_follow_grp.translateY = System_L_cheek_upper_side_follow_grp.translateY/3*(L_lip_upper_side_ctrl.Cheek_follow);' + '\nL_cheek_lip_corner_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Cheek_follow);' + '\nL_cheek_upper_side_follow_grp.translateZ = (System_L_cheek_upper_side_follow_grp.translateY/1.5+System_L_cheek_upper_side_follow_grp.translateZ/2)/2*(L_lip_upper_side_ctrl.Cheek_follow);' + '\nL_cheek_lip_corner_follow_grp.translateZ = (System_L_lip_upper_part_follow_grp.translateY/6+System_L_lip_upper_part_follow_grp.translateZ/3)*(L_lip_corner_Ctrl.Cheek_follow);' + '\nif(System_R_cheek_upper_side_follow_grp.translateX>0){' + '\nR_cheek_upper_side_follow_grp.translateX = -System_R_cheek_upper_side_follow_grp.translateX/6*(R_lip_upper_side_ctrl.Cheek_follow);}' + '\nelse{R_cheek_upper_side_follow_grp.translateX = -System_R_cheek_upper_side_follow_grp.translateX/1.3*(R_lip_upper_side_ctrl.Cheek_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{R_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/1.3*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nR_cheek_upper_side_follow_grp.translateY = System_R_cheek_upper_side_follow_grp.translateY/3*(R_lip_upper_side_ctrl.Cheek_follow);' + '\nR_cheek_lip_corner_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Cheek_follow);' + '\nR_cheek_upper_side_follow_grp.translateZ = (System_R_cheek_upper_side_follow_grp.translateY/1.5+System_R_cheek_upper_side_follow_grp.translateZ/2)/2*(R_lip_upper_side_ctrl.Cheek_follow);' + '\nR_cheek_lip_corner_follow_grp.translateZ = (System_R_lip_upper_part_follow_grp.translateY/6+System_R_lip_upper_part_follow_grp.translateZ/3)*(R_lip_corner_Ctrl.Cheek_follow);',
                    ae=1, uc=all, alwaysEvaluate=0, n='Cheek_follow_expression')
            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//Cheek Follow\n' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{L_cheek_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/1.3*(L_lip_corner_Ctrl.Cheek_follow);}' + '\nL_cheek_lip_corner_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Cheek_follow);' + '\nL_cheek_lip_corner_follow_grp.translateZ = (System_L_lip_upper_part_follow_grp.translateY/6+System_L_lip_upper_part_follow_grp.translateZ/3)*(L_lip_corner_Ctrl.Cheek_follow);' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nelse{R_cheek_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/1.3*(R_lip_corner_Ctrl.Cheek_follow);}' + '\nR_cheek_lip_corner_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Cheek_follow);' + '\nR_cheek_lip_corner_follow_grp.translateZ = (System_R_lip_upper_part_follow_grp.translateY/6+System_R_lip_upper_part_follow_grp.translateZ/3)*(R_lip_corner_Ctrl.Cheek_follow);',
                    ae=1, uc=all, alwaysEvaluate=0, n='Cheek_follow_expression')
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lower_liplid_ctrl')
            cmds.group('L_lower_liplid_ctrl', n='L_lower_liplid_Ctrl_grp')
            cmds.pointConstraint('System_L_lower_liplid_jnt', 'L_lower_liplid_Ctrl_grp')
            cmds.delete('L_lower_liplid_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lower_liplid_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_lower_liplid_ctrlShape3.cv[0:1]', 'L_lower_liplid_ctrlShape2.cv[0:1]', 'L_lower_liplid_ctrlShape1.cv[0:1]', 'L_lower_liplid_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_lower_liplid_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lower_liplid_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_lower_liplid_Ctrl_grp', 'R_lower_liplid_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_lower_liplid_jnt', 'R_lower_liplid_Ctrl_grp')
            cmds.delete('R_lower_liplid_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lower_liplid_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_lower_liplid_jnt', n='System_L_lower_liplid_jnt_grp')
            cmds.group('System_R_lower_liplid_jnt', n='System_R_lower_liplid_jnt_grp')
            cmds.group('System_L_lower_liplid_jnt', n='L_lower_liplid_corner_down_follow_grp')
            cmds.parent('System_L_lower_liplid_jnt', 'System_L_lower_liplid_jnt_grp')
            cmds.group('System_R_lower_liplid_jnt', n='R_lower_liplid_corner_down_follow_grp')
            cmds.parent('System_R_lower_liplid_jnt', 'System_R_lower_liplid_jnt_grp')
            cmds.parent('L_lower_liplid_corner_down_follow_grp', 'R_lower_liplid_corner_down_follow_grp', w=True)
            cmds.parent('L_lower_liplid_corner_down_follow_grp', 'L_lower_liplid_Ctrl_grp')
            cmds.parent('R_lower_liplid_corner_down_follow_grp', 'R_lower_liplid_Ctrl_grp')
            cmds.makeIdentity('L_lower_liplid_corner_down_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_lower_liplid_corner_down_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_lower_liplid_ctrl', 'L_lower_liplid_corner_down_follow_grp')
            cmds.parent('R_lower_liplid_ctrl', 'R_lower_liplid_corner_down_follow_grp')
            cmds.setAttr('L_lower_liplid_corner_down_follow_grp.rotateZ', -25)
            cmds.setAttr('R_lower_liplid_corner_down_follow_grp.rotateZ', -25)
            cmds.group('System_L_lower_liplid_jnt', n='System_L_lower_liplid_corner_down_follow_grp')
            cmds.group('System_R_lower_liplid_jnt', n='System_R_lower_liplid_corner_down_follow_grp')
            cmds.parent('System_L_lower_liplid_jnt', 'System_L_lower_liplid_jnt_grp')
            cmds.parent('System_R_lower_liplid_jnt', 'System_R_lower_liplid_jnt_grp')
            cmds.parentConstraint('L_lower_liplid_ctrl', 'System_L_lower_liplid_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lower_liplid_ctrl', 'System_L_lower_liplid_jnt_grp', mo=True)
            cmds.parentConstraint('R_lower_liplid_ctrl', 'System_R_lower_liplid_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lower_liplid_ctrl', 'System_R_lower_liplid_jnt_grp', mo=True)
            cmds.parent('System_L_lower_liplid_corner_down_follow_grp', 'Lower_lip_follow_grp')
            cmds.parent('System_R_lower_liplid_corner_down_follow_grp', 'Lower_lip_follow_grp')
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.pointConstraint('L_lip_corner_down_Ctrl', 'System_L_lower_liplid_corner_down_follow_grp', mo=True)
                cmds.pointConstraint('R_lip_corner_down_Ctrl', 'System_R_lower_liplid_corner_down_follow_grp', mo=True)
            cmds.parentConstraint('Jaw_Master_Ctrl', 'L_lower_liplid_Ctrl_grp', mo=True)
            cmds.parentConstraint('Jaw_Master_Ctrl', 'R_lower_liplid_Ctrl_grp', mo=True)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.group('L_lower_liplid_ctrl', n='L_lower_liplid_lip_corner_follow_grp')
            cmds.group('R_lower_liplid_ctrl', n='R_lower_liplid_lip_corner_follow_grp')
            cmds.group('L_lower_liplid_lip_corner_follow_grp', n='L_lower_liplid_jaw_follow_grp')
            cmds.group('R_lower_liplid_lip_corner_follow_grp', n='R_lower_liplid_jaw_follow_grp')
            cmds.addAttr('L_lip_corner_Ctrl', ln='Upper_Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_Ctrl.Upper_Cheek_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_Ctrl.Upper_Cheek_follow', 0.7)
            cmds.addAttr('R_lip_corner_Ctrl', ln='Upper_Cheek_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_Ctrl.Upper_Cheek_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_Ctrl.Upper_Cheek_follow', 0.7)
            cmds.addAttr('L_lip_corner_Ctrl', ln='Liplid_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_Ctrl.Liplid_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_Ctrl.Liplid_follow', 0.5)
            cmds.addAttr('R_lip_corner_Ctrl', ln='Liplid_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_Ctrl.Liplid_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_Ctrl.Liplid_follow', 0.5)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('L_lip_corner_down_Ctrl', ln='Liplid_follow', at='double', min=0, max=2)
                cmds.setAttr('L_lip_corner_down_Ctrl.Liplid_follow', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_down_Ctrl.Liplid_follow', 0.3)
                cmds.addAttr('R_lip_corner_down_Ctrl', ln='Liplid_follow', at='double', min=0, max=2)
                cmds.setAttr('R_lip_corner_down_Ctrl.Liplid_follow', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_down_Ctrl.Liplid_follow', 0.3)
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//Upper Cheek Follow\n' + '\nL_upper_cheek_cheek_follow_grp.translateX = System_L_upper_cheek_cheek_follow_grp.translateX/3*(L_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nL_upper_cheek_cheek_follow_grp.translateY = System_L_upper_cheek_cheek_follow_grp.translateY/2*(L_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nL_upper_cheek_cheek_follow_grp.translateZ = System_L_upper_cheek_cheek_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Upper_Cheek_follow);\n' + '\nR_upper_cheek_cheek_follow_grp.translateX = System_R_upper_cheek_cheek_follow_grp.translateX/3*(R_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nR_upper_cheek_cheek_follow_grp.translateY = System_R_upper_cheek_cheek_follow_grp.translateY/2*(R_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nR_upper_cheek_cheek_follow_grp.translateZ = System_R_upper_cheek_cheek_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Upper_Cheek_follow);\n' + '\n//Liplid Follow\n' + '\nif(System_L_lower_liplid_corner_down_follow_grp.translateX<0){' + '\nL_lower_liplid_corner_down_follow_grp.translateX = System_L_lower_liplid_corner_down_follow_grp.translateX/6*(L_lip_corner_down_Ctrl.Liplid_follow);}' + '\nelse{L_lower_liplid_corner_down_follow_grp.translateX = System_L_lower_liplid_corner_down_follow_grp.translateX/1.5*(L_lip_corner_down_Ctrl.Liplid_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_lower_liplid_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6*(L_lip_corner_Ctrl.Liplid_follow);}' + '\nelse{L_lower_liplid_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/1.5*(L_lip_corner_Ctrl.Liplid_follow);}' + '\nL_lower_liplid_corner_down_follow_grp.translateY = System_L_lower_liplid_corner_down_follow_grp.translateY/3*(L_lip_corner_down_Ctrl.Liplid_follow);' + '\nL_lower_liplid_lip_corner_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Liplid_follow);' + '\nL_lower_liplid_corner_down_follow_grp.translateZ = System_L_lower_liplid_corner_down_follow_grp.translateZ/5*(L_lip_corner_down_Ctrl.Liplid_follow);\n' + '\nL_lower_liplid_lip_corner_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/5*(L_lip_corner_Ctrl.Liplid_follow);\n' + '\nif(System_R_lower_liplid_corner_down_follow_grp.translateX>0){' + '\nR_lower_liplid_corner_down_follow_grp.translateX = -System_R_lower_liplid_corner_down_follow_grp.translateX/6*(R_lip_corner_down_Ctrl.Liplid_follow);}' + '\nelse{R_lower_liplid_corner_down_follow_grp.translateX = -System_R_lower_liplid_corner_down_follow_grp.translateX/1.5*(R_lip_corner_down_Ctrl.Liplid_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_lower_liplid_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6*(R_lip_corner_Ctrl.Liplid_follow);}' + '\nelse{R_lower_liplid_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/1.5*(R_lip_corner_Ctrl.Liplid_follow);}' + '\nR_lower_liplid_corner_down_follow_grp.translateY = System_R_lower_liplid_corner_down_follow_grp.translateY/3*(R_lip_corner_down_Ctrl.Liplid_follow);' + '\nR_lower_liplid_lip_corner_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Liplid_follow);' + '\nR_lower_liplid_corner_down_follow_grp.translateZ = System_R_lower_liplid_corner_down_follow_grp.translateZ/5*(R_lip_corner_down_Ctrl.Liplid_follow);\n' + '\nR_lower_liplid_lip_corner_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/5*(R_lip_corner_Ctrl.Liplid_follow);\n' + '\n//Lower liplid Jaw Follow\n' + '\nL_lower_liplid_jaw_follow_grp.translateZ = -System_Jaw_master_jnt_grp.rotateX*0.02*$sumXYZ;\n' + '\nR_lower_liplid_jaw_follow_grp.translateZ = -System_Jaw_master_jnt_grp.rotateX*0.02*$sumXYZ;\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='Upper_cheek_and_Liplid_expression')
            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//Upper Cheek Follow\n' + '\nL_upper_cheek_cheek_follow_grp.translateX = System_L_upper_cheek_cheek_follow_grp.translateX/3*(L_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nL_upper_cheek_cheek_follow_grp.translateY = System_L_upper_cheek_cheek_follow_grp.translateY/2*(L_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nL_upper_cheek_cheek_follow_grp.translateZ = System_L_upper_cheek_cheek_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Upper_Cheek_follow);\n' + '\nR_upper_cheek_cheek_follow_grp.translateX = System_R_upper_cheek_cheek_follow_grp.translateX/3*(R_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nR_upper_cheek_cheek_follow_grp.translateY = System_R_upper_cheek_cheek_follow_grp.translateY/2*(R_lip_corner_Ctrl.Upper_Cheek_follow);' + '\nR_upper_cheek_cheek_follow_grp.translateZ = System_R_upper_cheek_cheek_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Upper_Cheek_follow);\n' + '\n//Liplid Follow\n' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_lower_liplid_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6*(L_lip_corner_Ctrl.Liplid_follow);}' + '\nelse{L_lower_liplid_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/1.5*(L_lip_corner_Ctrl.Liplid_follow);}' + '\nL_lower_liplid_lip_corner_follow_grp.translateY = System_L_lip_upper_part_follow_grp.translateY/3*(L_lip_corner_Ctrl.Liplid_follow);' + '\nL_lower_liplid_lip_corner_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/5*(L_lip_corner_Ctrl.Liplid_follow);\n' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_lower_liplid_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6*(R_lip_corner_Ctrl.Liplid_follow);}' + '\nelse{R_lower_liplid_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/1.5*(R_lip_corner_Ctrl.Liplid_follow);}' + '\nR_lower_liplid_lip_corner_follow_grp.translateY = System_R_lip_upper_part_follow_grp.translateY/3*(R_lip_corner_Ctrl.Liplid_follow);' + '\nR_lower_liplid_lip_corner_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/5*(R_lip_corner_Ctrl.Liplid_follow);\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='Upper_cheek_and_Liplid_expression')
        cmds.group(em=True, n='Cheek_All_Ctrl_grp')
        cmds.parent('*_cheek_Ctrl_grp', 'Cheek_All_Ctrl_grp')
        if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.parent('*_lower_cheek_Ctrl_grp', '*_upper_cheek_Ctrl_grp', '*_lower_liplid_Ctrl_grp', 'Cheek_All_Ctrl_grp')
        if 'Cheek 12 joint' == self.ui.CheekOption.currentText():
            cmds.parent('*_*_orbicularis_cheek_FK_Ctrl_grp', 'Cheek_All_Ctrl_grp')

    def nose_all_system(self):
        if 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_nose_ctrl')
            cmds.group('L_nose_ctrl', n='L_nose_Ctrl_grp')
            cmds.pointConstraint('System_L_nose_jnt', 'L_nose_Ctrl_grp')
            cmds.delete('L_nose_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_nose_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_nose_ctrlShape3.cv[0:1]', 'L_nose_ctrlShape2.cv[0:1]', 'L_nose_ctrlShape1.cv[0:1]', 'L_nose_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_nose_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_nose_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_nose_Ctrl_grp', 'R_nose_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_nose_ctrlShape.overrideColor', 29)
            cmds.setAttr('R_nose_ctrlShape4.overrideColor', 29)
            cmds.setAttr('R_nose_ctrlShape5.overrideColor', 29)
            cmds.setAttr('R_nose_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_nose_jnt', 'R_nose_Ctrl_grp')
            cmds.delete('R_nose_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_nose_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_nose_jnt', n='System_L_nose_jnt_grp')
            cmds.group('System_R_nose_jnt', n='System_R_nose_jnt_grp')
            cmds.parentConstraint('L_nose_ctrl', 'System_L_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('L_nose_ctrl', 'System_L_nose_jnt_grp', mo=True)
            cmds.parentConstraint('R_nose_ctrl', 'System_R_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('R_nose_ctrl', 'System_R_nose_jnt_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'L_nose_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_nose_Ctrl_grp', mo=True)
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_nasalis_transverse_nose_FK_ctrl')
            cmds.group('L_nasalis_transverse_nose_FK_ctrl', n='L_nasalis_transverse_nose_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_nasalis_transverse_nose_jnt', 'L_nasalis_transverse_nose_FK_Ctrl_grp')
            cmds.delete('L_nasalis_transverse_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_nasalis_transverse_nose_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0.7 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_nasalis_transverse_nose_FK_ctrl.cv[0:7]', r=True)
            cmds.select('L_nasalis_transverse_nose_FK_ctrl')
            cmds.setAttr('L_nasalis_transverse_nose_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_nasalis_transverse_nose_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_nasalis_transverse_nose_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_nasalis_transverse_nose_FK_Ctrl_grp', 'R_nasalis_transverse_nose_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_nasalis_transverse_nose_FK_ctrlShape.overrideColor', 16)
            cmds.pointConstraint('System_R_nasalis_transverse_nose_jnt', 'R_nasalis_transverse_nose_FK_Ctrl_grp')
            cmds.delete('R_nasalis_transverse_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_nasalis_transverse_nose_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_nasalis_transverse_nose_jnt', n='System_L_nasalis_transverse_nose_jnt_grp')
            cmds.group('System_R_nasalis_transverse_nose_jnt', n='System_R_nasalis_transverse_nose_jnt_grp')
            cmds.parentConstraint('L_nasalis_transverse_nose_FK_ctrl', 'System_L_nasalis_transverse_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('L_nasalis_transverse_nose_FK_ctrl', 'System_L_nasalis_transverse_nose_jnt_grp', mo=True)
            cmds.parentConstraint('R_nasalis_transverse_nose_FK_ctrl', 'System_R_nasalis_transverse_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('R_nasalis_transverse_nose_FK_ctrl', 'System_R_nasalis_transverse_nose_jnt_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'L_nasalis_transverse_nose_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_nasalis_transverse_nose_FK_Ctrl_grp', mo=True)
            cmds.group('L_nasalis_transverse_nose_FK_ctrl', n='L_nasalis_transverse_nose_L_nose_follow_grp')
            cmds.group('R_nasalis_transverse_nose_FK_ctrl', n='R_nasalis_transverse_nose_R_nose_follow_grp')
            cmds.group(em=True, n='System_L_nasalis_transverse_nose_L_nose_follow_grp')
            cmds.pointConstraint('System_L_nasalis_transverse_nose_jnt', 'System_L_nasalis_transverse_nose_L_nose_follow_grp')
            cmds.delete('System_L_nasalis_transverse_nose_L_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_nasalis_transverse_nose_L_nose_follow_grp', t=True, apply=True)
            cmds.group(em=True, n='System_R_nasalis_transverse_nose_R_nose_follow_grp')
            cmds.pointConstraint('System_R_nasalis_transverse_nose_jnt', 'System_R_nasalis_transverse_nose_R_nose_follow_grp')
            cmds.delete('System_R_nasalis_transverse_nose_R_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_R_nasalis_transverse_nose_R_nose_follow_grp', t=True, apply=True)
            cmds.parentConstraint('L_nose_ctrl', 'System_L_nasalis_transverse_nose_L_nose_follow_grp', mo=True)
            cmds.parentConstraint('R_nose_ctrl', 'System_R_nasalis_transverse_nose_R_nose_follow_grp', mo=True)
            cmds.addAttr('L_nose_ctrl', ln='nasalis_transverse_follow', at='double', min=0, max=4)
            cmds.setAttr('L_nose_ctrl.nasalis_transverse_follow', e=1, keyable=True)
            cmds.setAttr('L_nose_ctrl.nasalis_transverse_follow', 1)
            cmds.addAttr('R_nose_ctrl', ln='nasalis_transverse_follow', at='double', min=0, max=4)
            cmds.setAttr('R_nose_ctrl.nasalis_transverse_follow', e=1, keyable=True)
            cmds.setAttr('R_nose_ctrl.nasalis_transverse_follow', 1)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_procerus_nose_FK_ctrl')
            cmds.group('L_procerus_nose_FK_ctrl', n='L_procerus_nose_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_procerus_nose_jnt', 'L_procerus_nose_FK_Ctrl_grp')
            cmds.delete('L_procerus_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_procerus_nose_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_procerus_nose_FK_ctrl.cv[0:7]', r=True)
            cmds.select('L_procerus_nose_FK_ctrl')
            cmds.setAttr('L_procerus_nose_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_procerus_nose_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_procerus_nose_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_procerus_nose_FK_Ctrl_grp', 'R_procerus_nose_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_procerus_nose_FK_ctrlShape.overrideColor', 16)
            cmds.pointConstraint('System_R_procerus_nose_jnt', 'R_procerus_nose_FK_Ctrl_grp')
            cmds.delete('R_procerus_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_procerus_nose_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_procerus_nose_jnt', n='System_L_procerus_nose_jnt_grp')
            cmds.group('System_R_procerus_nose_jnt', n='System_R_procerus_nose_jnt_grp')
            cmds.parentConstraint('L_procerus_nose_FK_ctrl', 'System_L_procerus_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('L_procerus_nose_FK_ctrl', 'System_L_procerus_nose_jnt_grp', mo=True)
            cmds.parentConstraint('R_procerus_nose_FK_ctrl', 'System_R_procerus_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('R_procerus_nose_FK_ctrl', 'System_R_procerus_nose_jnt_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'L_procerus_nose_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_procerus_nose_FK_Ctrl_grp', mo=True)
            cmds.group('L_procerus_nose_FK_ctrl', n='L_procerus_nose_L_nose_follow_grp')
            cmds.group('R_procerus_nose_FK_ctrl', n='R_procerus_nose_R_nose_follow_grp')
            cmds.group(em=True, n='System_L_procerus_nose_L_nose_follow_grp')
            cmds.pointConstraint('System_L_procerus_nose_jnt', 'System_L_procerus_nose_L_nose_follow_grp')
            cmds.delete('System_L_procerus_nose_L_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_procerus_nose_L_nose_follow_grp', t=True, apply=True)
            cmds.group(em=True, n='System_R_procerus_nose_R_nose_follow_grp')
            cmds.pointConstraint('System_R_procerus_nose_jnt', 'System_R_procerus_nose_R_nose_follow_grp')
            cmds.delete('System_R_procerus_nose_R_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_R_procerus_nose_R_nose_follow_grp', t=True, apply=True)
            cmds.parentConstraint('L_nose_ctrl', 'System_L_procerus_nose_L_nose_follow_grp', mo=True)
            cmds.parentConstraint('R_nose_ctrl', 'System_R_procerus_nose_R_nose_follow_grp', mo=True)
            cmds.addAttr('L_nose_ctrl', ln='procerus_follow', at='double', min=0, max=4)
            cmds.setAttr('L_nose_ctrl.procerus_follow', e=1, keyable=True)
            cmds.setAttr('L_nose_ctrl.procerus_follow', 1)
            cmds.addAttr('R_nose_ctrl', ln='procerus_follow', at='double', min=0, max=4)
            cmds.setAttr('R_nose_ctrl.procerus_follow', e=1, keyable=True)
            cmds.setAttr('R_nose_ctrl.procerus_follow', 1)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_nasolabial_fold_nose_FK_ctrl')
            cmds.group('L_nasolabial_fold_nose_FK_ctrl', n='L_nasolabial_fold_nose_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_nasolabial_fold_nose_jnt', 'L_nasolabial_fold_nose_FK_Ctrl_grp')
            cmds.delete('L_nasolabial_fold_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_nasolabial_fold_nose_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_nasolabial_fold_nose_FK_ctrl.cv[0:7]', r=True)
            cmds.select('L_nasolabial_fold_nose_FK_ctrl')
            cmds.setAttr('L_nasolabial_fold_nose_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_nasolabial_fold_nose_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_nasolabial_fold_nose_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_nasolabial_fold_nose_FK_Ctrl_grp', 'R_nasolabial_fold_nose_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_nasolabial_fold_nose_FK_ctrlShape.overrideColor', 16)
            cmds.pointConstraint('System_R_nasolabial_fold_nose_jnt', 'R_nasolabial_fold_nose_FK_Ctrl_grp')
            cmds.delete('R_nasolabial_fold_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_nasolabial_fold_nose_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_nasolabial_fold_nose_jnt', n='System_L_nasolabial_fold_nose_jnt_grp')
            cmds.group('System_R_nasolabial_fold_nose_jnt', n='System_R_nasolabial_fold_nose_jnt_grp')
            cmds.parentConstraint('L_nasolabial_fold_nose_FK_ctrl', 'System_L_nasolabial_fold_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('L_nasolabial_fold_nose_FK_ctrl', 'System_L_nasolabial_fold_nose_jnt_grp', mo=True)
            cmds.parentConstraint('R_nasolabial_fold_nose_FK_ctrl', 'System_R_nasolabial_fold_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('R_nasolabial_fold_nose_FK_ctrl', 'System_R_nasolabial_fold_nose_jnt_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'L_nasolabial_fold_nose_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_nasolabial_fold_nose_FK_Ctrl_grp', mo=True)
            cmds.group('L_nasolabial_fold_nose_FK_ctrl', n='L_nasolabial_fold_nose_L_nose_follow_grp')
            cmds.group('R_nasolabial_fold_nose_FK_ctrl', n='R_nasolabial_fold_nose_R_nose_follow_grp')
            cmds.group(em=True, n='System_L_nasolabial_fold_nose_L_nose_follow_grp')
            cmds.pointConstraint('System_L_nasolabial_fold_nose_jnt', 'System_L_nasolabial_fold_nose_L_nose_follow_grp')
            cmds.delete('System_L_nasolabial_fold_nose_L_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_nasolabial_fold_nose_L_nose_follow_grp', t=True, apply=True)
            cmds.group(em=True, n='System_R_nasolabial_fold_nose_R_nose_follow_grp')
            cmds.pointConstraint('System_R_nasolabial_fold_nose_jnt', 'System_R_nasolabial_fold_nose_R_nose_follow_grp')
            cmds.delete('System_R_nasolabial_fold_nose_R_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_R_nasolabial_fold_nose_R_nose_follow_grp', t=True, apply=True)
            cmds.parentConstraint('L_nose_ctrl', 'System_L_nasolabial_fold_nose_L_nose_follow_grp', mo=True)
            cmds.parentConstraint('R_nose_ctrl', 'System_R_nasolabial_fold_nose_R_nose_follow_grp', mo=True)
            cmds.addAttr('L_nose_ctrl', ln='nasolabial_fold_follow', at='double', min=0, max=4)
            cmds.setAttr('L_nose_ctrl.nasolabial_fold_follow', e=1, keyable=True)
            cmds.setAttr('L_nose_ctrl.nasolabial_fold_follow', 2)
            cmds.addAttr('R_nose_ctrl', ln='nasolabial_fold_follow', at='double', min=0, max=4)
            cmds.setAttr('R_nose_ctrl.nasolabial_fold_follow', e=1, keyable=True)
            cmds.setAttr('R_nose_ctrl.nasolabial_fold_follow', 2)
            cmds.expression(
                s='\n//nasalis_transverse_Follow\n' + '\nL_nasalis_transverse_nose_L_nose_follow_grp.translateX = (System_L_nasalis_transverse_nose_L_nose_follow_grp.translateX/3-System_L_nasalis_transverse_nose_L_nose_follow_grp.translateY/6)*(L_nose_ctrl.nasalis_transverse_follow);' + '\nL_nasalis_transverse_nose_L_nose_follow_grp.translateY = System_L_nasalis_transverse_nose_L_nose_follow_grp.translateY/2*(L_nose_ctrl.nasalis_transverse_follow);' + '\nL_nasalis_transverse_nose_L_nose_follow_grp.translateZ = System_L_nasalis_transverse_nose_L_nose_follow_grp.translateZ/3*(L_nose_ctrl.nasalis_transverse_follow);\n' + '\nR_nasalis_transverse_nose_R_nose_follow_grp.translateX = (System_R_nasalis_transverse_nose_R_nose_follow_grp.translateX/3-System_R_nasalis_transverse_nose_R_nose_follow_grp.translateY/6)*(R_nose_ctrl.nasalis_transverse_follow);' + '\nR_nasalis_transverse_nose_R_nose_follow_grp.translateY = System_R_nasalis_transverse_nose_R_nose_follow_grp.translateY/2*(R_nose_ctrl.nasalis_transverse_follow);' + '\nR_nasalis_transverse_nose_R_nose_follow_grp.translateZ = System_R_nasalis_transverse_nose_R_nose_follow_grp.translateZ/3*(R_nose_ctrl.nasalis_transverse_follow);\n' + '\n//procerus_nose_Follow\n' + '\nL_procerus_nose_L_nose_follow_grp.translateX = (System_L_procerus_nose_L_nose_follow_grp.translateX/10-System_L_procerus_nose_L_nose_follow_grp.translateY/6)*(L_nose_ctrl.procerus_follow);' + '\nL_procerus_nose_L_nose_follow_grp.translateY = System_L_procerus_nose_L_nose_follow_grp.translateY/8*(L_nose_ctrl.procerus_follow);' + '\nL_procerus_nose_L_nose_follow_grp.translateZ = (System_L_procerus_nose_L_nose_follow_grp.translateZ/8-System_L_procerus_nose_L_nose_follow_grp.translateY/3)*(L_nose_ctrl.procerus_follow);\n' + '\nR_procerus_nose_R_nose_follow_grp.translateX = (System_R_procerus_nose_R_nose_follow_grp.translateX/10-System_R_procerus_nose_R_nose_follow_grp.translateY/6)*(R_nose_ctrl.procerus_follow);' + '\nR_procerus_nose_R_nose_follow_grp.translateY = System_R_procerus_nose_R_nose_follow_grp.translateY/8*(R_nose_ctrl.procerus_follow);' + '\nR_procerus_nose_R_nose_follow_grp.translateZ = (System_R_procerus_nose_R_nose_follow_grp.translateZ/8-System_R_procerus_nose_R_nose_follow_grp.translateY/3)*(R_nose_ctrl.procerus_follow);\n' + '\n//nasolabial_fold_Follow\n' + '\nL_nasolabial_fold_nose_L_nose_follow_grp.translateX = (System_L_nasolabial_fold_nose_L_nose_follow_grp.translateX/3+System_L_nasolabial_fold_nose_L_nose_follow_grp.translateY/6)*(L_nose_ctrl.nasolabial_fold_follow);' + '\nL_nasolabial_fold_nose_L_nose_follow_grp.translateY = System_L_nasolabial_fold_nose_L_nose_follow_grp.translateY/2*(L_nose_ctrl.nasolabial_fold_follow);' + '\nL_nasolabial_fold_nose_L_nose_follow_grp.translateZ = (System_L_nasolabial_fold_nose_L_nose_follow_grp.translateZ/3-System_L_nasolabial_fold_nose_L_nose_follow_grp.translateY/3)*(L_nose_ctrl.nasolabial_fold_follow);' + '\nR_nasolabial_fold_nose_R_nose_follow_grp.translateX = (System_R_nasolabial_fold_nose_R_nose_follow_grp.translateX/3+System_R_nasolabial_fold_nose_R_nose_follow_grp.translateY/6)*(R_nose_ctrl.nasolabial_fold_follow);' + '\nR_nasolabial_fold_nose_R_nose_follow_grp.translateY = System_R_nasolabial_fold_nose_R_nose_follow_grp.translateY/2*(R_nose_ctrl.nasolabial_fold_follow);' + '\nR_nasolabial_fold_nose_R_nose_follow_grp.translateZ = (System_R_nasolabial_fold_nose_R_nose_follow_grp.translateZ/3-System_R_nasolabial_fold_nose_R_nose_follow_grp.translateY/3)*(R_nose_ctrl.nasolabial_fold_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Nose_nasalis_expression')
        if 'Nose 01 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'Nose_ctrl')
            cmds.group('Nose_ctrl', n='Nose_Ctrl_grp')
            cmds.pointConstraint('System_nose_jnt', 'Nose_Ctrl_grp')
            cmds.delete('Nose_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('Nose_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('Nose_ctrlShape3.cv[0:1]', 'Nose_ctrlShape2.cv[0:1]', 'Nose_ctrlShape1.cv[0:1]', 'Nose_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('Nose_ctrl')
            cmds.group('System_nose_jnt', n='System_nose_jnt_grp')
            if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.group('System_nose_jnt', n='nose_L_nose_follow_grp')
                cmds.parent('System_nose_jnt', 'System_nose_jnt_grp')
                cmds.group('System_nose_jnt', n='nose_R_nose_follow_grp')
                cmds.parent('System_nose_jnt', 'System_nose_jnt_grp')
            if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.parent('nose_L_nose_follow_grp', 'nose_R_nose_follow_grp', w=True)
                cmds.parent('nose_L_nose_follow_grp', 'Nose_Ctrl_grp')
                cmds.parent('nose_R_nose_follow_grp', 'nose_L_nose_follow_grp')
                cmds.makeIdentity('nose_L_nose_follow_grp', apply=True, t=True, r=True, scale=True)
                cmds.makeIdentity('nose_R_nose_follow_grp', apply=True, t=True, r=True, scale=True)
                cmds.parent('Nose_ctrl', 'nose_R_nose_follow_grp')
                cmds.group('System_nose_jnt', n='System_nose_L_nose_follow_grp')
                cmds.group('System_nose_jnt', n='System_nose_R_nose_follow_grp')
            if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.parent('System_nose_jnt', 'System_nose_jnt_grp')
            if 'Nose 01 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.parentConstraint('Nose_ctrl', 'System_nose_jnt_grp', mo=True)
                cmds.scaleConstraint('Nose_ctrl', 'System_nose_jnt_grp', mo=True)
            if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
                cmds.parent('System_nose_L_nose_follow_grp', 'L_nose_Ctrl_grp')
                cmds.parent('System_nose_R_nose_follow_grp', 'R_nose_Ctrl_grp')
                cmds.pointConstraint('L_nose_ctrl', 'System_nose_L_nose_follow_grp', mo=True)
                cmds.pointConstraint('R_nose_ctrl', 'System_nose_R_nose_follow_grp', mo=True)
                cmds.parentConstraint('System_Head_master_jnt', 'Nose_Ctrl_grp', mo=True)
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.addAttr('L_nose_ctrl', ln='Center_Nose_follow', at='double', min=0, max=2)
            cmds.setAttr('L_nose_ctrl.Center_Nose_follow', e=1, keyable=True)
            cmds.setAttr('L_nose_ctrl.Center_Nose_follow', 0.2)
            cmds.addAttr('R_nose_ctrl', ln='Center_Nose_follow', at='double', min=0, max=2)
            cmds.setAttr('R_nose_ctrl.Center_Nose_follow', e=1, keyable=True)
            cmds.setAttr('R_nose_ctrl.Center_Nose_follow', 0.2)
            cmds.expression(
                s='\n//Nose Center_Follow\n' + '\nnose_L_nose_follow_grp.translateX = System_nose_L_nose_follow_grp.translateX/3*(L_nose_ctrl.Center_Nose_follow);' + '\nnose_L_nose_follow_grp.translateY = System_nose_L_nose_follow_grp.translateY/3*(L_nose_ctrl.Center_Nose_follow);' + '\nnose_L_nose_follow_grp.translateZ = System_nose_L_nose_follow_grp.translateZ/3*(L_nose_ctrl.Center_Nose_follow);\n' + '\nnose_R_nose_follow_grp.translateX = -System_nose_R_nose_follow_grp.translateX/3*(R_nose_ctrl.Center_Nose_follow);' + '\nnose_R_nose_follow_grp.translateY = System_nose_R_nose_follow_grp.translateY/3*(R_nose_ctrl.Center_Nose_follow);' + '\nnose_R_nose_follow_grp.translateZ = System_nose_R_nose_follow_grp.translateZ/3*(R_nose_ctrl.Center_Nose_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Nose_Center_expression')
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'Lower_nose_ctrl')
            cmds.group('Lower_nose_ctrl', n='Lower_nose_Ctrl_grp')
            cmds.pointConstraint('System_lower_nose_jnt', 'Lower_nose_Ctrl_grp')
            cmds.delete('Lower_nose_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('Lower_nose_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('Lower_nose_ctrlShape3.cv[0:1]', 'Lower_nose_ctrlShape2.cv[0:1]', 'Lower_nose_ctrlShape1.cv[0:1]', 'Lower_nose_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('Lower_nose_ctrl')
            cmds.group('System_lower_nose_jnt', n='System_lower_nose_jnt_grp')
            cmds.parentConstraint('Lower_nose_ctrl', 'System_lower_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('Lower_nose_ctrl', 'System_lower_nose_jnt_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'Lower_nose_Ctrl_grp', mo=True)
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='depressor_septi_nose_FK_ctrl')
            cmds.group('depressor_septi_nose_FK_ctrl', n='depressor_septi_nose_FK_Ctrl_grp')
            cmds.pointConstraint('System_depressor_septi_nose_jnt', 'depressor_septi_nose_FK_Ctrl_grp')
            cmds.delete('depressor_septi_nose_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('depressor_septi_nose_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'depressor_septi_nose_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('depressor_septi_nose_FK_ctrl')
            cmds.setAttr('depressor_septi_nose_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('depressor_septi_nose_FK_ctrlShape.overrideColor', 16)
            cmds.group('System_depressor_septi_nose_jnt', n='System_depressor_septi_nose_jnt_grp')
            cmds.parentConstraint('depressor_septi_nose_FK_ctrl', 'System_depressor_septi_nose_jnt_grp', mo=True)
            cmds.scaleConstraint('depressor_septi_nose_FK_ctrl', 'System_depressor_septi_nose_jnt_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'depressor_septi_nose_FK_Ctrl_grp', mo=True)
            cmds.group('depressor_septi_nose_FK_ctrl', n='L_depressor_septi_nose_L_nose_follow_grp')
            cmds.group('depressor_septi_nose_FK_ctrl', n='R_depressor_septi_nose_R_nose_follow_grp')
            cmds.group(em=True, n='System_L_depressor_septi_nose_L_nose_follow_grp')
            cmds.pointConstraint('System_depressor_septi_nose_jnt', 'System_L_depressor_septi_nose_L_nose_follow_grp')
            cmds.delete('System_L_depressor_septi_nose_L_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_depressor_septi_nose_L_nose_follow_grp', t=True, apply=True)
            cmds.group(em=True, n='System_R_depressor_septi_nose_R_nose_follow_grp')
            cmds.pointConstraint('System_depressor_septi_nose_jnt', 'System_R_depressor_septi_nose_R_nose_follow_grp')
            cmds.delete('System_R_depressor_septi_nose_R_nose_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_R_depressor_septi_nose_R_nose_follow_grp', t=True, apply=True)
            cmds.parentConstraint('L_nose_ctrl', 'System_L_depressor_septi_nose_L_nose_follow_grp', mo=True)
            cmds.parentConstraint('R_nose_ctrl', 'System_R_depressor_septi_nose_R_nose_follow_grp', mo=True)
            cmds.addAttr('L_nose_ctrl', ln='depressor_septi_follow', at='double', min=0, max=4)
            cmds.setAttr('L_nose_ctrl.depressor_septi_follow', e=1, keyable=True)
            cmds.setAttr('L_nose_ctrl.depressor_septi_follow', 1)
            cmds.addAttr('R_nose_ctrl', ln='depressor_septi_follow', at='double', min=0, max=4)
            cmds.setAttr('R_nose_ctrl.depressor_septi_follow', e=1, keyable=True)
            cmds.setAttr('R_nose_ctrl.depressor_septi_follow', 1)
            cmds.expression('Nose_Center_expression', e=True,
                            s='\n//Nose Center_Follow\n' + '\nnose_L_nose_follow_grp.translateX = System_nose_L_nose_follow_grp.translateX/3*(L_nose_ctrl.Center_Nose_follow);' + '\nnose_L_nose_follow_grp.translateY = System_nose_L_nose_follow_grp.translateY/3*(L_nose_ctrl.Center_Nose_follow);' + '\nnose_L_nose_follow_grp.translateZ = System_nose_L_nose_follow_grp.translateZ/3*(L_nose_ctrl.Center_Nose_follow);\n' + '\nnose_R_nose_follow_grp.translateX = -System_nose_R_nose_follow_grp.translateX/3*(R_nose_ctrl.Center_Nose_follow);' + '\nnose_R_nose_follow_grp.translateY = System_nose_R_nose_follow_grp.translateY/3*(R_nose_ctrl.Center_Nose_follow);' + '\nnose_R_nose_follow_grp.translateZ = System_nose_R_nose_follow_grp.translateZ/3*(R_nose_ctrl.Center_Nose_follow);\n' + '\n//depressor_septi_Follow\n' + '\nif(System_L_depressor_septi_nose_L_nose_follow_grp.translateY > 0){' + '\nL_depressor_septi_nose_L_nose_follow_grp.translateY = System_L_depressor_septi_nose_L_nose_follow_grp.translateY/5*(L_nose_ctrl.depressor_septi_follow);}' + '\nelse {L_depressor_septi_nose_L_nose_follow_grp.translateY = System_L_depressor_septi_nose_L_nose_follow_grp.translateY/2*(L_nose_ctrl.depressor_septi_follow);}\n' + '\nif(System_R_depressor_septi_nose_R_nose_follow_grp.translateY > 0){' + '\nR_depressor_septi_nose_R_nose_follow_grp.translateY = System_R_depressor_septi_nose_R_nose_follow_grp.translateY/5*(R_nose_ctrl.depressor_septi_follow);}' + '\nelse {R_depressor_septi_nose_R_nose_follow_grp.translateY = System_R_depressor_septi_nose_R_nose_follow_grp.translateY/2*(R_nose_ctrl.depressor_septi_follow);}',
                            ae=1, uc=all, alwaysEvaluate=0)
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.parent('System_L_nasalis_transverse_nose_L_nose_follow_grp', 'L_nose_Ctrl_grp')
            cmds.parent('System_R_nasalis_transverse_nose_R_nose_follow_grp', 'R_nose_Ctrl_grp')
            cmds.parent('System_L_procerus_nose_L_nose_follow_grp', 'L_nose_Ctrl_grp')
            cmds.parent('System_R_procerus_nose_R_nose_follow_grp', 'R_nose_Ctrl_grp')
            cmds.parent('System_L_nasolabial_fold_nose_L_nose_follow_grp', 'L_nose_Ctrl_grp')
            cmds.parent('System_R_nasolabial_fold_nose_R_nose_follow_grp', 'R_nose_Ctrl_grp')
            cmds.parent('System_L_depressor_septi_nose_L_nose_follow_grp', 'L_nose_Ctrl_grp')
            cmds.parent('System_R_depressor_septi_nose_R_nose_follow_grp', 'R_nose_Ctrl_grp')
        cmds.group(em=True, n='Nose_All_Ctrl_grp')
        if 'Nose 01 joint' == self.ui.NoseOption.currentText():
            cmds.parent('Nose_Ctrl_grp', 'Nose_All_Ctrl_grp')
        if 'Nose 02 joint' == self.ui.NoseOption.currentText():
            cmds.parent('*_nose_Ctrl_grp', 'Nose_All_Ctrl_grp')
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.parent('*_nose_Ctrl_grp', 'Nose_Ctrl_grp', 'Nose_All_Ctrl_grp')
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.parent('*_nasalis_transverse_nose_FK_Ctrl_grp', '*_procerus_nose_FK_Ctrl_grp', '*_nasolabial_fold_nose_FK_Ctrl_grp', 'depressor_septi_nose_FK_Ctrl_grp', 'Nose_All_Ctrl_grp')

    # todo lip connect
    def lip_nose_connect_system(self):
        if 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group('System_L_nose_jnt', n='L_nose_upper_side_follow_grp')
                cmds.parent('System_L_nose_jnt', 'System_L_nose_jnt_grp')
                cmds.group('System_R_nose_jnt', n='R_nose_upper_side_follow_grp')
                cmds.parent('System_R_nose_jnt', 'System_R_nose_jnt_grp')
                cmds.parent('L_nose_upper_side_follow_grp', 'R_nose_upper_side_follow_grp', w=True)
                cmds.parent('L_nose_upper_side_follow_grp', 'L_nose_Ctrl_grp')
                cmds.parent('R_nose_upper_side_follow_grp', 'R_nose_Ctrl_grp')
                cmds.makeIdentity('L_nose_upper_side_follow_grp', apply=True, t=True, r=True, scale=True)
                cmds.makeIdentity('R_nose_upper_side_follow_grp', apply=True, t=True, r=True, scale=True)
                cmds.parent('L_nose_ctrl', 'L_nose_upper_side_follow_grp')
                cmds.parent('R_nose_ctrl', 'R_nose_upper_side_follow_grp')
                cmds.group('System_L_nose_jnt', n='System_L_nose_upper_side_follow_grp')
                cmds.group('System_R_nose_jnt', n='System_R_nose_upper_side_follow_grp')
                cmds.parent('System_L_nose_jnt', 'System_L_nose_jnt_grp')
                cmds.parent('System_R_nose_jnt', 'System_R_nose_jnt_grp')
                cmds.parent('System_L_nose_upper_side_follow_grp', 'System_R_nose_upper_side_follow_grp', 'Upper_lip_follow_grp')
                cmds.pointConstraint('L_lip_upper_side_ctrl', 'System_L_nose_upper_side_follow_grp', mo=True)
                cmds.pointConstraint('R_lip_upper_side_ctrl', 'System_R_nose_upper_side_follow_grp', mo=True)
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            if 'Lip 04 joint' == self.ui.LipOption.currentText() or 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group('System_lower_nose_jnt', n='lower_nose_upper_lip_follow_grp')
                cmds.parent('System_lower_nose_jnt', 'System_lower_nose_jnt_grp')
                cmds.parent('lower_nose_upper_lip_follow_grp', w=True)
                cmds.parent('lower_nose_upper_lip_follow_grp', 'Lower_nose_Ctrl_grp')
                cmds.makeIdentity('lower_nose_upper_lip_follow_grp', apply=True, t=True, r=True, scale=True)
                cmds.parent('Lower_nose_ctrl', 'lower_nose_upper_lip_follow_grp')
                cmds.group('System_lower_nose_jnt', n='System_lower_nose_upper_lip_follow_grp')
                cmds.parent('System_lower_nose_jnt', 'System_lower_nose_jnt_grp')
                cmds.parent('System_lower_nose_upper_lip_follow_grp', 'Upper_lip_Master_Ctrl_grp')
                cmds.pointConstraint('Upper_lip_ctrl', 'System_lower_nose_upper_lip_follow_grp', mo=True)
        if 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group('L_nose_upper_side_follow_grp', n='L_nose_lip_corner_follow_grp')
                cmds.group('R_nose_upper_side_follow_grp', n='R_nose_lip_corner_follow_grp')
            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.group('L_nose_ctrl', n='L_nose_lip_corner_follow_grp')
                cmds.group('R_nose_ctrl', n='R_nose_lip_corner_follow_grp')
            cmds.addAttr('L_lip_corner_Ctrl', ln='Nose_follow', at='double', min=0, max=2)
            cmds.setAttr('L_lip_corner_Ctrl.Nose_follow', e=1, keyable=True)
            cmds.setAttr('L_lip_corner_Ctrl.Nose_follow', 0.3)
            cmds.addAttr('R_lip_corner_Ctrl', ln='Nose_follow', at='double', min=0, max=2)
            cmds.setAttr('R_lip_corner_Ctrl.Nose_follow', e=1, keyable=True)
            cmds.setAttr('R_lip_corner_Ctrl.Nose_follow', 0.3)
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.addAttr('L_lip_upper_side_ctrl', ln='Nose_follow', at='double', min=0, max=2)
                cmds.setAttr('L_lip_upper_side_ctrl.Nose_follow', e=1, keyable=True)
                cmds.setAttr('L_lip_upper_side_ctrl.Nose_follow', 0.5)
                cmds.addAttr('R_lip_upper_side_ctrl', ln='Nose_follow', at='double', min=0, max=2)
                cmds.setAttr('R_lip_upper_side_ctrl.Nose_follow', e=1, keyable=True)
                cmds.setAttr('R_lip_upper_side_ctrl.Nose_follow', 0.5)
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.addAttr('Upper_lip_ctrl', ln='Lower_Nose_follow', at='double', min=0, max=2)
            cmds.setAttr('Upper_lip_ctrl.Lower_Nose_follow', e=1, keyable=True)
            cmds.setAttr('Upper_lip_ctrl.Lower_Nose_follow', 0.5)
        if 'Nose 02 joint' == self.ui.NoseOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//L_R_Nose Follow\n' + '\nif(System_L_nose_upper_side_follow_grp.translateX<0){' + '\nL_nose_upper_side_follow_grp.translateX = System_L_nose_upper_side_follow_grp.translateX/6.5*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{L_nose_upper_side_follow_grp.translateX = System_L_nose_upper_side_follow_grp.translateX/3*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6.5*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/3*(L_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_L_nose_upper_side_follow_grp.translateY>0){' + '\nL_nose_upper_side_follow_grp.translateY = System_L_nose_upper_side_follow_grp.translateY/2*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{L_nose_upper_side_follow_grp.translateY = System_L_nose_upper_side_follow_grp.translateY/2*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateY>0){' + '\nL_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/2*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/4*(L_lip_corner_Ctrl.Nose_follow);}' + '\nL_nose_upper_side_follow_grp.translateZ = System_L_nose_upper_side_follow_grp.translateZ/10*(L_lip_upper_side_ctrl.Nose_follow);\n' + '\nL_nose_lip_corner_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Nose_follow);\n' + '\nif(System_R_nose_upper_side_follow_grp.translateX>0){' + '\nR_nose_upper_side_follow_grp.translateX = -System_R_nose_upper_side_follow_grp.translateX/6.5*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{R_nose_upper_side_follow_grp.translateX = -System_R_nose_upper_side_follow_grp.translateX/3*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6.5*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/3*(R_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_R_nose_upper_side_follow_grp.translateY>0){' + '\nR_nose_upper_side_follow_grp.translateY = System_R_nose_upper_side_follow_grp.translateY/2*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{R_nose_upper_side_follow_grp.translateY = System_R_nose_upper_side_follow_grp.translateY/2*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateY>0){' + '\nR_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/2*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/4*(R_lip_corner_Ctrl.Nose_follow);}' + '\nR_nose_upper_side_follow_grp.translateZ = System_R_nose_upper_side_follow_grp.translateZ/10*(R_lip_upper_side_ctrl.Nose_follow);\n' + '\nR_nose_lip_corner_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Nose_follow);\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='L_R_Nose_expression')
            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//L_R_Nose Follow\n' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6.5*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/3*(L_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateY>0){' + '\nL_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/2*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/4*(L_lip_corner_Ctrl.Nose_follow);}' + '\nL_nose_lip_corner_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Nose_follow);\n' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6.5*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/3*(R_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateY>0){' + '\nR_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/2*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/4*(R_lip_corner_Ctrl.Nose_follow);}' + '\nR_nose_lip_corner_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Nose_follow);\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='L_R_Nose_expression')
        if 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//L_R_Nose Follow\n' + '\nif(System_L_nose_upper_side_follow_grp.translateX<0){' + '\nL_nose_upper_side_follow_grp.translateX = System_L_nose_upper_side_follow_grp.translateX/6.5*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{L_nose_upper_side_follow_grp.translateX = System_L_nose_upper_side_follow_grp.translateX/3*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6.5*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/3*(L_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_L_nose_upper_side_follow_grp.translateY>0){' + '\nL_nose_upper_side_follow_grp.translateY = System_L_nose_upper_side_follow_grp.translateY/2*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{L_nose_upper_side_follow_grp.translateY = System_L_nose_upper_side_follow_grp.translateY/2*(L_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateY>0){' + '\nL_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/2*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/4*(L_lip_corner_Ctrl.Nose_follow);}' + '\nL_nose_upper_side_follow_grp.translateZ = System_L_nose_upper_side_follow_grp.translateZ/10*(L_lip_upper_side_ctrl.Nose_follow);\n' + '\nL_nose_lip_corner_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Nose_follow);\n' + '\nif(System_R_nose_upper_side_follow_grp.translateX>0){' + '\nR_nose_upper_side_follow_grp.translateX = -System_R_nose_upper_side_follow_grp.translateX/6.5*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{R_nose_upper_side_follow_grp.translateX = -System_R_nose_upper_side_follow_grp.translateX/3*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6.5*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/3*(R_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_R_nose_upper_side_follow_grp.translateY>0){' + '\nR_nose_upper_side_follow_grp.translateY = System_R_nose_upper_side_follow_grp.translateY/2*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nelse{R_nose_upper_side_follow_grp.translateY = System_R_nose_upper_side_follow_grp.translateY/2*(R_lip_upper_side_ctrl.Nose_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateY>0){' + '\nR_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/2*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/4*(R_lip_corner_Ctrl.Nose_follow);}' + '\nR_nose_upper_side_follow_grp.translateZ = System_R_nose_upper_side_follow_grp.translateZ/10*(R_lip_upper_side_ctrl.Nose_follow);\n' + '\nR_nose_lip_corner_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Nose_follow);\n\n//Lower_Nose Follow\n' + '\nlower_nose_upper_lip_follow_grp.translateX = System_lower_nose_upper_lip_follow_grp.translateX/3*(Upper_lip_ctrl.Lower_Nose_follow);' + '\nlower_nose_upper_lip_follow_grp.translateY = System_lower_nose_upper_lip_follow_grp.translateY/2*(Upper_lip_ctrl.Lower_Nose_follow);' + '\nlower_nose_upper_lip_follow_grp.translateZ = System_lower_nose_upper_lip_follow_grp.translateZ/3*(Upper_lip_ctrl.Lower_Nose_follow);\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='L_R_U_Nose_expression')
            elif 'Lip 04 joint' == self.ui.LipOption.currentText():
                cmds.expression(
                    s='\n//L_R_Nose Follow\n' + '\nif(System_L_lip_upper_part_follow_grp.translateX<0){' + '\nL_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/6.5*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateX = System_L_lip_upper_part_follow_grp.translateX/3*(L_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_L_lip_upper_part_follow_grp.translateY>0){' + '\nL_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/2*(L_lip_corner_Ctrl.Nose_follow);}' + '\nelse{L_nose_lip_corner_follow_grp.translateY = (System_L_lip_upper_part_follow_grp.translateY)/4*(L_lip_corner_Ctrl.Nose_follow);}' + '\nL_nose_lip_corner_follow_grp.translateZ = System_L_lip_upper_part_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Nose_follow);\n' + '\nif(System_R_lip_upper_part_follow_grp.translateX>0){' + '\nR_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/6.5*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateX = -System_R_lip_upper_part_follow_grp.translateX/3*(R_lip_corner_Ctrl.Nose_follow);}' + '\nif(System_R_lip_upper_part_follow_grp.translateY>0){' + '\nR_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/2*(R_lip_corner_Ctrl.Nose_follow);}' + '\nelse{R_nose_lip_corner_follow_grp.translateY = (System_R_lip_upper_part_follow_grp.translateY)/4*(R_lip_corner_Ctrl.Nose_follow);}' + '\nR_nose_lip_corner_follow_grp.translateZ = System_R_lip_upper_part_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Nose_follow);\n\n//Lower_Nose Follow\n' + '\nlower_nose_upper_lip_follow_grp.translateX = System_lower_nose_upper_lip_follow_grp.translateX/3*(Upper_lip_ctrl.Lower_Nose_follow);' + '\nlower_nose_upper_lip_follow_grp.translateY = System_lower_nose_upper_lip_follow_grp.translateY/2*(Upper_lip_ctrl.Lower_Nose_follow);' + '\nlower_nose_upper_lip_follow_grp.translateZ = System_lower_nose_upper_lip_follow_grp.translateZ/3*(Upper_lip_ctrl.Lower_Nose_follow);\n',
                    ae=1, uc=all, alwaysEvaluate=0, n='L_R_U_Nose_expression')
        if 'Nose 11 joint' == self.ui.NoseOption.currentText():
            if 'Lip 10 joint' == self.ui.LipOption.currentText() or 'Lip 14 joint' == self.ui.LipOption.currentText() or 'Lip 14 & Lip Outer 5 joint' == self.ui.LipOption.currentText():
                cmds.group('L_nasolabial_fold_nose_FK_ctrl', n='L_nasolabial_fold_nose_upper_side_follow_grp')
                cmds.group('R_nasolabial_fold_nose_FK_ctrl', n='R_nasolabial_fold_nose_upper_side_follow_grp')
                cmds.group(em=True, n='System_L_nasolabial_fold_nose_upper_side_follow_grp')
                cmds.pointConstraint('System_L_nasolabial_fold_nose_jnt', 'System_L_nasolabial_fold_nose_upper_side_follow_grp')
                cmds.delete('System_L_nasolabial_fold_nose_upper_side_follow_grp_pointConstraint1')
                cmds.makeIdentity('System_L_nasolabial_fold_nose_upper_side_follow_grp', t=True, apply=True)
                cmds.group(em=True, n='System_R_nasolabial_fold_nose_upper_side_follow_grp')
                cmds.pointConstraint('System_R_nasolabial_fold_nose_jnt', 'System_R_nasolabial_fold_nose_upper_side_follow_grp')
                cmds.delete('System_R_nasolabial_fold_nose_upper_side_follow_grp_pointConstraint1')
                cmds.makeIdentity('System_R_nasolabial_fold_nose_upper_side_follow_grp', t=True, apply=True)
                cmds.pointConstraint('L_lip_upper_side_ctrl', 'System_L_nasolabial_fold_nose_upper_side_follow_grp', mo=True)
                cmds.pointConstraint('R_lip_upper_side_ctrl', 'System_R_nasolabial_fold_nose_upper_side_follow_grp', mo=True)
                cmds.addAttr('L_lip_upper_side_ctrl', ln='nasolabial_fold', at='double', min=0, max=4)
                cmds.setAttr('L_lip_upper_side_ctrl.nasolabial_fold', e=1, keyable=True)
                cmds.setAttr('L_lip_upper_side_ctrl.nasolabial_fold', 1)
                cmds.addAttr('R_lip_upper_side_ctrl', ln='nasolabial_fold', at='double', min=0, max=4)
                cmds.setAttr('R_lip_upper_side_ctrl.nasolabial_fold', e=1, keyable=True)
                cmds.setAttr('R_lip_upper_side_ctrl.nasolabial_fold', 1)
                cmds.parent('System_*_nasolabial_fold_nose_upper_side_follow_grp', 'Upper_lip_follow_grp')
                cmds.group('L_nasolabial_fold_nose_FK_ctrl', n='L_nasolabial_fold_nose_corner_up_follow_grp')
                cmds.group('R_nasolabial_fold_nose_FK_ctrl', n='R_nasolabial_fold_nose_corner_up_follow_grp')
                cmds.group(em=True, n='System_L_nasolabial_fold_nose_corner_up_follow_grp')
                cmds.pointConstraint('System_L_nasolabial_fold_nose_jnt', 'System_L_nasolabial_fold_nose_corner_up_follow_grp')
                cmds.delete('System_L_nasolabial_fold_nose_corner_up_follow_grp_pointConstraint1')
                cmds.makeIdentity('System_L_nasolabial_fold_nose_corner_up_follow_grp', t=True, apply=True)
                cmds.group(em=True, n='System_R_nasolabial_fold_nose_corner_up_follow_grp')
                cmds.pointConstraint('System_R_nasolabial_fold_nose_jnt', 'System_R_nasolabial_fold_nose_corner_up_follow_grp')
                cmds.delete('System_R_nasolabial_fold_nose_corner_up_follow_grp_pointConstraint1')
                cmds.makeIdentity('System_R_nasolabial_fold_nose_corner_up_follow_grp', t=True, apply=True)
                cmds.addAttr('L_lip_corner_up_Ctrl', ln='nasolabial_fold', at='double', min=0, max=4)
                cmds.setAttr('L_lip_corner_up_Ctrl.nasolabial_fold', e=1, keyable=True)
                cmds.setAttr('L_lip_corner_up_Ctrl.nasolabial_fold', 1)
                cmds.addAttr('R_lip_corner_up_Ctrl', ln='nasolabial_fold', at='double', min=0, max=4)
                cmds.setAttr('R_lip_corner_up_Ctrl.nasolabial_fold', e=1, keyable=True)
                cmds.setAttr('R_lip_corner_up_Ctrl.nasolabial_fold', 1)
                cmds.pointConstraint('L_lip_corner_up_Ctrl', 'System_L_nasolabial_fold_nose_corner_up_follow_grp', mo=True)
                cmds.pointConstraint('R_lip_corner_up_Ctrl', 'System_R_nasolabial_fold_nose_corner_up_follow_grp', mo=True)
                cmds.parent('System_L_nasolabial_fold_nose_corner_up_follow_grp', 'Upper_lip_follow_grp')
                cmds.parent('System_R_nasolabial_fold_nose_corner_up_follow_grp', 'Upper_lip_follow_grp')
                cmds.expression(
                    s='\n//nasolabial_fold upper_side_Follow\n' + '\nL_nasolabial_fold_nose_upper_side_follow_grp.translateX = (System_L_nasolabial_fold_nose_upper_side_follow_grp.translateX/3+System_L_nasolabial_fold_nose_upper_side_follow_grp.translateY/6)*(L_lip_upper_side_ctrl.nasolabial_fold);' + '\nL_nasolabial_fold_nose_upper_side_follow_grp.translateY = (System_L_nasolabial_fold_nose_upper_side_follow_grp.translateY+L_lip_corner_up_Ctrl_grp.translateY)/2*(L_lip_upper_side_ctrl.nasolabial_fold);' + '\nL_nasolabial_fold_nose_upper_side_follow_grp.translateZ = (System_L_nasolabial_fold_nose_upper_side_follow_grp.translateZ/3-System_L_nasolabial_fold_nose_upper_side_follow_grp.translateY/4)*(L_lip_upper_side_ctrl.nasolabial_fold);' + '\nR_nasolabial_fold_nose_upper_side_follow_grp.translateX = (-System_R_nasolabial_fold_nose_upper_side_follow_grp.translateX/3+System_R_nasolabial_fold_nose_upper_side_follow_grp.translateY/6)*(R_lip_upper_side_ctrl.nasolabial_fold);' + '\nR_nasolabial_fold_nose_upper_side_follow_grp.translateY = (System_R_nasolabial_fold_nose_upper_side_follow_grp.translateY+R_lip_corner_up_Ctrl_grp.translateY)/2*(R_lip_upper_side_ctrl.nasolabial_fold);' + '\nR_nasolabial_fold_nose_upper_side_follow_grp.translateZ = (System_R_nasolabial_fold_nose_upper_side_follow_grp.translateZ/3-System_R_nasolabial_fold_nose_upper_side_follow_grp.translateY/4)*(R_lip_upper_side_ctrl.nasolabial_fold);' + '\n//nasolabial_fold corner_up_Follow\n' + '\nL_nasolabial_fold_nose_corner_up_follow_grp.translateX = (System_L_nasolabial_fold_nose_corner_up_follow_grp.translateX/5+System_L_nasolabial_fold_nose_corner_up_follow_grp.translateY/8)*(L_lip_corner_up_Ctrl.nasolabial_fold);' + '\nL_nasolabial_fold_nose_corner_up_follow_grp.translateY = (System_L_nasolabial_fold_nose_corner_up_follow_grp.translateY+L_lip_corner_up_Ctrl_grp.translateY)/3*(L_lip_corner_up_Ctrl.nasolabial_fold);' + '\nL_nasolabial_fold_nose_corner_up_follow_grp.translateZ = (System_L_nasolabial_fold_nose_corner_up_follow_grp.translateZ/3-System_L_nasolabial_fold_nose_corner_up_follow_grp.translateY/6)*(L_lip_corner_up_Ctrl.nasolabial_fold);' + '\nR_nasolabial_fold_nose_corner_up_follow_grp.translateX = (-System_R_nasolabial_fold_nose_corner_up_follow_grp.translateX/5+System_R_nasolabial_fold_nose_corner_up_follow_grp.translateY/8)*(R_lip_corner_up_Ctrl.nasolabial_fold);' + '\nR_nasolabial_fold_nose_corner_up_follow_grp.translateY = (System_R_nasolabial_fold_nose_corner_up_follow_grp.translateY+R_lip_corner_up_Ctrl_grp.translateY)/3*(R_lip_corner_up_Ctrl.nasolabial_fold);' + '\nR_nasolabial_fold_nose_corner_up_follow_grp.translateZ = (System_R_nasolabial_fold_nose_corner_up_follow_grp.translateZ/3-System_R_nasolabial_fold_nose_corner_up_follow_grp.translateY/6)*(R_lip_corner_up_Ctrl.nasolabial_fold);',
                    ae=1, uc=all, alwaysEvaluate=0, n='Nose_nasolabial_fold_expression')

    def cheek_nose_connect_system(self):
        if 'Nose 02 joint' == self.ui.NoseOption.currentText() or 'Nose 04 joint' == self.ui.NoseOption.currentText() or 'Nose 11 joint' == self.ui.NoseOption.currentText():
            cmds.group('L_cheek_upper_side_follow_grp', n='L_cheek_L_nose_follow_grp')
            cmds.group('R_cheek_upper_side_follow_grp', n='R_cheek_R_nose_follow_grp')
            cmds.group('System_L_cheek_jnt', n='System_L_cheek_L_nose_follow_grp')
            cmds.parent('System_L_cheek_jnt', 'System_L_cheek_jnt_grp')
            cmds.group('System_R_cheek_jnt', n='System_R_cheek_R_nose_follow_grp')
            cmds.parent('System_R_cheek_jnt', 'System_R_cheek_jnt_grp')
            cmds.parent('System_L_cheek_L_nose_follow_grp', 'L_nose_Ctrl_grp')
            cmds.parent('System_R_cheek_R_nose_follow_grp', 'R_nose_Ctrl_grp')
            cmds.pointConstraint('L_nose_ctrl', 'System_L_cheek_L_nose_follow_grp', mo=True)
            cmds.pointConstraint('R_nose_ctrl', 'System_R_cheek_R_nose_follow_grp', mo=True)
            cmds.expression(
                s='\n//L_R_Nose Cheek Follow\n' + '\nL_cheek_L_nose_follow_grp.translateX = System_L_cheek_L_nose_follow_grp.translateX/3*(L_lip_corner_Ctrl.Cheek_follow);' + '\nL_cheek_L_nose_follow_grp.translateY = System_L_cheek_L_nose_follow_grp.translateY/2*(L_lip_corner_Ctrl.Cheek_follow);' + '\nL_cheek_L_nose_follow_grp.translateZ = System_L_cheek_L_nose_follow_grp.translateZ/10*(L_lip_corner_Ctrl.Cheek_follow);\n' + '\nR_cheek_R_nose_follow_grp.translateX = System_R_cheek_R_nose_follow_grp.translateX/3*(R_lip_corner_Ctrl.Cheek_follow);' + '\nR_cheek_R_nose_follow_grp.translateY = System_R_cheek_R_nose_follow_grp.translateY/2*(R_lip_corner_Ctrl.Cheek_follow);' + '\nR_cheek_R_nose_follow_grp.translateZ = System_R_cheek_R_nose_follow_grp.translateZ/10*(R_lip_corner_Ctrl.Cheek_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Nose_Cheek_expression')

    # todo brow all
    def brow_all_system(self):
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                self.create_cube_control(13)
            else:
                self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.7, self.ctrl_scale * 0.7, self.ctrl_scale * 0.7, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_brow_ctrl')
            cmds.group('L_brow_ctrl', n='L_brow_Ctrl_grp')
            cmds.pointConstraint('System_L_brow_jnt', 'L_brow_Ctrl_grp')
            cmds.delete('L_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_brow_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_brow_ctrlShape3.cv[0:1]', 'L_brow_ctrlShape2.cv[0:1]', 'L_brow_ctrlShape1.cv[0:1]', 'L_brow_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_brow_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_brow_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_brow_Ctrl_grp', 'R_brow_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.setAttr('R_brow_ctrlShape.overrideColor', 13)
                cmds.setAttr('R_brow_ctrlShape4.overrideColor', 13)
                cmds.setAttr('R_brow_ctrlShape5.overrideColor', 13)
                cmds.setAttr('R_brow_ctrlShape6.overrideColor', 13)
            else:
                cmds.setAttr('R_brow_ctrlShape.overrideColor', 29)
                cmds.setAttr('R_brow_ctrlShape4.overrideColor', 29)
                cmds.setAttr('R_brow_ctrlShape5.overrideColor', 29)
                cmds.setAttr('R_brow_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_brow_jnt', 'R_brow_Ctrl_grp')
            cmds.delete('R_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_brow_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_brow_jnt', n='System_L_brow_jnt_grp')
            cmds.group('System_R_brow_jnt', n='System_R_brow_jnt_grp')
            cmds.group('System_L_brow_jnt', n='L_brow_brow_02_follow_grp')
            cmds.parent('System_L_brow_jnt', 'System_L_brow_jnt_grp')
            cmds.group('System_R_brow_jnt', n='R_brow_brow_02_follow_grp')
            cmds.parent('System_R_brow_jnt', 'System_R_brow_jnt_grp')
            cmds.parent('L_brow_brow_02_follow_grp', 'R_brow_brow_02_follow_grp', w=True)
            cmds.parent('L_brow_brow_02_follow_grp', 'L_brow_Ctrl_grp')
            cmds.parent('R_brow_brow_02_follow_grp', 'R_brow_Ctrl_grp')
            cmds.makeIdentity('L_brow_brow_02_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_brow_brow_02_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_brow_ctrl', 'L_brow_brow_02_follow_grp')
            cmds.parent('R_brow_ctrl', 'R_brow_brow_02_follow_grp')
            cmds.setAttr('L_brow_brow_02_follow_grp.rotateY', 19)
            cmds.setAttr('R_brow_brow_02_follow_grp.rotateY', 19)
            cmds.group('System_L_brow_jnt_grp', n='System_L_brow_master_follow_grp')
            cmds.group('System_R_brow_jnt_grp', n='System_R_brow_master_follow_grp')
            cmds.parentConstraint('L_brow_ctrl', 'System_L_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('L_brow_ctrl', 'System_L_brow_jnt_grp', mo=True)
            cmds.parentConstraint('R_brow_ctrl', 'System_R_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('R_brow_ctrl', 'System_R_brow_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_brow_master_follow_grp', 'L_brow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_brow_master_follow_grp', 'R_brow_Ctrl_grp', mo=True)
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                self.create_cube_control(13)
            else:
                self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_brow_02_ctrl')
            cmds.group('L_brow_02_ctrl', n='L_brow_02_Ctrl_grp')
            cmds.pointConstraint('System_L_brow_02_jnt', 'L_brow_02_Ctrl_grp')
            cmds.delete('L_brow_02_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_brow_02_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_brow_02_ctrlShape3.cv[0:1]', 'L_brow_02_ctrlShape2.cv[0:1]', 'L_brow_02_ctrlShape1.cv[0:1]', 'L_brow_02_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_brow_02_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_brow_02_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_brow_02_Ctrl_grp', 'R_brow_02_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.setAttr('R_brow_02_ctrlShape.overrideColor', 13)
                cmds.setAttr('R_brow_02_ctrlShape4.overrideColor', 13)
                cmds.setAttr('R_brow_02_ctrlShape5.overrideColor', 13)
                cmds.setAttr('R_brow_02_ctrlShape6.overrideColor', 13)
            else:
                cmds.setAttr('R_brow_02_ctrlShape.overrideColor', 29)
                cmds.setAttr('R_brow_02_ctrlShape4.overrideColor', 29)
                cmds.setAttr('R_brow_02_ctrlShape5.overrideColor', 29)
                cmds.setAttr('R_brow_02_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_brow_02_jnt', 'R_brow_02_Ctrl_grp')
            cmds.delete('R_brow_02_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_brow_02_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_brow_02_jnt', n='System_L_brow_02_jnt_grp')
            cmds.group('System_R_brow_02_jnt', n='System_R_brow_02_jnt_grp')
            cmds.group('System_L_brow_02_jnt', n='L_brow_02_brow_follow_grp')
            cmds.parent('System_L_brow_02_jnt', 'System_L_brow_02_jnt_grp')
            cmds.group('System_R_brow_02_jnt', n='R_brow_02_brow_follow_grp')
            cmds.parent('System_R_brow_02_jnt', 'System_R_brow_02_jnt_grp')
            cmds.parent('L_brow_02_brow_follow_grp', 'R_brow_02_brow_follow_grp', w=True)
            cmds.parent('L_brow_02_brow_follow_grp', 'L_brow_02_Ctrl_grp')
            cmds.parent('R_brow_02_brow_follow_grp', 'R_brow_02_Ctrl_grp')
            cmds.makeIdentity('L_brow_02_brow_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_brow_02_brow_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_brow_02_ctrl', 'L_brow_02_brow_follow_grp')
            cmds.parent('R_brow_02_ctrl', 'R_brow_02_brow_follow_grp')
            cmds.setAttr('L_brow_02_brow_follow_grp.rotateY', 25)
            cmds.setAttr('R_brow_02_brow_follow_grp.rotateY', 25)
            cmds.group('System_L_brow_02_jnt_grp', n='System_L_brow_02_master_follow_grp')
            cmds.group('System_R_brow_02_jnt_grp', n='System_R_brow_02_master_follow_grp')
            cmds.parentConstraint('L_brow_02_ctrl', 'System_L_brow_02_jnt_grp', mo=True)
            cmds.scaleConstraint('L_brow_02_ctrl', 'System_L_brow_02_jnt_grp', mo=True)
            cmds.parentConstraint('R_brow_02_ctrl', 'System_R_brow_02_jnt_grp', mo=True)
            cmds.scaleConstraint('R_brow_02_ctrl', 'System_R_brow_02_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_brow_02_master_follow_grp', 'L_brow_02_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_brow_02_master_follow_grp', 'R_brow_02_Ctrl_grp', mo=True)
        if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                self.create_cube_control(13)
            else:
                self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_brow_03_ctrl')
            cmds.group('L_brow_03_ctrl', n='L_brow_03_Ctrl_grp')
            cmds.pointConstraint('System_L_brow_03_jnt', 'L_brow_03_Ctrl_grp')
            cmds.delete('L_brow_03_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_brow_03_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_brow_03_ctrlShape3.cv[0:1]', 'L_brow_03_ctrlShape2.cv[0:1]', 'L_brow_03_ctrlShape1.cv[0:1]', 'L_brow_03_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_brow_03_ctrl')
            cmds.setAttr('L_brow_03_Ctrl_grp.rotateY', 40)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_brow_03_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_brow_03_Ctrl_grp', 'R_brow_03_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.setAttr('R_brow_03_ctrlShape.overrideColor', 13)
                cmds.setAttr('R_brow_03_ctrlShape4.overrideColor', 13)
                cmds.setAttr('R_brow_03_ctrlShape5.overrideColor', 13)
                cmds.setAttr('R_brow_03_ctrlShape6.overrideColor', 13)
            else:
                cmds.setAttr('R_brow_03_ctrlShape.overrideColor', 29)
                cmds.setAttr('R_brow_03_ctrlShape4.overrideColor', 29)
                cmds.setAttr('R_brow_03_ctrlShape5.overrideColor', 29)
                cmds.setAttr('R_brow_03_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_brow_03_jnt', 'R_brow_03_Ctrl_grp')
            cmds.delete('R_brow_03_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_brow_03_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_brow_03_jnt', n='System_L_brow_03_jnt_grp')
            cmds.group('System_R_brow_03_jnt', n='System_R_brow_03_jnt_grp')
            cmds.group('System_L_brow_03_jnt', n='L_brow_03_brow_02_follow_grp')
            cmds.parent('System_L_brow_03_jnt', 'System_L_brow_03_jnt_grp')
            cmds.group('System_R_brow_03_jnt', n='R_brow_03_brow_02_follow_grp')
            cmds.parent('System_R_brow_03_jnt', 'System_R_brow_03_jnt_grp')
            cmds.parent('L_brow_03_brow_02_follow_grp', 'R_brow_03_brow_02_follow_grp', w=True)
            cmds.parent('L_brow_03_brow_02_follow_grp', 'L_brow_03_Ctrl_grp')
            cmds.parent('R_brow_03_brow_02_follow_grp', 'R_brow_03_Ctrl_grp')
            cmds.makeIdentity('L_brow_03_brow_02_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_brow_03_brow_02_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_brow_03_ctrl', 'L_brow_03_brow_02_follow_grp')
            cmds.parent('R_brow_03_ctrl', 'R_brow_03_brow_02_follow_grp')
            cmds.group('System_L_brow_03_jnt_grp', n='System_L_brow_03_master_follow_grp')
            cmds.group('System_R_brow_03_jnt_grp', n='System_R_brow_03_master_follow_grp')
            cmds.parentConstraint('L_brow_03_ctrl', 'System_L_brow_03_jnt_grp', mo=True)
            cmds.scaleConstraint('L_brow_03_ctrl', 'System_L_brow_03_jnt_grp', mo=True)
            cmds.parentConstraint('R_brow_03_ctrl', 'System_R_brow_03_jnt_grp', mo=True)
            cmds.scaleConstraint('R_brow_03_ctrl', 'System_R_brow_03_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_brow_03_master_follow_grp', 'L_brow_03_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_brow_03_master_follow_grp', 'R_brow_03_Ctrl_grp', mo=True)
        if 'Brow 13 joint' == self.ui.BrowOption.currentText():
            self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_medial_fibers_brow_ctrl')
            cmds.group('L_medial_fibers_brow_ctrl', n='L_medial_fibers_brow_Ctrl_grp')
            cmds.pointConstraint('System_L_medial_fibers_brow_jnt', 'L_medial_fibers_brow_Ctrl_grp')
            cmds.delete('L_medial_fibers_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_medial_fibers_brow_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_medial_fibers_brow_ctrlShape3.cv[0:1]', 'L_medial_fibers_brow_ctrlShape2.cv[0:1]', 'L_medial_fibers_brow_ctrlShape1.cv[0:1]', 'L_medial_fibers_brow_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_medial_fibers_brow_ctrl')
            cmds.setAttr('L_medial_fibers_brow_Ctrl_grp.rotateY', 10)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_medial_fibers_brow_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_medial_fibers_brow_Ctrl_grp', 'R_medial_fibers_brow_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_medial_fibers_brow_ctrlShape.overrideColor', 29)
            cmds.setAttr('R_medial_fibers_brow_ctrlShape4.overrideColor', 29)
            cmds.setAttr('R_medial_fibers_brow_ctrlShape5.overrideColor', 29)
            cmds.setAttr('R_medial_fibers_brow_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_medial_fibers_brow_jnt', 'R_medial_fibers_brow_Ctrl_grp')
            cmds.delete('R_medial_fibers_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_medial_fibers_brow_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_medial_fibers_brow_jnt', n='System_L_medial_fibers_brow_jnt_grp')
            cmds.group('System_R_medial_fibers_brow_jnt', n='System_R_medial_fibers_brow_jnt_grp')
            cmds.group('System_L_medial_fibers_brow_jnt_grp', n='System_L_medial_fibers_brow_master_follow_grp')
            cmds.group('System_R_medial_fibers_brow_jnt_grp', n='System_R_medial_fibers_brow_master_follow_grp')
            cmds.group('System_L_medial_fibers_brow_jnt_grp', n='System_L_medial_fibers_brow_brow_follow_grp')
            cmds.group('System_R_medial_fibers_brow_jnt_grp', n='System_R_medial_fibers_brow_brow_follow_grp')
            cmds.parentConstraint('L_medial_fibers_brow_ctrl', 'System_L_medial_fibers_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('L_medial_fibers_brow_ctrl', 'System_L_medial_fibers_brow_jnt_grp', mo=True)
            cmds.parentConstraint('R_medial_fibers_brow_ctrl', 'System_R_medial_fibers_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('R_medial_fibers_brow_ctrl', 'System_R_medial_fibers_brow_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_medial_fibers_brow_brow_follow_grp', 'L_medial_fibers_brow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_medial_fibers_brow_brow_follow_grp', 'R_medial_fibers_brow_Ctrl_grp', mo=True)
            cmds.group('L_brow_ctrl', n='L_brow_medial_fibers_follow_grp')
            cmds.group('R_brow_ctrl', n='R_brow_medial_fibers_follow_grp')
            cmds.group(em=True, n='System_L_brow_medial_fibers_follow_grp')
            cmds.group(em=True, n='System_R_brow_medial_fibers_follow_grp')
            cmds.pointConstraint('System_L_medial_fibers_brow_jnt', 'System_L_brow_medial_fibers_follow_grp')
            cmds.pointConstraint('System_R_medial_fibers_brow_jnt', 'System_R_brow_medial_fibers_follow_grp')
            cmds.delete('System_L_brow_medial_fibers_follow_grp_pointConstraint1')
            cmds.delete('System_R_brow_medial_fibers_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_brow_medial_fibers_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_brow_medial_fibers_follow_grp', t=True, apply=True)
            cmds.addAttr('L_medial_fibers_brow_ctrl', ln='Brow_follow', at='double', min=0, max=4)
            cmds.setAttr('L_medial_fibers_brow_ctrl.Brow_follow', e=1, keyable=True)
            cmds.setAttr('L_medial_fibers_brow_ctrl.Brow_follow', 1)
            cmds.addAttr('R_medial_fibers_brow_ctrl', ln='Brow_follow', at='double', min=0, max=4)
            cmds.setAttr('R_medial_fibers_brow_ctrl.Brow_follow', e=1, keyable=True)
            cmds.setAttr('R_medial_fibers_brow_ctrl.Brow_follow', 1)
            cmds.parentConstraint('L_medial_fibers_brow_ctrl', 'System_L_brow_medial_fibers_follow_grp', mo=True)
            cmds.parentConstraint('R_medial_fibers_brow_ctrl', 'System_R_brow_medial_fibers_follow_grp', mo=True)
            self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_lateral_fibers_brow_ctrl')
            cmds.group('L_lateral_fibers_brow_ctrl', n='L_lateral_fibers_brow_Ctrl_grp')
            cmds.pointConstraint('System_L_lateral_fibers_brow_jnt', 'L_lateral_fibers_brow_Ctrl_grp')
            cmds.delete('L_lateral_fibers_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_lateral_fibers_brow_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_lateral_fibers_brow_ctrlShape3.cv[0:1]', 'L_lateral_fibers_brow_ctrlShape2.cv[0:1]', 'L_lateral_fibers_brow_ctrlShape1.cv[0:1]', 'L_lateral_fibers_brow_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_lateral_fibers_brow_ctrl')
            cmds.setAttr('L_lateral_fibers_brow_Ctrl_grp.rotateY', 10)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_lateral_fibers_brow_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_lateral_fibers_brow_Ctrl_grp', 'R_lateral_fibers_brow_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_lateral_fibers_brow_ctrlShape.overrideColor', 29)
            cmds.setAttr('R_lateral_fibers_brow_ctrlShape4.overrideColor', 29)
            cmds.setAttr('R_lateral_fibers_brow_ctrlShape5.overrideColor', 29)
            cmds.setAttr('R_lateral_fibers_brow_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_lateral_fibers_brow_jnt', 'R_lateral_fibers_brow_Ctrl_grp')
            cmds.delete('R_lateral_fibers_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_lateral_fibers_brow_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_lateral_fibers_brow_jnt', n='System_L_lateral_fibers_brow_jnt_grp')
            cmds.group('System_R_lateral_fibers_brow_jnt', n='System_R_lateral_fibers_brow_jnt_grp')
            cmds.group('System_L_lateral_fibers_brow_jnt_grp', n='System_L_lateral_fibers_brow_master_follow_grp')
            cmds.group('System_R_lateral_fibers_brow_jnt_grp', n='System_R_lateral_fibers_brow_master_follow_grp')
            cmds.group('System_L_lateral_fibers_brow_jnt_grp', n='System_L_lateral_fibers_brow_brow_02_follow_grp')
            cmds.group('System_R_lateral_fibers_brow_jnt_grp', n='System_R_lateral_fibers_brow_brow_02_follow_grp')
            cmds.parentConstraint('L_lateral_fibers_brow_ctrl', 'System_L_lateral_fibers_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('L_lateral_fibers_brow_ctrl', 'System_L_lateral_fibers_brow_jnt_grp', mo=True)
            cmds.parentConstraint('R_lateral_fibers_brow_ctrl', 'System_R_lateral_fibers_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('R_lateral_fibers_brow_ctrl', 'System_R_lateral_fibers_brow_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_lateral_fibers_brow_brow_02_follow_grp', 'L_lateral_fibers_brow_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_lateral_fibers_brow_brow_02_follow_grp', 'R_lateral_fibers_brow_Ctrl_grp', mo=True)
            cmds.group('L_lateral_fibers_brow_ctrl', n='L_lateral_fibers_brow_medial_fibers_follow_grp')
            cmds.group('R_lateral_fibers_brow_ctrl', n='R_lateral_fibers_brow_medial_fibers_follow_grp')
            cmds.group(em=True, n='System_L_lateral_fibers_brow_medial_fibers_follow_grp')
            cmds.group(em=True, n='System_R_lateral_fibers_brow_medial_fibers_follow_grp')
            cmds.pointConstraint('System_L_medial_fibers_brow_jnt', 'System_L_lateral_fibers_brow_medial_fibers_follow_grp')
            cmds.pointConstraint('System_R_medial_fibers_brow_jnt', 'System_R_lateral_fibers_brow_medial_fibers_follow_grp')
            cmds.delete('System_L_lateral_fibers_brow_medial_fibers_follow_grp_pointConstraint1')
            cmds.delete('System_R_lateral_fibers_brow_medial_fibers_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_lateral_fibers_brow_medial_fibers_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_lateral_fibers_brow_medial_fibers_follow_grp', t=True, apply=True)
            cmds.addAttr('L_medial_fibers_brow_ctrl', ln='lateral_fibers_follow', at='double', min=0, max=4)
            cmds.setAttr('L_medial_fibers_brow_ctrl.lateral_fibers_follow', e=1, keyable=True)
            cmds.setAttr('L_medial_fibers_brow_ctrl.lateral_fibers_follow', 1)
            cmds.addAttr('R_medial_fibers_brow_ctrl', ln='lateral_fibers_follow', at='double', min=0, max=4)
            cmds.setAttr('R_medial_fibers_brow_ctrl.lateral_fibers_follow', e=1, keyable=True)
            cmds.setAttr('R_medial_fibers_brow_ctrl.lateral_fibers_follow', 1)
            cmds.parentConstraint('L_medial_fibers_brow_ctrl', 'System_L_lateral_fibers_brow_medial_fibers_follow_grp', mo=True)
            cmds.parentConstraint('R_medial_fibers_brow_ctrl', 'System_R_lateral_fibers_brow_medial_fibers_follow_grp', mo=True)
            cmds.group('L_brow_02_ctrl', n='L_brow_02_lateral_fibers_follow_grp')
            cmds.group('R_brow_02_ctrl', n='R_brow_02_lateral_fibers_follow_grp')
            cmds.group(em=True, n='System_L_brow_02_lateral_fibers_follow_grp')
            cmds.group(em=True, n='System_R_brow_02_lateral_fibers_follow_grp')
            cmds.pointConstraint('System_L_lateral_fibers_brow_jnt', 'System_L_brow_02_lateral_fibers_follow_grp')
            cmds.pointConstraint('System_R_lateral_fibers_brow_jnt', 'System_R_brow_02_lateral_fibers_follow_grp')
            cmds.delete('System_L_brow_02_lateral_fibers_follow_grp_pointConstraint1')
            cmds.delete('System_R_brow_02_lateral_fibers_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_brow_02_lateral_fibers_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_brow_02_lateral_fibers_follow_grp', t=True, apply=True)
            cmds.addAttr('L_lateral_fibers_brow_ctrl', ln='Brow_02_follow', at='double', min=0, max=4)
            cmds.setAttr('L_lateral_fibers_brow_ctrl.Brow_02_follow', e=1, keyable=True)
            cmds.setAttr('L_lateral_fibers_brow_ctrl.Brow_02_follow', 1)
            cmds.addAttr('R_lateral_fibers_brow_ctrl', ln='Brow_02_follow', at='double', min=0, max=4)
            cmds.setAttr('R_lateral_fibers_brow_ctrl.Brow_02_follow', e=1, keyable=True)
            cmds.setAttr('R_lateral_fibers_brow_ctrl.Brow_02_follow', 1)
            cmds.parentConstraint('L_lateral_fibers_brow_ctrl', 'System_L_brow_02_lateral_fibers_follow_grp', mo=True)
            cmds.parentConstraint('R_lateral_fibers_brow_ctrl', 'System_R_brow_02_lateral_fibers_follow_grp', mo=True)
            cmds.group('L_brow_ctrl', n='L_brow_lateral_fibers_follow_grp')
            cmds.group('R_brow_ctrl', n='R_brow_lateral_fibers_follow_grp')
            cmds.group(em=True, n='System_L_brow_lateral_fibers_follow_grp')
            cmds.group(em=True, n='System_R_brow_lateral_fibers_follow_grp')
            cmds.pointConstraint('System_L_lateral_fibers_brow_jnt', 'System_L_brow_lateral_fibers_follow_grp')
            cmds.pointConstraint('System_R_lateral_fibers_brow_jnt', 'System_R_brow_lateral_fibers_follow_grp')
            cmds.delete('System_L_brow_lateral_fibers_follow_grp_pointConstraint1')
            cmds.delete('System_R_brow_lateral_fibers_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_brow_lateral_fibers_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_brow_lateral_fibers_follow_grp', t=True, apply=True)
            cmds.addAttr('L_lateral_fibers_brow_ctrl', ln='Brow_follow', at='double', min=0, max=4)
            cmds.setAttr('L_lateral_fibers_brow_ctrl.Brow_follow', e=1, keyable=True)
            cmds.setAttr('L_lateral_fibers_brow_ctrl.Brow_follow', 1)
            cmds.addAttr('R_lateral_fibers_brow_ctrl', ln='Brow_follow', at='double', min=0, max=4)
            cmds.setAttr('R_lateral_fibers_brow_ctrl.Brow_follow', e=1, keyable=True)
            cmds.setAttr('R_lateral_fibers_brow_ctrl.Brow_follow', 1)
            cmds.parentConstraint('L_lateral_fibers_brow_ctrl', 'System_L_brow_lateral_fibers_follow_grp', mo=True)
            cmds.parentConstraint('R_lateral_fibers_brow_ctrl', 'System_R_brow_lateral_fibers_follow_grp', mo=True)
            cmds.group('L_brow_03_ctrl', n='L_brow_03_lateral_fibers_follow_grp')
            cmds.group('R_brow_03_ctrl', n='R_brow_03_lateral_fibers_follow_grp')
            cmds.group(em=True, n='System_L_brow_03_lateral_fibers_follow_grp')
            cmds.group(em=True, n='System_R_brow_03_lateral_fibers_follow_grp')
            cmds.pointConstraint('System_L_lateral_fibers_brow_jnt', 'System_L_brow_03_lateral_fibers_follow_grp')
            cmds.pointConstraint('System_R_lateral_fibers_brow_jnt', 'System_R_brow_03_lateral_fibers_follow_grp')
            cmds.delete('System_L_brow_03_lateral_fibers_follow_grp_pointConstraint1')
            cmds.delete('System_R_brow_03_lateral_fibers_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_brow_03_lateral_fibers_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_brow_03_lateral_fibers_follow_grp', t=True, apply=True)
            cmds.addAttr('L_lateral_fibers_brow_ctrl', ln='Brow_03_follow', at='double', min=0, max=4)
            cmds.setAttr('L_lateral_fibers_brow_ctrl.Brow_03_follow', e=1, keyable=True)
            cmds.setAttr('L_lateral_fibers_brow_ctrl.Brow_03_follow', 1)
            cmds.addAttr('R_lateral_fibers_brow_ctrl', ln='Brow_03_follow', at='double', min=0, max=4)
            cmds.setAttr('R_lateral_fibers_brow_ctrl.Brow_03_follow', e=1, keyable=True)
            cmds.setAttr('R_lateral_fibers_brow_ctrl.Brow_03_follow', 1)
            cmds.parentConstraint('L_lateral_fibers_brow_ctrl', 'System_L_brow_03_lateral_fibers_follow_grp', mo=True)
            cmds.parentConstraint('R_lateral_fibers_brow_ctrl', 'System_R_brow_03_lateral_fibers_follow_grp', mo=True)
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_procerus_brow_FK_ctrl')
            cmds.group('L_procerus_brow_FK_ctrl', n='L_procerus_brow_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_procerus_brow_jnt', 'L_procerus_brow_FK_Ctrl_grp')
            cmds.delete('L_procerus_brow_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_procerus_brow_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_procerus_brow_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_procerus_brow_FK_ctrl')
            cmds.setAttr('L_procerus_brow_FK_Ctrl_grp.rotateY', 10)
            cmds.setAttr('L_procerus_brow_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_procerus_brow_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_procerus_brow_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_procerus_brow_FK_Ctrl_grp', 'R_procerus_brow_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_procerus_brow_FK_ctrlShape.overrideColor', 16)
            cmds.pointConstraint('System_R_procerus_brow_jnt', 'R_procerus_brow_FK_Ctrl_grp')
            cmds.delete('R_procerus_brow_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_procerus_brow_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_procerus_brow_jnt', n='System_L_procerus_brow_jnt_grp')
            cmds.group('System_R_procerus_brow_jnt', n='System_R_procerus_brow_jnt_grp')
            cmds.group('System_L_procerus_brow_jnt_grp', n='System_L_procerus_brow_master_follow_grp')
            cmds.group('System_R_procerus_brow_jnt_grp', n='System_R_procerus_brow_master_follow_grp')
            cmds.parentConstraint('L_procerus_brow_FK_ctrl', 'System_L_procerus_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('L_procerus_brow_FK_ctrl', 'System_L_procerus_brow_jnt_grp', mo=True)
            cmds.parentConstraint('R_procerus_brow_FK_ctrl', 'System_R_procerus_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('R_procerus_brow_FK_ctrl', 'System_R_procerus_brow_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_procerus_brow_master_follow_grp', 'L_procerus_brow_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_procerus_brow_master_follow_grp', 'R_procerus_brow_FK_Ctrl_grp', mo=True)
            cmds.group('L_procerus_brow_FK_ctrl', n='L_procerus_brow_medial_fibers_follow_grp')
            cmds.group('R_procerus_brow_FK_ctrl', n='R_procerus_brow_medial_fibers_follow_grp')
            cmds.group(em=True, n='System_L_procerus_brow_medial_fibers_follow_grp')
            cmds.group(em=True, n='System_R_procerus_brow_medial_fibers_follow_grp')
            cmds.pointConstraint('System_L_procerus_brow_jnt', 'System_L_procerus_brow_medial_fibers_follow_grp')
            cmds.pointConstraint('System_R_procerus_brow_jnt', 'System_R_procerus_brow_medial_fibers_follow_grp')
            cmds.delete('System_L_procerus_brow_medial_fibers_follow_grp_pointConstraint1')
            cmds.delete('System_R_procerus_brow_medial_fibers_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_procerus_brow_medial_fibers_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_procerus_brow_medial_fibers_follow_grp', t=True, apply=True)
            cmds.addAttr('L_medial_fibers_brow_ctrl', ln='procerus_follow', at='double', min=0, max=4)
            cmds.setAttr('L_medial_fibers_brow_ctrl.procerus_follow', e=1, keyable=True)
            cmds.setAttr('L_medial_fibers_brow_ctrl.procerus_follow', 1)
            cmds.addAttr('R_medial_fibers_brow_ctrl', ln='procerus_follow', at='double', min=0, max=4)
            cmds.setAttr('R_medial_fibers_brow_ctrl.procerus_follow', e=1, keyable=True)
            cmds.setAttr('R_medial_fibers_brow_ctrl.procerus_follow', 1)
            cmds.parentConstraint('L_medial_fibers_brow_ctrl', 'System_L_procerus_brow_medial_fibers_follow_grp', mo=True)
            cmds.parentConstraint('R_medial_fibers_brow_ctrl', 'System_R_procerus_brow_medial_fibers_follow_grp', mo=True)
            cmds.addAttr('L_brow_ctrl', ln='medial_fibers_follow', at='double', min=0, max=10)
            cmds.setAttr('L_brow_ctrl.medial_fibers_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_ctrl.medial_fibers_follow', 1)
            cmds.addAttr('R_brow_ctrl', ln='medial_fibers_follow', at='double', min=0, max=10)
            cmds.setAttr('R_brow_ctrl.medial_fibers_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_ctrl.medial_fibers_follow', 1)
            cmds.addAttr('L_brow_02_ctrl', ln='lateral_fibers_follow', at='double', min=0, max=10)
            cmds.setAttr('L_brow_02_ctrl.lateral_fibers_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_02_ctrl.lateral_fibers_follow', 1)
            cmds.addAttr('R_brow_02_ctrl', ln='lateral_fibers_follow', at='double', min=0, max=10)
            cmds.setAttr('R_brow_02_ctrl.lateral_fibers_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_02_ctrl.lateral_fibers_follow', 1)
            cmds.expression(
                s='\n//Brow medial_fibers Follow\n' + '\nif((System_L_brow_medial_fibers_follow_grp.translateX<0)){' + '\nL_brow_medial_fibers_follow_grp.translateX = (System_L_brow_medial_fibers_follow_grp.translateX/1.2)*(L_medial_fibers_brow_ctrl.Brow_follow);}' + '\nelse{L_brow_medial_fibers_follow_grp.translateX = (System_L_brow_medial_fibers_follow_grp.translateX/6)*(L_medial_fibers_brow_ctrl.Brow_follow);}' + '\nif((System_L_brow_medial_fibers_follow_grp.translateY>0)){' + '\nL_brow_medial_fibers_follow_grp.translateY = System_L_brow_medial_fibers_follow_grp.translateY/1.5*(L_medial_fibers_brow_ctrl.Brow_follow);}' + '\nelse{L_brow_medial_fibers_follow_grp.translateY = System_L_brow_medial_fibers_follow_grp.translateY/3*(L_medial_fibers_brow_ctrl.Brow_follow);}' + '\nL_brow_medial_fibers_follow_grp.translateZ = System_L_brow_medial_fibers_follow_grp.translateZ/2*(L_medial_fibers_brow_ctrl.Brow_follow);' + '\nif((System_R_brow_medial_fibers_follow_grp.translateX>0)){' + '\nR_brow_medial_fibers_follow_grp.translateX = -(System_R_brow_medial_fibers_follow_grp.translateX/1.2)*(R_medial_fibers_brow_ctrl.Brow_follow);}' + '\nelse{R_brow_medial_fibers_follow_grp.translateX = -(System_R_brow_medial_fibers_follow_grp.translateX/6)*(R_medial_fibers_brow_ctrl.Brow_follow);}' + '\nif((System_R_brow_medial_fibers_follow_grp.translateY>0)){' + '\nR_brow_medial_fibers_follow_grp.translateY = System_R_brow_medial_fibers_follow_grp.translateY/1.5*(R_medial_fibers_brow_ctrl.Brow_follow);}' + '\nelse{R_brow_medial_fibers_follow_grp.translateY = System_R_brow_medial_fibers_follow_grp.translateY/3*(R_medial_fibers_brow_ctrl.Brow_follow);}' + '\nR_brow_medial_fibers_follow_grp.translateZ = System_R_brow_medial_fibers_follow_grp.translateZ/2*(R_medial_fibers_brow_ctrl.Brow_follow);' + '\n//lateral_fibers Follow\n' + '\nif((System_L_lateral_fibers_brow_medial_fibers_follow_grp.translateX<0)){' + '\nL_lateral_fibers_brow_medial_fibers_follow_grp.translateX = (System_L_lateral_fibers_brow_medial_fibers_follow_grp.translateX/1.2)*(L_medial_fibers_brow_ctrl.lateral_fibers_follow);}' + '\nelse{L_lateral_fibers_brow_medial_fibers_follow_grp.translateX = (System_L_lateral_fibers_brow_medial_fibers_follow_grp.translateX/6)*(L_medial_fibers_brow_ctrl.lateral_fibers_follow);}' + '\nL_lateral_fibers_brow_medial_fibers_follow_grp.translateY = System_L_lateral_fibers_brow_medial_fibers_follow_grp.translateY/1.5*(L_medial_fibers_brow_ctrl.lateral_fibers_follow);' + '\nL_lateral_fibers_brow_medial_fibers_follow_grp.translateZ = (System_L_lateral_fibers_brow_medial_fibers_follow_grp.translateZ/3)*(L_medial_fibers_brow_ctrl.lateral_fibers_follow);' + '\nif((System_R_lateral_fibers_brow_medial_fibers_follow_grp.translateX>0)){' + '\nR_lateral_fibers_brow_medial_fibers_follow_grp.translateX = -(System_R_lateral_fibers_brow_medial_fibers_follow_grp.translateX/1.2)*(R_medial_fibers_brow_ctrl.lateral_fibers_follow);}' + '\nelse{R_lateral_fibers_brow_medial_fibers_follow_grp.translateX = -(System_R_lateral_fibers_brow_medial_fibers_follow_grp.translateX/6)*(R_medial_fibers_brow_ctrl.lateral_fibers_follow);}' + '\nR_lateral_fibers_brow_medial_fibers_follow_grp.translateY = System_R_lateral_fibers_brow_medial_fibers_follow_grp.translateY/1.5*(R_medial_fibers_brow_ctrl.lateral_fibers_follow);' + '\nR_lateral_fibers_brow_medial_fibers_follow_grp.translateZ = (System_R_lateral_fibers_brow_medial_fibers_follow_grp.translateZ/3)*(R_medial_fibers_brow_ctrl.lateral_fibers_follow);' + '\n//procerus Follow\n' + '\nL_procerus_brow_medial_fibers_follow_grp.translateX = System_L_procerus_brow_medial_fibers_follow_grp.translateX/5*(L_medial_fibers_brow_ctrl.procerus_follow);' + '\nif((System_L_procerus_brow_medial_fibers_follow_grp.translateY<0)){' + '\nL_procerus_brow_medial_fibers_follow_grp.translateY = System_L_procerus_brow_medial_fibers_follow_grp.translateY*(L_medial_fibers_brow_ctrl.procerus_follow);}' + '\nelse{L_procerus_brow_medial_fibers_follow_grp.translateY = System_L_procerus_brow_medial_fibers_follow_grp.translateY/10*(L_medial_fibers_brow_ctrl.procerus_follow);}' + '\nL_procerus_brow_medial_fibers_follow_grp.translateZ = System_L_procerus_brow_medial_fibers_follow_grp.translateZ/1.5*(L_medial_fibers_brow_ctrl.procerus_follow);' + '\nR_procerus_brow_medial_fibers_follow_grp.translateX = -System_R_procerus_brow_medial_fibers_follow_grp.translateX/5*(R_medial_fibers_brow_ctrl.procerus_follow);' + '\nif((System_R_procerus_brow_medial_fibers_follow_grp.translateY<0)){' + '\nR_procerus_brow_medial_fibers_follow_grp.translateY = System_R_procerus_brow_medial_fibers_follow_grp.translateY*(R_medial_fibers_brow_ctrl.procerus_follow);}' + '\nelse{R_procerus_brow_medial_fibers_follow_grp.translateY = System_R_procerus_brow_medial_fibers_follow_grp.translateY/10*(R_medial_fibers_brow_ctrl.procerus_follow);}' + '\nR_procerus_brow_medial_fibers_follow_grp.translateZ = System_R_procerus_brow_medial_fibers_follow_grp.translateZ/1.5*(R_medial_fibers_brow_ctrl.procerus_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_Fibers_expression')
            cmds.expression(
                s='\n//Brow_02 lateral_fibers Follow\n' + '\nL_brow_02_lateral_fibers_follow_grp.translateX = System_L_brow_02_lateral_fibers_follow_grp.translateX/5*(L_lateral_fibers_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_lateral_fibers_follow_grp.translateY = System_L_brow_02_lateral_fibers_follow_grp.translateY/1.5*(L_lateral_fibers_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_lateral_fibers_follow_grp.translateZ = System_L_brow_02_lateral_fibers_follow_grp.translateZ/2*(L_lateral_fibers_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_lateral_fibers_follow_grp.translateX = -System_R_brow_02_lateral_fibers_follow_grp.translateX/5*(R_lateral_fibers_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_lateral_fibers_follow_grp.translateY = System_R_brow_02_lateral_fibers_follow_grp.translateY/1.5*(R_lateral_fibers_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_lateral_fibers_follow_grp.translateZ = System_R_brow_02_lateral_fibers_follow_grp.translateZ/2*(R_lateral_fibers_brow_ctrl.Brow_02_follow);' + '\n//Brow lateral_fibers Follow\n' + '\nL_brow_lateral_fibers_follow_grp.translateX = System_L_brow_lateral_fibers_follow_grp.translateX/6*(L_lateral_fibers_brow_ctrl.Brow_follow);' + '\nL_brow_lateral_fibers_follow_grp.translateY = System_L_brow_lateral_fibers_follow_grp.translateY/6*(L_lateral_fibers_brow_ctrl.Brow_follow);' + '\nL_brow_lateral_fibers_follow_grp.translateZ = System_L_brow_lateral_fibers_follow_grp.translateZ/6*(L_lateral_fibers_brow_ctrl.Brow_follow);' + '\nR_brow_lateral_fibers_follow_grp.translateX = -System_R_brow_lateral_fibers_follow_grp.translateX/6*(R_lateral_fibers_brow_ctrl.Brow_follow);' + '\nR_brow_lateral_fibers_follow_grp.translateY = System_R_brow_lateral_fibers_follow_grp.translateY/6*(R_lateral_fibers_brow_ctrl.Brow_follow);' + '\nR_brow_lateral_fibers_follow_grp.translateZ = System_R_brow_lateral_fibers_follow_grp.translateZ/6*(R_lateral_fibers_brow_ctrl.Brow_follow);' + '\n//Brow_03 lateral_fibers Follow\n' + '\nL_brow_03_lateral_fibers_follow_grp.translateX = System_L_brow_03_lateral_fibers_follow_grp.translateX/10*(L_lateral_fibers_brow_ctrl.Brow_03_follow);' + '\nL_brow_03_lateral_fibers_follow_grp.translateY = System_L_brow_03_lateral_fibers_follow_grp.translateY/10*(L_lateral_fibers_brow_ctrl.Brow_03_follow);' + '\nL_brow_03_lateral_fibers_follow_grp.translateZ = System_L_brow_03_lateral_fibers_follow_grp.translateZ/10*(L_lateral_fibers_brow_ctrl.Brow_03_follow);' + '\nR_brow_03_lateral_fibers_follow_grp.translateX = -System_R_brow_03_lateral_fibers_follow_grp.translateX/10*(R_lateral_fibers_brow_ctrl.Brow_03_follow);' + '\nR_brow_03_lateral_fibers_follow_grp.translateY = System_R_brow_03_lateral_fibers_follow_grp.translateY/10*(R_lateral_fibers_brow_ctrl.Brow_03_follow);' + '\nR_brow_03_lateral_fibers_follow_grp.translateZ = System_R_brow_03_lateral_fibers_follow_grp.translateZ/10*(R_lateral_fibers_brow_ctrl.Brow_03_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_02_Fibers_expression')
            cmds.expression(
                s='\n//medial_fibers brow Follow\n' + '\nSystem_L_medial_fibers_brow_brow_follow_grp.translateX = L_brow_ctrl.translateX/1.3*(L_brow_ctrl.medial_fibers_follow);' + '\nSystem_L_medial_fibers_brow_brow_follow_grp.translateY = L_brow_ctrl.translateY/1.3*(L_brow_ctrl.medial_fibers_follow);' + '\nSystem_L_medial_fibers_brow_brow_follow_grp.translateZ = L_brow_ctrl.translateZ/2*(L_brow_ctrl.medial_fibers_follow);' + '\nSystem_R_medial_fibers_brow_brow_follow_grp.translateX = -R_brow_ctrl.translateX/1.3*(R_brow_ctrl.medial_fibers_follow);' + '\nSystem_R_medial_fibers_brow_brow_follow_grp.translateY = R_brow_ctrl.translateY/1.3*(R_brow_ctrl.medial_fibers_follow);' + '\nSystem_R_medial_fibers_brow_brow_follow_grp.translateZ = R_brow_ctrl.translateZ/2*(R_brow_ctrl.medial_fibers_follow);' + '\n//lateral_fibers brow Follow\n' + '\nSystem_L_lateral_fibers_brow_brow_02_follow_grp.translateX = L_brow_02_ctrl.translateX/1.3*(L_brow_02_ctrl.lateral_fibers_follow);' + '\nSystem_L_lateral_fibers_brow_brow_02_follow_grp.translateY = L_brow_02_ctrl.translateY/1.3*(L_brow_02_ctrl.lateral_fibers_follow);' + '\nSystem_L_lateral_fibers_brow_brow_02_follow_grp.translateZ = L_brow_02_ctrl.translateZ/2*(L_brow_02_ctrl.lateral_fibers_follow);' + '\nSystem_R_lateral_fibers_brow_brow_02_follow_grp.translateX = -R_brow_02_ctrl.translateX/1.3*(R_brow_02_ctrl.lateral_fibers_follow);' + '\nSystem_R_lateral_fibers_brow_brow_02_follow_grp.translateY = R_brow_02_ctrl.translateY/1.3*(R_brow_02_ctrl.lateral_fibers_follow);' + '\nSystem_R_lateral_fibers_brow_brow_02_follow_grp.translateZ = R_brow_02_ctrl.translateZ/2*(R_brow_02_ctrl.lateral_fibers_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_Fibers_brow_follow_expression')
        if 'Brow 04 joint' != self.ui.BrowOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'Center_brow_ctrl')
            cmds.group('Center_brow_ctrl', n='Center_brow_Ctrl_grp')
            cmds.pointConstraint('System_center_brow_jnt', 'Center_brow_Ctrl_grp')
            cmds.delete('Center_brow_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('Center_brow_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('Center_brow_ctrlShape3.cv[0:1]', 'Center_brow_ctrlShape2.cv[0:1]', 'Center_brow_ctrlShape1.cv[0:1]', 'Center_brow_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('Center_brow_ctrl')
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.setAttr('Center_brow_ctrlShape.overrideColor', 13)
            cmds.setAttr('Center_brow_ctrlShape1.overrideColor', 13)
            cmds.setAttr('Center_brow_ctrlShape2.overrideColor', 13)
            cmds.setAttr('Center_brow_ctrlShape3.overrideColor', 13)
        if 'Brow 01 joint' == self.ui.BrowOption.currentText():
            cmds.setAttr('Center_brow_ctrlShape.overrideColor', 17)
            cmds.setAttr('Center_brow_ctrlShape1.overrideColor', 17)
            cmds.setAttr('Center_brow_ctrlShape2.overrideColor', 17)
            cmds.setAttr('Center_brow_ctrlShape3.overrideColor', 17)
        if 'Brow 04 joint' != self.ui.BrowOption.currentText():
            cmds.group('System_center_brow_jnt', n='System_center_brow_jnt_grp')
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.group('System_center_brow_jnt', n='center_brow_L_brow_follow_grp')
            cmds.group('System_center_brow_jnt', n='center_brow_R_brow_follow_grp')
            cmds.parent('System_center_brow_jnt', 'System_center_brow_jnt_grp')
            cmds.parent('center_brow_L_brow_follow_grp', w=True)
            cmds.parent('center_brow_L_brow_follow_grp', 'Center_brow_Ctrl_grp')
            cmds.makeIdentity('center_brow_L_brow_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('Center_brow_ctrl', 'center_brow_R_brow_follow_grp')
            cmds.group('System_center_brow_jnt', n='System_center_brow_L_brow_follow_grp')
            cmds.group('System_center_brow_jnt', n='System_center_brow_R_brow_follow_grp')
            cmds.parent('System_center_brow_jnt', 'System_center_brow_jnt_grp')
            cmds.group('System_center_brow_jnt_grp', n='System_center_brow_master_follow_grp')
        if 'Brow 04 joint' != self.ui.BrowOption.currentText():
            cmds.parentConstraint('Center_brow_ctrl', 'System_center_brow_jnt_grp', mo=True)
            cmds.scaleConstraint('Center_brow_ctrl', 'System_center_brow_jnt_grp', mo=True)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.parent('System_center_brow_L_brow_follow_grp', 'Center_brow_Ctrl_grp')
            cmds.parent('System_center_brow_R_brow_follow_grp', 'Center_brow_Ctrl_grp')
            cmds.pointConstraint('L_brow_ctrl', 'System_center_brow_L_brow_follow_grp', mo=True)
            cmds.pointConstraint('R_brow_ctrl', 'System_center_brow_R_brow_follow_grp', mo=True)
            cmds.parentConstraint('System_center_brow_master_follow_grp', 'Center_brow_Ctrl_grp', mo=True)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.addAttr('L_brow_02_ctrl', ln='Brow_follow', at='double', min=0, max=10)
            cmds.setAttr('L_brow_02_ctrl.Brow_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_02_ctrl.Brow_follow', 1)
            cmds.addAttr('R_brow_02_ctrl', ln='Brow_follow', at='double', min=0, max=10)
            cmds.setAttr('R_brow_02_ctrl.Brow_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_02_ctrl.Brow_follow', 1)
            if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.addAttr('L_brow_02_ctrl', ln='Brow_03_follow', at='double', min=0, max=10)
                cmds.setAttr('L_brow_02_ctrl.Brow_03_follow', e=1, keyable=True)
                cmds.setAttr('L_brow_02_ctrl.Brow_03_follow', 1)
                cmds.addAttr('R_brow_02_ctrl', ln='Brow_03_follow', at='double', min=0, max=10)
                cmds.setAttr('R_brow_02_ctrl.Brow_03_follow', e=1, keyable=True)
                cmds.setAttr('R_brow_02_ctrl.Brow_03_follow', 1)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.expression(
                s='\n//Brow Follow\n' + '\nL_brow_brow_02_follow_grp.translateX = L_brow_02_ctrl.translateX/8*(L_brow_02_ctrl.Brow_follow);' + '\nL_brow_brow_02_follow_grp.translateY = L_brow_02_ctrl.translateY/8*(L_brow_02_ctrl.Brow_follow);' + '\nL_brow_brow_02_follow_grp.translateZ = L_brow_02_ctrl.translateZ/8*(L_brow_02_ctrl.Brow_follow);\n' + '\nR_brow_brow_02_follow_grp.translateX = R_brow_02_ctrl.translateX/8*(R_brow_02_ctrl.Brow_follow);' + '\nR_brow_brow_02_follow_grp.translateY = R_brow_02_ctrl.translateY/8*(R_brow_02_ctrl.Brow_follow);' + '\nR_brow_brow_02_follow_grp.translateZ = R_brow_02_ctrl.translateZ/8*(R_brow_02_ctrl.Brow_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_expression')
        if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.expression(
                s='\n//Brow Follow\n' + '\nL_brow_brow_02_follow_grp.translateX = L_brow_02_ctrl.translateX/8*(L_brow_02_ctrl.Brow_follow);' + '\nL_brow_brow_02_follow_grp.translateY = L_brow_02_ctrl.translateY/8*(L_brow_02_ctrl.Brow_follow);' + '\nL_brow_brow_02_follow_grp.translateZ = L_brow_02_ctrl.translateZ/8*(L_brow_02_ctrl.Brow_follow);\n' + '\nR_brow_brow_02_follow_grp.translateX = R_brow_02_ctrl.translateX/8*(R_brow_02_ctrl.Brow_follow);' + '\nR_brow_brow_02_follow_grp.translateY = R_brow_02_ctrl.translateY/8*(R_brow_02_ctrl.Brow_follow);' + '\nR_brow_brow_02_follow_grp.translateZ = R_brow_02_ctrl.translateZ/8*(R_brow_02_ctrl.Brow_follow);\n' + '\n//Brow_03 Follow\n' + '\nL_brow_03_brow_02_follow_grp.translateX = L_brow_02_ctrl.translateX/12*(L_brow_02_ctrl.Brow_03_follow);' + '\nL_brow_03_brow_02_follow_grp.translateY = L_brow_02_ctrl.translateY/12*(L_brow_02_ctrl.Brow_03_follow);' + '\nL_brow_03_brow_02_follow_grp.translateZ = L_brow_02_ctrl.translateZ/12*(L_brow_02_ctrl.Brow_03_follow);\n' + '\nR_brow_03_brow_02_follow_grp.translateX = R_brow_02_ctrl.translateX/12*(R_brow_02_ctrl.Brow_03_follow);' + '\nR_brow_03_brow_02_follow_grp.translateY = R_brow_02_ctrl.translateY/12*(R_brow_02_ctrl.Brow_03_follow);' + '\nR_brow_03_brow_02_follow_grp.translateZ = R_brow_02_ctrl.translateZ/12*(R_brow_02_ctrl.Brow_03_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_expression')
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale, n='L_brow_master_ctrl')
            cmds.group('L_brow_master_ctrl', n='L_brow_master_Ctrl_grp')
            cmds.pointConstraint('System_L_brow_jnt', 'L_brow_master_Ctrl_grp')
            cmds.delete('L_brow_master_Ctrl_grp_pointConstraint1')
            cmds.setAttr('L_brow_master_Ctrl_grp.scaleX', 1.86)
            cmds.setAttr('L_brow_master_Ctrl_grp.scaleY', 0.6)
            cmds.makeIdentity('L_brow_master_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_brow_master_ctrl.cv[0:7]', r=True)
            cmds.move(-0.6 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_brow_master_ctrl.cv[2]', 'L_brow_master_ctrl.cv[4]', r=True)
            cmds.move(0.6 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_brow_master_ctrl.cv[0]', 'L_brow_master_ctrl.cv[6]', r=True)
            cmds.select(clear=True)
            cmds.select('L_brow_master_ctrl')
            cmds.setAttr('L_brow_master_Ctrl_grp.rotateY', 22)
        if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale, n='L_brow_master_ctrl')
            cmds.group('L_brow_master_ctrl', n='L_brow_master_Ctrl_grp')
            cmds.pointConstraint('System_L_brow_02_jnt', 'L_brow_master_Ctrl_grp')
            cmds.delete('L_brow_master_Ctrl_grp_pointConstraint1')
            cmds.setAttr('L_brow_master_Ctrl_grp.scaleX', 2.5)
            cmds.setAttr('L_brow_master_Ctrl_grp.scaleY', 0.8)
            cmds.makeIdentity('L_brow_master_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 1 * self.ctrl_scale, 'L_brow_master_ctrl.cv[0:7]', r=True)
            cmds.move(-0.6 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_brow_master_ctrl.cv[2]', 'L_brow_master_ctrl.cv[4]', r=True)
            cmds.move(0.6 * self.ctrl_scale, 0 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_brow_master_ctrl.cv[0]', 'L_brow_master_ctrl.cv[6]', r=True)
            cmds.select(clear=True)
            cmds.select('L_brow_master_ctrl')
            cmds.setAttr('L_brow_master_Ctrl_grp.rotateY', 30)
            cmds.move(-1 * self.ctrl_scale, 0 * self.ctrl_scale, -0.5 * self.ctrl_scale, 'L_brow_master_ctrl.cv[2:4]', r=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, -1.2 * self.ctrl_scale, 'L_brow_master_ctrl.cv[0]', 'L_brow_master_ctrl.cv[6:7]', r=True)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.setAttr('L_brow_master_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_brow_master_ctrlShape.overrideColor', 31)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_brow_master_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_brow_master_Ctrl_grp', 'R_brow_master_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.pointConstraint('System_R_brow_jnt', 'R_brow_master_Ctrl_grp')
            cmds.delete('R_brow_master_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_brow_master_Ctrl_grp', apply=True, t=True)
        if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.pointConstraint('System_R_brow_02_jnt', 'R_brow_master_Ctrl_grp')
            cmds.delete('R_brow_master_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_brow_master_Ctrl_grp', apply=True, t=True)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            A = cmds.getAttr('System_L_brow_02_jnt.translateX')
            B = cmds.getAttr('System_L_brow_jnt.translateX')
            cmds.setAttr('L_brow_master_Ctrl_grp.translateX', (A - B) / 2)
            cmds.makeIdentity('L_brow_master_Ctrl_grp', apply=True, t=True)
            A = cmds.getAttr('System_R_brow_02_jnt.translateX')
            B = cmds.getAttr('System_R_brow_jnt.translateX')
            cmds.setAttr('R_brow_master_Ctrl_grp.translateX', (A - B) / 2)
            cmds.makeIdentity('R_brow_master_Ctrl_grp', apply=True, t=True)
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.parentConstraint('L_brow_master_ctrl', 'System_L_brow_master_follow_grp', mo=True)
            cmds.parentConstraint('R_brow_master_ctrl', 'System_R_brow_master_follow_grp', mo=True)
            cmds.group('System_L_brow_02_jnt', n='L_brow_02_master_follow_grp')
            cmds.parent('System_L_brow_02_jnt', 'System_L_brow_02_jnt_grp')
            cmds.group('System_R_brow_02_jnt', n='R_brow_02_master_follow_grp')
            cmds.parent('System_R_brow_02_jnt', 'System_R_brow_02_jnt_grp')
            cmds.parent('L_brow_02_master_follow_grp', 'L_brow_master_Ctrl_grp')
            cmds.parent('R_brow_02_master_follow_grp', 'R_brow_master_Ctrl_grp')
            cmds.makeIdentity('L_brow_02_master_follow_grp', 'R_brow_02_master_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('L_brow_master_ctrl', 'L_brow_02_master_follow_grp', mo=True)
            cmds.parentConstraint('R_brow_master_ctrl', 'R_brow_02_master_follow_grp', mo=True)
            if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.group('System_L_brow_03_jnt', n='L_brow_03_master_follow_grp')
                cmds.parent('System_L_brow_03_jnt', 'System_L_brow_03_jnt_grp')
                cmds.group('System_R_brow_03_jnt', n='R_brow_03_master_follow_grp')
                cmds.parent('System_R_brow_03_jnt', 'System_R_brow_03_jnt_grp')
                cmds.parent('L_brow_03_master_follow_grp', 'L_brow_master_Ctrl_grp')
                cmds.parent('R_brow_03_master_follow_grp', 'R_brow_master_Ctrl_grp')
                cmds.makeIdentity('L_brow_03_master_follow_grp', 'R_brow_03_master_follow_grp', apply=True, t=True, r=True, scale=True)
                cmds.parentConstraint('L_brow_master_ctrl', 'L_brow_03_master_follow_grp', mo=True)
                cmds.parentConstraint('R_brow_master_ctrl', 'R_brow_03_master_follow_grp', mo=True)
            cmds.parentConstraint('L_brow_master_ctrl', 'L_brow_02_master_follow_grp', mo=True)
            cmds.parentConstraint('R_brow_master_ctrl', 'R_brow_02_master_follow_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'L_brow_master_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'R_brow_master_Ctrl_grp', mo=True)
            cmds.addAttr('L_brow_ctrl', ln='Brow_02_follow', at='double', min=0, max=10)
            cmds.setAttr('L_brow_ctrl.Brow_02_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_ctrl.Brow_02_follow', 1)
            cmds.addAttr('R_brow_ctrl', ln='Brow_02_follow', at='double', min=0, max=10)
            cmds.setAttr('R_brow_ctrl.Brow_02_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_ctrl.Brow_02_follow', 1)
            if 'Brow 04 joint' != self.ui.BrowOption.currentText():
                cmds.addAttr('L_brow_ctrl', ln='Center_Brow_follow', at='double', min=0, max=10)
                cmds.setAttr('L_brow_ctrl.Center_Brow_follow', e=1, keyable=True)
                cmds.setAttr('L_brow_ctrl.Center_Brow_follow', 1)
                cmds.addAttr('R_brow_ctrl', ln='Center_Brow_follow', at='double', min=0, max=10)
                cmds.setAttr('R_brow_ctrl.Center_Brow_follow', e=1, keyable=True)
                cmds.setAttr('R_brow_ctrl.Center_Brow_follow', 1)
            cmds.addAttr('L_brow_master_ctrl', ln='Brow_02_follow', at='double', min=0, max=10)
            cmds.setAttr('L_brow_master_ctrl.Brow_02_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_master_ctrl.Brow_02_follow', 1)
            cmds.addAttr('R_brow_master_ctrl', ln='Brow_02_follow', at='double', min=0, max=10)
            cmds.setAttr('R_brow_master_ctrl.Brow_02_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_master_ctrl.Brow_02_follow', 1)
            if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.addAttr('L_brow_master_ctrl', ln='Brow_03_follow', at='double', min=0, max=10)
                cmds.setAttr('L_brow_master_ctrl.Brow_03_follow', e=1, keyable=True)
                cmds.setAttr('L_brow_master_ctrl.Brow_03_follow', 1)
                cmds.addAttr('R_brow_master_ctrl', ln='Brow_03_follow', at='double', min=0, max=10)
                cmds.setAttr('R_brow_master_ctrl.Brow_03_follow', e=1, keyable=True)
                cmds.setAttr('R_brow_master_ctrl.Brow_03_follow', 1)
        if 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.expression(
                s='\n//Brow_02 Follow\n' + '\nL_brow_02_brow_follow_grp.translateX = L_brow_ctrl.translateX/8*(L_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_brow_follow_grp.translateY = L_brow_ctrl.translateY/8*(L_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_brow_follow_grp.translateZ = L_brow_ctrl.translateZ/8*(L_brow_ctrl.Brow_02_follow);\n' + '\nR_brow_02_brow_follow_grp.translateX = R_brow_ctrl.translateX/8*(R_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_brow_follow_grp.translateY = R_brow_ctrl.translateY/8*(R_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_brow_follow_grp.translateZ = R_brow_ctrl.translateZ/8*(R_brow_ctrl.Brow_02_follow);\n' + '\n//Brow_02_Master Follow\n' + '\nSystem_L_brow_02_master_follow_grp.translateX = L_brow_02_master_follow_grp.translateX/1.2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.translateY = L_brow_02_master_follow_grp.translateY/1.2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.translateZ = L_brow_02_master_follow_grp.translateZ/1.2*(L_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_L_brow_02_master_follow_grp.rotateX = L_brow_02_master_follow_grp.rotateX/2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.rotateY = L_brow_02_master_follow_grp.rotateY/2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.rotateZ = L_brow_02_master_follow_grp.rotateZ/2*(L_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_R_brow_02_master_follow_grp.translateX = -R_brow_02_master_follow_grp.translateX/1.2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.translateY = R_brow_02_master_follow_grp.translateY/1.2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.translateZ = R_brow_02_master_follow_grp.translateZ/1.2*(R_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_R_brow_02_master_follow_grp.rotateX = R_brow_02_master_follow_grp.rotateX/2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.rotateY = -R_brow_02_master_follow_grp.rotateY/2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.rotateZ = -R_brow_02_master_follow_grp.rotateZ/2*(R_brow_master_ctrl.Brow_02_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_02_Master_expression')
        if 'Brow 05 joint' == self.ui.BrowOption.currentText():
            cmds.expression(
                s='\n//Brow_02_Center Follow\n' + '\nL_brow_02_brow_follow_grp.translateX = L_brow_ctrl.translateX/8*(L_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_brow_follow_grp.translateY = L_brow_ctrl.translateY/8*(L_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_brow_follow_grp.translateZ = L_brow_ctrl.translateZ/8*(L_brow_ctrl.Brow_02_follow);\n' + '\nR_brow_02_brow_follow_grp.translateX = R_brow_ctrl.translateX/8*(R_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_brow_follow_grp.translateY = R_brow_ctrl.translateY/8*(R_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_brow_follow_grp.translateZ = R_brow_ctrl.translateZ/8*(R_brow_ctrl.Brow_02_follow);\n' + '\ncenter_brow_L_brow_follow_grp.translateX = System_center_brow_L_brow_follow_grp.translateX/6*(L_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_L_brow_follow_grp.translateY = System_center_brow_L_brow_follow_grp.translateY/3*(L_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_L_brow_follow_grp.translateZ = System_center_brow_L_brow_follow_grp.translateZ/6*(L_brow_ctrl.Center_Brow_follow);\n\ncenter_brow_R_brow_follow_grp.translateX = System_center_brow_R_brow_follow_grp.translateX/6*(R_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_R_brow_follow_grp.translateY = System_center_brow_R_brow_follow_grp.translateY/3*(R_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_R_brow_follow_grp.translateZ = System_center_brow_R_brow_follow_grp.translateZ/6*(R_brow_ctrl.Center_Brow_follow);\n' + '\n//Brow_02_Master Follow\n' + '\nSystem_L_brow_02_master_follow_grp.translateX = L_brow_02_master_follow_grp.translateX/1.2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.translateY = L_brow_02_master_follow_grp.translateY/1.2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.translateZ = L_brow_02_master_follow_grp.translateZ/1.2*(L_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_L_brow_02_master_follow_grp.rotateX = L_brow_02_master_follow_grp.rotateX/2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.rotateY = L_brow_02_master_follow_grp.rotateY/2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.rotateZ = L_brow_02_master_follow_grp.rotateZ/2*(L_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_R_brow_02_master_follow_grp.translateX = -R_brow_02_master_follow_grp.translateX/1.2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.translateY = R_brow_02_master_follow_grp.translateY/1.2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.translateZ = R_brow_02_master_follow_grp.translateZ/1.2*(R_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_R_brow_02_master_follow_grp.rotateX = R_brow_02_master_follow_grp.rotateX/2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.rotateY = -R_brow_02_master_follow_grp.rotateY/2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.rotateZ = -R_brow_02_master_follow_grp.rotateZ/2*(R_brow_master_ctrl.Brow_02_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_02_Center_expression')
        if 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.expression(
                s='\n//Brow_02_Center Follow\n' + '\nL_brow_02_brow_follow_grp.translateX = L_brow_ctrl.translateX/8*(L_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_brow_follow_grp.translateY = L_brow_ctrl.translateY/8*(L_brow_ctrl.Brow_02_follow);' + '\nL_brow_02_brow_follow_grp.translateZ = L_brow_ctrl.translateZ/8*(L_brow_ctrl.Brow_02_follow);\n' + '\nR_brow_02_brow_follow_grp.translateX = R_brow_ctrl.translateX/8*(R_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_brow_follow_grp.translateY = R_brow_ctrl.translateY/8*(R_brow_ctrl.Brow_02_follow);' + '\nR_brow_02_brow_follow_grp.translateZ = R_brow_ctrl.translateZ/8*(R_brow_ctrl.Brow_02_follow);\n' + '\ncenter_brow_L_brow_follow_grp.translateX = System_center_brow_L_brow_follow_grp.translateX/6*(L_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_L_brow_follow_grp.translateY = System_center_brow_L_brow_follow_grp.translateY/3*(L_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_L_brow_follow_grp.translateZ = System_center_brow_L_brow_follow_grp.translateZ/6*(L_brow_ctrl.Center_Brow_follow);\n\ncenter_brow_R_brow_follow_grp.translateX = System_center_brow_R_brow_follow_grp.translateX/6*(R_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_R_brow_follow_grp.translateY = System_center_brow_R_brow_follow_grp.translateY/3*(R_brow_ctrl.Center_Brow_follow);' + '\ncenter_brow_R_brow_follow_grp.translateZ = System_center_brow_R_brow_follow_grp.translateZ/6*(R_brow_ctrl.Center_Brow_follow);\n' + '\n//Brow_02_Master Follow\n' + '\nSystem_L_brow_02_master_follow_grp.translateX = L_brow_02_master_follow_grp.translateX/1.2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.translateY = L_brow_02_master_follow_grp.translateY/1.2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.translateZ = L_brow_02_master_follow_grp.translateZ/1.2*(L_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_L_brow_02_master_follow_grp.rotateX = L_brow_02_master_follow_grp.rotateX/2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.rotateY = L_brow_02_master_follow_grp.rotateY/2*(L_brow_master_ctrl.Brow_02_follow);' + '\nSystem_L_brow_02_master_follow_grp.rotateZ = L_brow_02_master_follow_grp.rotateZ/2*(L_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_R_brow_02_master_follow_grp.translateX = -R_brow_02_master_follow_grp.translateX/1.2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.translateY = R_brow_02_master_follow_grp.translateY/1.2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.translateZ = R_brow_02_master_follow_grp.translateZ/1.2*(R_brow_master_ctrl.Brow_02_follow);\n' + '\nSystem_R_brow_02_master_follow_grp.rotateX = R_brow_02_master_follow_grp.rotateX/2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.rotateY = -R_brow_02_master_follow_grp.rotateY/2*(R_brow_master_ctrl.Brow_02_follow);' + '\nSystem_R_brow_02_master_follow_grp.rotateZ = -R_brow_02_master_follow_grp.rotateZ/2*(R_brow_master_ctrl.Brow_02_follow);\n' + '\n//Brow_03_Master Follow\n' + '\nSystem_L_brow_03_master_follow_grp.translateX = L_brow_03_master_follow_grp.translateX/2*(L_brow_master_ctrl.Brow_03_follow);' + '\nSystem_L_brow_03_master_follow_grp.translateY = L_brow_03_master_follow_grp.translateY/2*(L_brow_master_ctrl.Brow_03_follow);' + '\nSystem_L_brow_03_master_follow_grp.translateZ = L_brow_03_master_follow_grp.translateZ/2*(L_brow_master_ctrl.Brow_03_follow);\n' + '\nSystem_L_brow_03_master_follow_grp.rotateX = L_brow_03_master_follow_grp.rotateX/3*(L_brow_master_ctrl.Brow_03_follow);' + '\nSystem_L_brow_03_master_follow_grp.rotateY = L_brow_03_master_follow_grp.rotateY/3*(L_brow_master_ctrl.Brow_03_follow);' + '\nSystem_L_brow_03_master_follow_grp.rotateZ = L_brow_03_master_follow_grp.rotateZ/3*(L_brow_master_ctrl.Brow_03_follow);\n' + '\nSystem_R_brow_03_master_follow_grp.translateX = -R_brow_03_master_follow_grp.translateX/2*(R_brow_master_ctrl.Brow_03_follow);' + '\nSystem_R_brow_03_master_follow_grp.translateY = R_brow_03_master_follow_grp.translateY/2*(R_brow_master_ctrl.Brow_03_follow);' + '\nSystem_R_brow_03_master_follow_grp.translateZ = R_brow_03_master_follow_grp.translateZ/2*(R_brow_master_ctrl.Brow_03_follow);\n' + '\nSystem_R_brow_03_master_follow_grp.rotateX = R_brow_03_master_follow_grp.rotateX/3*(R_brow_master_ctrl.Brow_03_follow);' + '\nSystem_R_brow_03_master_follow_grp.rotateY = -R_brow_03_master_follow_grp.rotateY/3*(R_brow_master_ctrl.Brow_03_follow);' + '\nSystem_R_brow_03_master_follow_grp.rotateZ = -R_brow_03_master_follow_grp.rotateZ/3*(R_brow_master_ctrl.Brow_03_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_02_03_Center_expression')
        if 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.group(em=True, n='System_L_fibers_brow_master_follow_grp')
            cmds.group(em=True, n='System_R_fibers_brow_master_follow_grp')
            cmds.pointConstraint('L_brow_master_ctrl', 'System_L_fibers_brow_master_follow_grp')
            cmds.pointConstraint('R_brow_master_ctrl', 'System_R_fibers_brow_master_follow_grp')
            cmds.delete('System_L_fibers_brow_master_follow_grp_pointConstraint1')
            cmds.delete('System_R_fibers_brow_master_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_fibers_brow_master_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_fibers_brow_master_follow_grp', t=True, apply=True)
            cmds.addAttr('L_brow_master_ctrl', ln='medial_fibers_follow', at='double', min=0, max=2)
            cmds.setAttr('L_brow_master_ctrl.medial_fibers_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_master_ctrl.medial_fibers_follow', 1)
            cmds.addAttr('R_brow_master_ctrl', ln='medial_fibers_follow', at='double', min=0, max=2)
            cmds.setAttr('R_brow_master_ctrl.medial_fibers_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_master_ctrl.medial_fibers_follow', 1)
            cmds.addAttr('L_brow_master_ctrl', ln='lateral_fibers_follow', at='double', min=0, max=2)
            cmds.setAttr('L_brow_master_ctrl.lateral_fibers_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_master_ctrl.lateral_fibers_follow', 1)
            cmds.addAttr('R_brow_master_ctrl', ln='lateral_fibers_follow', at='double', min=0, max=2)
            cmds.setAttr('R_brow_master_ctrl.lateral_fibers_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_master_ctrl.lateral_fibers_follow', 1)
            cmds.parentConstraint('L_brow_master_ctrl', 'System_L_fibers_brow_master_follow_grp', mo=True)
            cmds.parentConstraint('R_brow_master_ctrl', 'System_R_fibers_brow_master_follow_grp', mo=True)
            cmds.expression(
                s='\n//Fibers_Master Follow\n' + '\nSystem_L_medial_fibers_brow_master_follow_grp.translateX = System_L_fibers_brow_master_follow_grp.translateX*(L_brow_master_ctrl.medial_fibers_follow);' + '\nSystem_L_medial_fibers_brow_master_follow_grp.translateY = System_L_fibers_brow_master_follow_grp.translateY*(L_brow_master_ctrl.medial_fibers_follow);' + '\nSystem_L_medial_fibers_brow_master_follow_grp.translateZ = System_L_fibers_brow_master_follow_grp.translateZ*(L_brow_master_ctrl.medial_fibers_follow);\n' + '\nSystem_L_lateral_fibers_brow_master_follow_grp.translateX = System_L_fibers_brow_master_follow_grp.translateX/4*(L_brow_master_ctrl.lateral_fibers_follow);' + '\nSystem_L_lateral_fibers_brow_master_follow_grp.translateY = System_L_fibers_brow_master_follow_grp.translateY/4*(L_brow_master_ctrl.lateral_fibers_follow);' + '\nSystem_L_lateral_fibers_brow_master_follow_grp.translateZ = System_L_fibers_brow_master_follow_grp.translateZ/4*(L_brow_master_ctrl.lateral_fibers_follow);\n' + '\nSystem_R_medial_fibers_brow_master_follow_grp.translateX = System_R_fibers_brow_master_follow_grp.translateX*(R_brow_master_ctrl.medial_fibers_follow);' + '\nSystem_R_medial_fibers_brow_master_follow_grp.translateY = System_R_fibers_brow_master_follow_grp.translateY*(R_brow_master_ctrl.medial_fibers_follow);' + '\nSystem_R_medial_fibers_brow_master_follow_grp.translateZ = System_R_fibers_brow_master_follow_grp.translateZ*(R_brow_master_ctrl.medial_fibers_follow);\n' + '\nSystem_R_lateral_fibers_brow_master_follow_grp.translateX = System_R_fibers_brow_master_follow_grp.translateX/4*(R_brow_master_ctrl.lateral_fibers_follow);' + '\nSystem_R_lateral_fibers_brow_master_follow_grp.translateY = System_R_fibers_brow_master_follow_grp.translateY/4*(R_brow_master_ctrl.lateral_fibers_follow);' + '\nSystem_L_lateral_fibers_brow_master_follow_grp.translateZ = System_R_fibers_brow_master_follow_grp.translateZ/4*(R_brow_master_ctrl.lateral_fibers_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Brow_Fibers_Master_expression')
        if 'Brow 13 joint' == self.ui.BrowOption.currentText():
            cmds.group(em=True, n='L_Brow_fibers_connect_system_grp')
            cmds.parent('System_L_brow_*_fibers_follow_grp', 'System_L_lateral_fibers_brow_medial_fibers_follow_grp',
                        'System_L_procerus_brow_medial_fibers_follow_grp', 'System_L_fibers_brow_master_follow_grp',
                        'L_Brow_fibers_connect_system_grp')
            cmds.group(em=True, n='R_Brow_fibers_connect_system_grp')
            cmds.parent('System_R_brow_*_fibers_follow_grp', 'System_R_lateral_fibers_brow_medial_fibers_follow_grp',
                        'System_R_procerus_brow_medial_fibers_follow_grp', 'System_R_fibers_brow_master_follow_grp',
                        'R_Brow_fibers_connect_system_grp')
        cmds.group(em=True, n='Brow_All_Ctrl_grp')
        if 'Brow 05 joint' == self.ui.BrowOption.currentText() or 'Brow 07 joint' == self.ui.BrowOption.currentText() or 'Brow 13 joint' == self.ui.BrowOption.currentText() or 'Brow 04 joint' == self.ui.BrowOption.currentText():
            cmds.parent('*_brow_Ctrl_grp', '*_brow_0*_Ctrl_grp', '*_brow_master_Ctrl_grp', 'Brow_All_Ctrl_grp')
            if 'Brow 13 joint' == self.ui.BrowOption.currentText():
                cmds.parent('*_procerus_brow_FK_Ctrl_grp', 'Brow_All_Ctrl_grp')
                cmds.parent('*_Brow_fibers_connect_system_grp', 'Brow_All_Ctrl_grp')
        else:
            cmds.parent('*_brow_Ctrl_grp', 'Brow_All_Ctrl_grp')

    # todo eye all
    def eye_all_system(self):
        self.create_cube_control(23)
        cmds.scale(self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, self.ctrl_scale * 0.5, 'Cube_Shape')
        cmds.rename('Cube_Shape', 'L_eye_blink_ctrl')
        cmds.group('L_eye_blink_ctrl', n='L_eye_blink_Ctrl_grp')
        cmds.pointConstraint('System_L_eye_blink_jnt', 'L_eye_blink_Ctrl_grp')
        cmds.delete('L_eye_blink_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('L_eye_blink_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.select('L_eye_blink_ctrlShape3.cv[0:1]', 'L_eye_blink_ctrlShape2.cv[0:1]', 'L_eye_blink_ctrlShape1.cv[0:1]', 'L_eye_blink_ctrlShape.cv[0:9]')
        cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
        cmds.select(clear=True)
        cmds.select('L_eye_blink_ctrl')
        cmds.group(em=True, n='L_SymGroup')
        cmds.parent('L_eye_blink_Ctrl_grp', 'L_SymGroup')
        cmds.duplicate('L_SymGroup', n='R_SymGroup')
        cmds.setAttr('R_SymGroup.scaleX', -1)
        cmds.select('R_SymGroup', hi=True)
        mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
        cmds.parent('L_eye_blink_Ctrl_grp', 'R_eye_blink_Ctrl_grp', w=True)
        cmds.delete('L_SymGroup')
        cmds.delete('R_SymGroup')
        cmds.setAttr('R_eye_blink_ctrlShape.overrideColor', 29)
        cmds.setAttr('R_eye_blink_ctrlShape4.overrideColor', 29)
        cmds.setAttr('R_eye_blink_ctrlShape5.overrideColor', 29)
        cmds.setAttr('R_eye_blink_ctrlShape6.overrideColor', 29)
        cmds.pointConstraint('System_R_eye_blink_jnt', 'R_eye_blink_Ctrl_grp')
        cmds.delete('R_eye_blink_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('R_eye_blink_Ctrl_grp', apply=True, t=True)
        cmds.group('System_L_eye_blink_jnt', n='System_L_eye_blink_jnt_grp')
        cmds.group('System_R_eye_blink_jnt', n='System_R_eye_blink_jnt_grp')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('System_L_eye_blink_jnt', n='L_eye_blink_eye_lacrimal_follow_grp')
            cmds.group('System_L_eye_blink_jnt', n='L_eye_blink_eye_back_follow_grp')
            cmds.parent('System_L_eye_blink_jnt', 'System_L_eye_blink_jnt_grp')
            cmds.group('System_R_eye_blink_jnt', n='R_eye_blink_eye_lacrimal_follow_grp')
            cmds.group('System_R_eye_blink_jnt', n='R_eye_blink_eye_back_follow_grp')
            cmds.parent('System_R_eye_blink_jnt', 'System_R_eye_blink_jnt_grp')
            cmds.parent('L_eye_blink_eye_lacrimal_follow_grp', 'R_eye_blink_eye_lacrimal_follow_grp', w=True)
            cmds.parent('L_eye_blink_eye_lacrimal_follow_grp', 'L_eye_blink_Ctrl_grp')
            cmds.parent('R_eye_blink_eye_lacrimal_follow_grp', 'R_eye_blink_Ctrl_grp')
            cmds.makeIdentity('L_eye_blink_eye_lacrimal_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_eye_blink_eye_lacrimal_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_eye_blink_ctrl', 'L_eye_blink_eye_back_follow_grp')
            cmds.parent('R_eye_blink_ctrl', 'R_eye_blink_eye_back_follow_grp')
        cmds.group('System_L_eye_blink_jnt_grp', n='System_L_eye_blink_master_follow_grp')
        cmds.group('System_R_eye_blink_jnt_grp', n='System_R_eye_blink_master_follow_grp')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('System_L_eye_blink_jnt', n='System_L_eye_eye_lacrimal_follow_grp')
            cmds.group('System_R_eye_blink_jnt', n='System_R_eye_eye_lacrimal_follow_grp')
            cmds.group('System_L_eye_blink_jnt', n='System_L_eye_eye_back_follow_grp')
            cmds.group('System_R_eye_blink_jnt', n='System_R_eye_eye_back_follow_grp')
            cmds.parent('System_L_eye_blink_jnt', 'System_L_eye_blink_jnt_grp')
            cmds.parent('System_R_eye_blink_jnt', 'System_R_eye_blink_jnt_grp')
            cmds.parent('System_L_eye_eye_lacrimal_follow_grp', 'System_R_eye_eye_lacrimal_follow_grp', 'System_L_eye_eye_back_follow_grp', 'System_R_eye_eye_back_follow_grp', w=True)
        if self.ui.EyeTargetCheckBox.isChecked() is True:
            cmds.spaceLocator(n='L_eyeblink_loc')
            cmds.spaceLocator(n='R_eyeblink_loc')
            cmds.parent('L_eyeblink_loc', 'L_eye_blink_Ctrl_grp')
            cmds.parent('R_eyeblink_loc', 'R_eye_blink_Ctrl_grp')
            cmds.pointConstraint('Skin_L_eye_ball_jnt', 'L_eyeblink_loc')
            cmds.delete('L_eyeblink_loc_pointConstraint1')
            cmds.makeIdentity('L_eyeblink_loc', apply=True, t=True, r=True, scale=True)
            cmds.pointConstraint('Skin_R_eye_ball_jnt', 'R_eyeblink_loc')
            cmds.delete('R_eyeblink_loc_pointConstraint1')
            cmds.makeIdentity('R_eyeblink_loc', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('L_eyeblink_loc', 'System_L_eye_blink_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_blink_ctrl', 'System_L_eye_blink_jnt_grp', mo=True)
            cmds.parentConstraint('R_eyeblink_loc', 'System_R_eye_blink_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_blink_ctrl', 'System_R_eye_blink_jnt_grp', mo=True)
            cmds.aimConstraint('L_eye_blink_ctrl', 'L_eyeblink_loc', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
            cmds.aimConstraint('R_eye_blink_ctrl', 'R_eyeblink_loc', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
            cmds.group('System_L_eye_blink_jnt', n='System_L_eye_blink_rotate_follow_grp')
            cmds.group('System_R_eye_blink_jnt', n='System_R_eye_blink_rotate_follow_grp')
            cmds.orientConstraint('L_eye_blink_ctrl', 'System_L_eye_blink_rotate_follow_grp', mo=True)
            cmds.orientConstraint('R_eye_blink_ctrl', 'System_R_eye_blink_rotate_follow_grp', mo=True)
            cmds.parentConstraint('System_L_eye_blink_master_follow_grp', 'L_eye_blink_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_blink_master_follow_grp', 'R_eye_blink_Ctrl_grp', mo=True)
            cmds.hide('L_eyeblink_loc')
            cmds.hide('R_eyeblink_loc')
        else:
            cmds.parentConstraint('L_eye_blink_ctrl', 'System_L_eye_blink_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_blink_ctrl', 'System_R_eye_blink_jnt_grp', mo=True)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            self.create_cube_control(23)
            cmds.scale(self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_eye_lower_ctrl')
            cmds.group('L_eye_lower_ctrl', n='L_eye_lower_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_lower_jnt', 'L_eye_lower_Ctrl_grp')
            cmds.delete('L_eye_lower_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_lower_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_eye_lower_ctrlShape3.cv[0:1]', 'L_eye_lower_ctrlShape2.cv[0:1]', 'L_eye_lower_ctrlShape1.cv[0:1]', 'L_eye_lower_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_lower_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_lower_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_lower_Ctrl_grp', 'R_eye_lower_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.setAttr('R_eye_lower_ctrlShape.overrideColor', 29)
            cmds.setAttr('R_eye_lower_ctrlShape4.overrideColor', 29)
            cmds.setAttr('R_eye_lower_ctrlShape5.overrideColor', 29)
            cmds.setAttr('R_eye_lower_ctrlShape6.overrideColor', 29)
            cmds.pointConstraint('System_R_eye_lower_jnt', 'R_eye_lower_Ctrl_grp')
            cmds.delete('R_eye_lower_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_lower_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_lower_jnt', n='System_L_eye_lower_jnt_grp')
            cmds.group('System_R_eye_lower_jnt', n='System_R_eye_lower_jnt_grp')
            cmds.group('System_L_eye_lower_jnt', n='L_eye_lower_eye_lacrimal_follow_grp')
            cmds.group('System_L_eye_lower_jnt', n='L_eye_lower_eye_back_follow_grp')
            cmds.parent('System_L_eye_lower_jnt', 'System_L_eye_lower_jnt_grp')
            cmds.group('System_R_eye_lower_jnt', n='R_eye_lower_eye_lacrimal_follow_grp')
            cmds.group('System_R_eye_lower_jnt', n='R_eye_lower_eye_back_follow_grp')
            cmds.parent('System_R_eye_lower_jnt', 'System_R_eye_lower_jnt_grp')
            cmds.parent('L_eye_lower_eye_lacrimal_follow_grp', 'R_eye_lower_eye_lacrimal_follow_grp', w=True)
            cmds.parent('L_eye_lower_eye_lacrimal_follow_grp', 'L_eye_lower_Ctrl_grp')
            cmds.parent('R_eye_lower_eye_lacrimal_follow_grp', 'R_eye_lower_Ctrl_grp')
            cmds.makeIdentity('L_eye_lower_eye_lacrimal_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.makeIdentity('R_eye_lower_eye_lacrimal_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('L_eye_lower_ctrl', 'L_eye_lower_eye_back_follow_grp')
            cmds.parent('R_eye_lower_ctrl', 'R_eye_lower_eye_back_follow_grp')
            cmds.group('System_L_eye_lower_jnt_grp', n='System_L_eye_lower_master_follow_grp')
            cmds.group('System_R_eye_lower_jnt_grp', n='System_R_eye_lower_master_follow_grp')
            cmds.parentConstraint('System_L_eye_lower_master_follow_grp', 'L_eye_lower_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_lower_master_follow_grp', 'R_eye_lower_Ctrl_grp', mo=True)
        if self.ui.EyeTargetCheckBox.isChecked() is True:
            if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
                cmds.spaceLocator(n='L_eyelower_loc')
                cmds.spaceLocator(n='R_eyelower_loc')
                cmds.pointConstraint('Skin_L_eye_ball_jnt', 'L_eyelower_loc')
                cmds.delete('L_eyelower_loc_pointConstraint1')
                cmds.pointConstraint('Skin_R_eye_ball_jnt', 'R_eyelower_loc')
                cmds.delete('R_eyelower_loc_pointConstraint1')
                cmds.parent('L_eyelower_loc', 'L_eye_lower_Ctrl_grp')
                cmds.parent('R_eyelower_loc', 'R_eye_lower_Ctrl_grp')
                cmds.makeIdentity('L_eyelower_loc', apply=True, t=True, r=True, scale=True)
                cmds.makeIdentity('R_eyelower_loc', apply=True, t=True, r=True, scale=True)
                cmds.parentConstraint('L_eyelower_loc', 'System_L_eye_lower_jnt_grp', mo=True)
                cmds.scaleConstraint('L_eye_lower_ctrl', 'System_L_eye_lower_jnt_grp', mo=True)
                cmds.parentConstraint('R_eyelower_loc', 'System_R_eye_lower_jnt_grp', mo=True)
                cmds.scaleConstraint('R_eye_lower_ctrl', 'System_R_eye_lower_jnt_grp', mo=True)
                cmds.aimConstraint('L_eye_lower_ctrl', 'L_eyelower_loc', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
                cmds.aimConstraint('R_eye_lower_ctrl', 'R_eyelower_loc', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
                cmds.group('System_L_eye_lower_jnt', n='System_L_eye_lower_rotate_follow_grp')
                cmds.group('System_R_eye_lower_jnt', n='System_R_eye_lower_rotate_follow_grp')
                cmds.orientConstraint('L_eye_lower_ctrl', 'System_L_eye_lower_rotate_follow_grp', mo=True)
                cmds.orientConstraint('R_eye_lower_ctrl', 'System_R_eye_lower_rotate_follow_grp', mo=True)
                cmds.hide('L_eyelower_loc')
                cmds.hide('R_eyelower_loc')
        elif 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.parentConstraint('L_eye_lower_ctrl', 'System_L_eye_lower_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_lower_ctrl', 'System_R_eye_lower_jnt_grp', mo=True)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_eye_lacrimal_ctrl')
            cmds.group('L_eye_lacrimal_ctrl', n='L_eye_lacrimal_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_lacrimal_jnt', 'L_eye_lacrimal_Ctrl_grp')
            cmds.delete('L_eye_lacrimal_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_lacrimal_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_eye_lacrimal_ctrlShape3.cv[0:1]', 'L_eye_lacrimal_ctrlShape2.cv[0:1]', 'L_eye_lacrimal_ctrlShape1.cv[0:1]', 'L_eye_lacrimal_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_lacrimal_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_lacrimal_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_lacrimal_Ctrl_grp', 'R_eye_lacrimal_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_lacrimal_jnt', 'R_eye_lacrimal_Ctrl_grp')
            cmds.delete('R_eye_lacrimal_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_lacrimal_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_lacrimal_jnt', n='System_L_eye_lacrimal_jnt_grp')
            cmds.group('System_R_eye_lacrimal_jnt', n='System_R_eye_lacrimal_jnt_grp')
            cmds.group('System_L_eye_lacrimal_jnt_grp', n='System_L_eye_lacrimal_master_follow_grp')
            cmds.group('System_R_eye_lacrimal_jnt_grp', n='System_R_eye_lacrimal_master_follow_grp')
            cmds.parentConstraint('L_eye_lacrimal_ctrl', 'System_L_eye_lacrimal_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_lacrimal_ctrl', 'System_L_eye_lacrimal_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_lacrimal_ctrl', 'System_R_eye_lacrimal_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_lacrimal_ctrl', 'System_R_eye_lacrimal_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_lacrimal_master_follow_grp', 'L_eye_lacrimal_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_lacrimal_master_follow_grp', 'R_eye_lacrimal_Ctrl_grp', mo=True)
            cmds.parent('System_L_eye_eye_lacrimal_follow_grp', 'L_eye_lacrimal_Ctrl_grp')
            cmds.parent('System_R_eye_eye_lacrimal_follow_grp', 'R_eye_lacrimal_Ctrl_grp')
            cmds.pointConstraint('L_eye_lacrimal_ctrl', 'System_L_eye_eye_lacrimal_follow_grp', mo=True)
            cmds.pointConstraint('R_eye_lacrimal_ctrl', 'System_R_eye_eye_lacrimal_follow_grp', mo=True)
            cmds.group('L_eye_lacrimal_ctrl', n='L_eye_lacrimal_shrink_follow_grp')
            cmds.group('R_eye_lacrimal_ctrl', n='R_eye_lacrimal_shrink_follow_grp')
        if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_eye_lacrimal_upper_FK_ctrl')
            cmds.group('L_eye_lacrimal_upper_FK_ctrl', n='L_eye_lacrimal_upper_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_lacrimal_upper_jnt', 'L_eye_lacrimal_upper_FK_Ctrl_grp')
            cmds.delete('L_eye_lacrimal_upper_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_lacrimal_upper_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_eye_lacrimal_upper_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_lacrimal_upper_FK_ctrl')
            cmds.setAttr('L_eye_lacrimal_upper_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_eye_lacrimal_upper_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_lacrimal_upper_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_lacrimal_upper_FK_Ctrl_grp', 'R_eye_lacrimal_upper_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_lacrimal_upper_jnt', 'R_eye_lacrimal_upper_FK_Ctrl_grp')
            cmds.delete('R_eye_lacrimal_upper_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_lacrimal_upper_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_lacrimal_upper_jnt', n='System_L_eye_lacrimal_upper_jnt_grp')
            cmds.group('System_R_eye_lacrimal_upper_jnt', n='System_R_eye_lacrimal_upper_jnt_grp')
            cmds.group('System_L_eye_lacrimal_upper_jnt_grp', n='System_L_eye_lacrimal_upper_FK_master_follow_grp')
            cmds.group('System_R_eye_lacrimal_upper_jnt_grp', n='System_R_eye_lacrimal_upper_FK_master_follow_grp')
            cmds.parentConstraint('L_eye_lacrimal_upper_FK_ctrl', 'System_L_eye_lacrimal_upper_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_lacrimal_upper_FK_ctrl', 'System_L_eye_lacrimal_upper_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_lacrimal_upper_FK_ctrl', 'System_R_eye_lacrimal_upper_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_lacrimal_upper_FK_ctrl', 'System_R_eye_lacrimal_upper_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_lacrimal_upper_FK_master_follow_grp', 'L_eye_lacrimal_upper_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_lacrimal_upper_FK_master_follow_grp', 'R_eye_lacrimal_upper_FK_Ctrl_grp', mo=True)
            cmds.group('L_eye_lacrimal_upper_FK_ctrl', n='L_eye_lacrimal_upper_FK_blink_follow_grp')
            cmds.group('R_eye_lacrimal_upper_FK_ctrl', n='R_eye_lacrimal_upper_FK_blink_follow_grp')
            cmds.group('L_eye_lacrimal_upper_FK_ctrl', n='L_eye_lacrimal_upper_FK_lacrimal_follow_grp')
            cmds.group('R_eye_lacrimal_upper_FK_ctrl', n='R_eye_lacrimal_upper_FK_lacrimal_follow_grp')
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_eye_lacrimal_lower_FK_ctrl')
            cmds.group('L_eye_lacrimal_lower_FK_ctrl', n='L_eye_lacrimal_lower_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_lacrimal_lower_jnt', 'L_eye_lacrimal_lower_FK_Ctrl_grp')
            cmds.delete('L_eye_lacrimal_lower_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_lacrimal_lower_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_eye_lacrimal_lower_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_lacrimal_lower_FK_ctrl')
            cmds.setAttr('L_eye_lacrimal_lower_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_eye_lacrimal_lower_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_lacrimal_lower_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_lacrimal_lower_FK_Ctrl_grp', 'R_eye_lacrimal_lower_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_lacrimal_lower_jnt', 'R_eye_lacrimal_lower_FK_Ctrl_grp')
            cmds.delete('R_eye_lacrimal_lower_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_lacrimal_lower_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_lacrimal_lower_jnt', n='System_L_eye_lacrimal_lower_jnt_grp')
            cmds.group('System_R_eye_lacrimal_lower_jnt', n='System_R_eye_lacrimal_lower_jnt_grp')
            cmds.group('System_L_eye_lacrimal_lower_jnt_grp', n='System_L_eye_lacrimal_lower_FK_master_follow_grp')
            cmds.group('System_R_eye_lacrimal_lower_jnt_grp', n='System_R_eye_lacrimal_lower_FK_master_follow_grp')
            cmds.parentConstraint('L_eye_lacrimal_lower_FK_ctrl', 'System_L_eye_lacrimal_lower_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_lacrimal_lower_FK_ctrl', 'System_L_eye_lacrimal_lower_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_lacrimal_lower_FK_ctrl', 'System_R_eye_lacrimal_lower_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_lacrimal_lower_FK_ctrl', 'System_R_eye_lacrimal_lower_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_lacrimal_lower_FK_master_follow_grp', 'L_eye_lacrimal_lower_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_lacrimal_lower_FK_master_follow_grp', 'R_eye_lacrimal_lower_FK_Ctrl_grp', mo=True)
            cmds.group('L_eye_lacrimal_lower_FK_ctrl', n='L_eye_lacrimal_lower_FK_lower_follow_grp')
            cmds.group('R_eye_lacrimal_lower_FK_ctrl', n='R_eye_lacrimal_lower_FK_lower_follow_grp')
            cmds.group('L_eye_lacrimal_lower_FK_ctrl', n='L_eye_lacrimal_lower_FK_lacrimal_follow_grp')
            cmds.group('R_eye_lacrimal_lower_FK_ctrl', n='R_eye_lacrimal_lower_FK_lacrimal_follow_grp')
            cmds.group('L_eye_lacrimal_lower_FK_ctrl', n='L_eye_lacrimal_lower_FK_shrink_follow_grp')
            cmds.group('R_eye_lacrimal_lower_FK_ctrl', n='R_eye_lacrimal_lower_FK_shrink_follow_grp')
            cmds.addAttr('L_eye_lower_ctrl', ln='lower_FK_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_lower_ctrl.lower_FK_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_lower_ctrl.lower_FK_follow', 1)
            cmds.addAttr('R_eye_lower_ctrl', ln='lower_FK_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_lower_ctrl.lower_FK_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_lower_ctrl.lower_FK_follow', 1)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            self.create_cube_control(13)
            cmds.scale(self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, self.ctrl_scale * 0.4, 'Cube_Shape')
            cmds.rename('Cube_Shape', 'L_eye_back_ctrl')
            cmds.group('L_eye_back_ctrl', n='L_eye_back_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_back_jnt', 'L_eye_back_Ctrl_grp')
            cmds.delete('L_eye_back_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_back_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.select('L_eye_back_ctrlShape3.cv[0:1]', 'L_eye_back_ctrlShape2.cv[0:1]', 'L_eye_back_ctrlShape1.cv[0:1]', 'L_eye_back_ctrlShape.cv[0:9]')
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_back_ctrl')
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_back_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_back_Ctrl_grp', 'R_eye_back_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_back_jnt', 'R_eye_back_Ctrl_grp')
            cmds.delete('R_eye_back_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_back_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_back_jnt', n='System_L_eye_back_jnt_grp')
            cmds.group('System_R_eye_back_jnt', n='System_R_eye_back_jnt_grp')
            cmds.group('System_L_eye_back_jnt_grp', n='System_L_eye_back_master_follow_grp')
            cmds.group('System_R_eye_back_jnt_grp', n='System_R_eye_back_master_follow_grp')
            cmds.parentConstraint('L_eye_back_ctrl', 'System_L_eye_back_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_back_ctrl', 'System_L_eye_back_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_back_ctrl', 'System_R_eye_back_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_back_ctrl', 'System_R_eye_back_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_back_master_follow_grp', 'L_eye_back_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_back_master_follow_grp', 'R_eye_back_Ctrl_grp', mo=True)
            cmds.parent('System_L_eye_eye_back_follow_grp', 'L_eye_back_Ctrl_grp')
            cmds.parent('System_R_eye_eye_back_follow_grp', 'R_eye_back_Ctrl_grp')
            cmds.pointConstraint('L_eye_back_ctrl', 'System_L_eye_eye_back_follow_grp', mo=True)
            cmds.pointConstraint('R_eye_back_ctrl', 'System_R_eye_eye_back_follow_grp', mo=True)
            cmds.group('L_eye_back_ctrl', n='L_eye_back_shrink_follow_grp')
            cmds.group('R_eye_back_ctrl', n='R_eye_back_shrink_follow_grp')
            cmds.addAttr('L_eye_lower_ctrl', ln='side_shrink_follow', at='double', min=0, max=4)
            cmds.setAttr('L_eye_lower_ctrl.side_shrink_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_lower_ctrl.side_shrink_follow', 1)
            cmds.addAttr('R_eye_lower_ctrl', ln='side_shrink_follow', at='double', min=0, max=4)
            cmds.setAttr('R_eye_lower_ctrl.side_shrink_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_lower_ctrl.side_shrink_follow', 1)
        if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_eye_back_upper_FK_ctrl')
            cmds.group('L_eye_back_upper_FK_ctrl', n='L_eye_back_upper_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_back_upper_jnt', 'L_eye_back_upper_FK_Ctrl_grp')
            cmds.delete('L_eye_back_upper_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_back_upper_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_eye_back_upper_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_back_upper_FK_ctrl')
            cmds.setAttr('L_eye_back_upper_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_eye_back_upper_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_back_upper_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_back_upper_FK_Ctrl_grp', 'R_eye_back_upper_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_back_upper_jnt', 'R_eye_back_upper_FK_Ctrl_grp')
            cmds.delete('R_eye_back_upper_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_back_upper_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_back_upper_jnt', n='System_L_eye_back_upper_jnt_grp')
            cmds.group('System_R_eye_back_upper_jnt', n='System_R_eye_back_upper_jnt_grp')
            cmds.group('System_L_eye_back_upper_jnt_grp', n='System_L_eye_back_upper_FK_master_follow_grp')
            cmds.group('System_R_eye_back_upper_jnt_grp', n='System_R_eye_back_upper_FK_master_follow_grp')
            cmds.parentConstraint('L_eye_back_upper_FK_ctrl', 'System_L_eye_back_upper_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_back_upper_FK_ctrl', 'System_L_eye_back_upper_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_back_upper_FK_ctrl', 'System_R_eye_back_upper_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_back_upper_FK_ctrl', 'System_R_eye_back_upper_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_back_upper_FK_master_follow_grp', 'L_eye_back_upper_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_back_upper_FK_master_follow_grp', 'R_eye_back_upper_FK_Ctrl_grp', mo=True)
            cmds.group('L_eye_back_upper_FK_ctrl', n='L_eye_back_upper_FK_blink_follow_grp')
            cmds.group('R_eye_back_upper_FK_ctrl', n='R_eye_back_upper_FK_blink_follow_grp')
            cmds.group('L_eye_back_upper_FK_ctrl', n='L_eye_back_upper_FK_back_follow_grp')
            cmds.group('R_eye_back_upper_FK_ctrl', n='R_eye_back_upper_FK_back_follow_grp')
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.2, n='L_eye_back_lower_FK_ctrl')
            cmds.group('L_eye_back_lower_FK_ctrl', n='L_eye_back_lower_FK_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_back_lower_jnt', 'L_eye_back_lower_FK_Ctrl_grp')
            cmds.delete('L_eye_back_lower_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_back_lower_FK_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_eye_back_lower_FK_ctrl.cv[0:7]', r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_back_lower_FK_ctrl')
            cmds.setAttr('L_eye_back_lower_FK_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_eye_back_lower_FK_ctrlShape.overrideColor', 16)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_back_lower_FK_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_back_lower_FK_Ctrl_grp', 'R_eye_back_lower_FK_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_back_lower_jnt', 'R_eye_back_lower_FK_Ctrl_grp')
            cmds.delete('R_eye_back_lower_FK_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_back_lower_FK_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_back_lower_jnt', n='System_L_eye_back_lower_jnt_grp')
            cmds.group('System_R_eye_back_lower_jnt', n='System_R_eye_back_lower_jnt_grp')
            cmds.group('System_L_eye_back_lower_jnt_grp', n='System_L_eye_back_lower_FK_master_follow_grp')
            cmds.group('System_R_eye_back_lower_jnt_grp', n='System_R_eye_back_lower_FK_master_follow_grp')
            cmds.parentConstraint('L_eye_back_lower_FK_ctrl', 'System_L_eye_back_lower_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_back_lower_FK_ctrl', 'System_L_eye_back_lower_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_back_lower_FK_ctrl', 'System_R_eye_back_lower_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_back_lower_FK_ctrl', 'System_R_eye_back_lower_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_back_lower_FK_master_follow_grp', 'L_eye_back_lower_FK_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_back_lower_FK_master_follow_grp', 'R_eye_back_lower_FK_Ctrl_grp', mo=True)
            cmds.group('L_eye_back_lower_FK_ctrl', n='L_eye_back_lower_FK_lower_follow_grp')
            cmds.group('R_eye_back_lower_FK_ctrl', n='R_eye_back_lower_FK_lower_follow_grp')
            cmds.group('L_eye_back_lower_FK_ctrl', n='L_eye_back_lower_FK_back_follow_grp')
            cmds.group('R_eye_back_lower_FK_ctrl', n='R_eye_back_lower_FK_back_follow_grp')
            cmds.group('L_eye_back_lower_FK_ctrl', n='L_eye_back_lower_FK_shrink_follow_grp')
            cmds.group('R_eye_back_lower_FK_ctrl', n='R_eye_back_lower_FK_shrink_follow_grp')
            cmds.expression(
                s='\n//Eye_lacrimal_blink_Follow\n' + '\nL_eye_lacrimal_upper_FK_blink_follow_grp.translateX = System_L_eye_blink_jnt_grp.translateX/1.5;' + '\nL_eye_lacrimal_upper_FK_blink_follow_grp.translateY = System_L_eye_blink_jnt_grp.translateY/1.5;' + '\nL_eye_lacrimal_upper_FK_blink_follow_grp.translateZ = System_L_eye_blink_jnt_grp.translateZ/1.5;' + '\nR_eye_lacrimal_upper_FK_blink_follow_grp.translateX = -System_R_eye_blink_jnt_grp.translateX/1.5;' + '\nR_eye_lacrimal_upper_FK_blink_follow_grp.translateY = System_R_eye_blink_jnt_grp.translateY/1.5;' + '\nR_eye_lacrimal_upper_FK_blink_follow_grp.translateZ = System_R_eye_blink_jnt_grp.translateZ/1.5;' + '\nL_eye_lacrimal_lower_FK_lower_follow_grp.translateX = System_L_eye_lower_jnt_grp.translateX/1.5;' + '\nL_eye_lacrimal_lower_FK_lower_follow_grp.translateY = System_L_eye_lower_jnt_grp.translateY/1.5;' + '\nL_eye_lacrimal_lower_FK_lower_follow_grp.translateZ = System_L_eye_lower_jnt_grp.translateZ/1.5;' + '\nR_eye_lacrimal_lower_FK_lower_follow_grp.translateX = -System_R_eye_lower_jnt_grp.translateX/1.5;' + '\nR_eye_lacrimal_lower_FK_lower_follow_grp.translateY = System_R_eye_lower_jnt_grp.translateY/1.5;' + '\nR_eye_lacrimal_lower_FK_lower_follow_grp.translateZ = System_R_eye_lower_jnt_grp.translateZ/1.5;' + '\n//Eye_back_blink_Follow\n' + '\nL_eye_back_upper_FK_blink_follow_grp.translateX = System_L_eye_blink_jnt_grp.translateX/1.5;' + '\nL_eye_back_upper_FK_blink_follow_grp.translateY = System_L_eye_blink_jnt_grp.translateY/1.5;' + '\nL_eye_back_upper_FK_blink_follow_grp.translateZ = System_L_eye_blink_jnt_grp.translateZ/1.5;' + '\nR_eye_back_upper_FK_blink_follow_grp.translateX = -System_R_eye_blink_jnt_grp.translateX/1.5;' + '\nR_eye_back_upper_FK_blink_follow_grp.translateY = System_R_eye_blink_jnt_grp.translateY/1.5;' + '\nR_eye_back_upper_FK_blink_follow_grp.translateZ = System_R_eye_blink_jnt_grp.translateZ/1.5;' + '\nL_eye_back_lower_FK_lower_follow_grp.translateX = System_L_eye_lower_jnt_grp.translateX/1.5;' + '\nL_eye_back_lower_FK_lower_follow_grp.translateY = System_L_eye_lower_jnt_grp.translateY/1.5;' + '\nL_eye_back_lower_FK_lower_follow_grp.translateZ = System_L_eye_lower_jnt_grp.translateZ/1.5;' + '\nR_eye_back_lower_FK_lower_follow_grp.translateX = -System_R_eye_lower_jnt_grp.translateX/1.5;' + '\nR_eye_back_lower_FK_lower_follow_grp.translateY = System_R_eye_lower_jnt_grp.translateY/1.5;' + '\nR_eye_back_lower_FK_lower_follow_grp.translateZ = System_R_eye_lower_jnt_grp.translateZ/1.5;' + '\n//Eye_lacrimal_lacrimal_Follow\n' + '\nL_eye_lacrimal_upper_FK_lacrimal_follow_grp.translateX = System_L_eye_lacrimal_jnt_grp.translateX/4;' + '\nL_eye_lacrimal_upper_FK_lacrimal_follow_grp.translateY = System_L_eye_lacrimal_jnt_grp.translateY/4;' + '\nL_eye_lacrimal_upper_FK_lacrimal_follow_grp.translateZ = System_L_eye_lacrimal_jnt_grp.translateZ/4;' + '\nL_eye_lacrimal_lower_FK_lacrimal_follow_grp.translateX = System_L_eye_lacrimal_jnt_grp.translateX/4;' + '\nL_eye_lacrimal_lower_FK_lacrimal_follow_grp.translateY = System_L_eye_lacrimal_jnt_grp.translateY/4;' + '\nL_eye_lacrimal_lower_FK_lacrimal_follow_grp.translateZ = System_L_eye_lacrimal_jnt_grp.translateZ/4;' + '\nR_eye_lacrimal_upper_FK_lacrimal_follow_grp.translateX = -System_R_eye_lacrimal_jnt_grp.translateX/4;' + '\nR_eye_lacrimal_upper_FK_lacrimal_follow_grp.translateY = System_R_eye_lacrimal_jnt_grp.translateY/4;' + '\nR_eye_lacrimal_upper_FK_lacrimal_follow_grp.translateZ = System_R_eye_lacrimal_jnt_grp.translateZ/4;' + '\nR_eye_lacrimal_lower_FK_lacrimal_follow_grp.translateX = -System_R_eye_lacrimal_jnt_grp.translateX/4;' + '\nR_eye_lacrimal_lower_FK_lacrimal_follow_grp.translateY = System_R_eye_lacrimal_jnt_grp.translateY/4;' + '\nR_eye_lacrimal_lower_FK_lacrimal_follow_grp.translateZ = System_R_eye_lacrimal_jnt_grp.translateZ/4;' + '\n//Eye_back_back_Follow\n' + '\nL_eye_back_upper_FK_back_follow_grp.translateX = System_L_eye_back_jnt_grp.translateX/4;' + '\nL_eye_back_upper_FK_back_follow_grp.translateY = System_L_eye_back_jnt_grp.translateY/4;' + '\nL_eye_back_upper_FK_back_follow_grp.translateZ = System_L_eye_back_jnt_grp.translateZ/4;' + '\nL_eye_back_lower_FK_back_follow_grp.translateX = System_L_eye_back_jnt_grp.translateX/4;' + '\nL_eye_back_lower_FK_back_follow_grp.translateY = System_L_eye_back_jnt_grp.translateY/4;' + '\nL_eye_back_lower_FK_back_follow_grp.translateZ = System_L_eye_back_jnt_grp.translateZ/4;' + '\nR_eye_back_upper_FK_back_follow_grp.translateX = -System_R_eye_back_jnt_grp.translateX/4;' + '\nR_eye_back_upper_FK_back_follow_grp.translateY = System_R_eye_back_jnt_grp.translateY/4;' + '\nR_eye_back_upper_FK_back_follow_grp.translateZ = System_R_eye_back_jnt_grp.translateZ/4;' + '\nR_eye_back_lower_FK_back_follow_grp.translateX = -System_R_eye_back_jnt_grp.translateX/4;' + '\nR_eye_back_lower_FK_back_follow_grp.translateY = System_R_eye_back_jnt_grp.translateY/4;' + '\nR_eye_back_lower_FK_back_follow_grp.translateZ = System_R_eye_back_jnt_grp.translateZ/4;' + '\n//Eye_Lower_Shrink_Follow\n' + '\nif (System_L_eye_lower_jnt_grp.translateY>0){' + '\nL_eye_back_lower_FK_shrink_follow_grp.translateX = -System_L_eye_lower_jnt_grp.translateY/4*(L_eye_lower_ctrl.lower_FK_follow);' + '\nL_eye_lacrimal_lower_FK_shrink_follow_grp.translateY = System_L_eye_lower_jnt_grp.translateY/8*(L_eye_lower_ctrl.lower_FK_follow);' + '\nL_eye_back_lower_FK_shrink_follow_grp.translateY = System_L_eye_lower_jnt_grp.translateY/8*(L_eye_lower_ctrl.lower_FK_follow);' + '\nL_eye_lacrimal_lower_FK_shrink_follow_grp.translateZ = System_L_eye_lower_jnt_grp.translateZ/4*(L_eye_lower_ctrl.lower_FK_follow);' + '\nL_eye_back_lower_FK_shrink_follow_grp.translateZ = System_L_eye_lower_jnt_grp.translateZ/4*(L_eye_lower_ctrl.lower_FK_follow);}' + '\nelse{' + '\nL_eye_lacrimal_lower_FK_shrink_follow_grp.translateX = 0;' + '\nL_eye_back_lower_FK_shrink_follow_grp.translateX = 0;' + '\nL_eye_lacrimal_lower_FK_shrink_follow_grp.translateY = 0;' + '\nL_eye_back_lower_FK_shrink_follow_grp.translateY = 0;' + '\nL_eye_lacrimal_lower_FK_shrink_follow_grp.translateZ = 0;' + '\nL_eye_back_lower_FK_shrink_follow_grp.translateZ = 0;}' + '\nif (System_R_eye_lower_jnt_grp.translateY>0){' + '\nR_eye_back_lower_FK_shrink_follow_grp.translateX = -System_R_eye_lower_jnt_grp.translateY/4*(R_eye_lower_ctrl.lower_FK_follow);' + '\nR_eye_lacrimal_lower_FK_shrink_follow_grp.translateY = System_R_eye_lower_jnt_grp.translateY/8*(R_eye_lower_ctrl.lower_FK_follow);' + '\nR_eye_back_lower_FK_shrink_follow_grp.translateY = System_R_eye_lower_jnt_grp.translateY/8*(R_eye_lower_ctrl.lower_FK_follow);' + '\nR_eye_lacrimal_lower_FK_shrink_follow_grp.translateZ = System_R_eye_lower_jnt_grp.translateZ/4*(R_eye_lower_ctrl.lower_FK_follow);' + '\nR_eye_back_lower_FK_shrink_follow_grp.translateZ = System_R_eye_lower_jnt_grp.translateZ/4*(R_eye_lower_ctrl.lower_FK_follow);}' + '\nelse{' + '\nR_eye_lacrimal_lower_FK_shrink_follow_grp.translateX = 0;' + '\nR_eye_back_lower_FK_shrink_follow_grp.translateX = 0;' + '\nR_eye_lacrimal_lower_FK_shrink_follow_grp.translateY = 0;' + '\nR_eye_back_lower_FK_shrink_follow_grp.translateY = 0;' + '\nR_eye_lacrimal_lower_FK_shrink_follow_grp.translateZ = 0;' + '\nR_eye_back_lower_FK_shrink_follow_grp.translateZ = 0;}',
                ae=1, uc=all, alwaysEvaluate=0, n='Eye_FK_expression')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.addAttr('L_eye_lacrimal_ctrl', ln='Eye_Blink_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_lacrimal_ctrl.Eye_Blink_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_lacrimal_ctrl.Eye_Blink_follow', 1)
            cmds.addAttr('L_eye_back_ctrl', ln='Eye_Blink_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_back_ctrl.Eye_Blink_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_back_ctrl.Eye_Blink_follow', 1)
            cmds.addAttr('R_eye_lacrimal_ctrl', ln='Eye_Blink_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_lacrimal_ctrl.Eye_Blink_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_lacrimal_ctrl.Eye_Blink_follow', 1)
            cmds.addAttr('R_eye_back_ctrl', ln='Eye_Blink_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_back_ctrl.Eye_Blink_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_back_ctrl.Eye_Blink_follow', 1)
            cmds.addAttr('L_eye_lacrimal_ctrl', ln='Eye_Lower_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_lacrimal_ctrl.Eye_Lower_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_lacrimal_ctrl.Eye_Lower_follow', 1)
            cmds.addAttr('L_eye_back_ctrl', ln='Eye_Lower_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_back_ctrl.Eye_Lower_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_back_ctrl.Eye_Lower_follow', 1)
            cmds.addAttr('R_eye_lacrimal_ctrl', ln='Eye_Lower_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_lacrimal_ctrl.Eye_Lower_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_lacrimal_ctrl.Eye_Lower_follow', 1)
            cmds.addAttr('R_eye_back_ctrl', ln='Eye_Lower_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_back_ctrl.Eye_Lower_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_back_ctrl.Eye_Lower_follow', 1)
            cmds.expression(
                s='\n//Eye_lacrimal Follow\n' + '\nL_eye_blink_eye_lacrimal_follow_grp.translateX = L_eye_lacrimal_ctrl.translateX/2*(L_eye_lacrimal_ctrl.Eye_Blink_follow);' + '\nL_eye_blink_eye_lacrimal_follow_grp.translateY = L_eye_lacrimal_ctrl.translateY/4*(L_eye_lacrimal_ctrl.Eye_Blink_follow);' + '\nL_eye_blink_eye_lacrimal_follow_grp.translateZ = L_eye_lacrimal_ctrl.translateZ/2*(L_eye_lacrimal_ctrl.Eye_Blink_follow);' + '\nL_eye_lower_eye_lacrimal_follow_grp.translateX = L_eye_lacrimal_ctrl.translateX/2*(L_eye_lacrimal_ctrl.Eye_Lower_follow);' + '\nL_eye_lower_eye_lacrimal_follow_grp.translateY = L_eye_lacrimal_ctrl.translateY/2*(L_eye_lacrimal_ctrl.Eye_Lower_follow);' + '\nL_eye_lower_eye_lacrimal_follow_grp.translateZ = L_eye_lacrimal_ctrl.translateZ/2*(L_eye_lacrimal_ctrl.Eye_Lower_follow);' + '\nR_eye_blink_eye_lacrimal_follow_grp.translateX = R_eye_lacrimal_ctrl.translateX/2*(R_eye_lacrimal_ctrl.Eye_Blink_follow);' + '\nR_eye_blink_eye_lacrimal_follow_grp.translateY = R_eye_lacrimal_ctrl.translateY/4*(R_eye_lacrimal_ctrl.Eye_Blink_follow);' + '\nR_eye_blink_eye_lacrimal_follow_grp.translateZ = R_eye_lacrimal_ctrl.translateZ/2*(R_eye_lacrimal_ctrl.Eye_Blink_follow);' + '\nR_eye_lower_eye_lacrimal_follow_grp.translateX = R_eye_lacrimal_ctrl.translateX/2*(R_eye_lacrimal_ctrl.Eye_Lower_follow);' + '\nR_eye_lower_eye_lacrimal_follow_grp.translateY = R_eye_lacrimal_ctrl.translateY/2*(R_eye_lacrimal_ctrl.Eye_Lower_follow);' + '\nR_eye_lower_eye_lacrimal_follow_grp.translateZ = R_eye_lacrimal_ctrl.translateZ/2*(R_eye_lacrimal_ctrl.Eye_Lower_follow);' + '\n//Eye_back Follow\n' + '\nL_eye_blink_eye_back_follow_grp.translateX = L_eye_back_ctrl.translateX/2*(L_eye_back_ctrl.Eye_Blink_follow);' + '\nL_eye_blink_eye_back_follow_grp.translateY = L_eye_back_ctrl.translateY/4*(L_eye_back_ctrl.Eye_Blink_follow);' + '\nL_eye_blink_eye_back_follow_grp.translateZ = L_eye_back_ctrl.translateZ/2*(L_eye_back_ctrl.Eye_Blink_follow);' + '\nL_eye_lower_eye_back_follow_grp.translateX = L_eye_back_ctrl.translateX/2*(L_eye_back_ctrl.Eye_Lower_follow);' + '\nL_eye_lower_eye_back_follow_grp.translateY = L_eye_back_ctrl.translateY/2*(L_eye_back_ctrl.Eye_Lower_follow);' + '\nL_eye_lower_eye_back_follow_grp.translateZ = L_eye_back_ctrl.translateZ/2*(L_eye_back_ctrl.Eye_Lower_follow);' + '\nR_eye_blink_eye_back_follow_grp.translateX = R_eye_back_ctrl.translateX/2*(R_eye_back_ctrl.Eye_Blink_follow);' + '\nR_eye_blink_eye_back_follow_grp.translateY = R_eye_back_ctrl.translateY/4*(R_eye_back_ctrl.Eye_Blink_follow);' + '\nR_eye_blink_eye_back_follow_grp.translateZ = R_eye_back_ctrl.translateZ/2*(R_eye_back_ctrl.Eye_Blink_follow);' + '\nR_eye_lower_eye_back_follow_grp.translateX = R_eye_back_ctrl.translateX/2*(R_eye_back_ctrl.Eye_Lower_follow);' + '\nR_eye_lower_eye_back_follow_grp.translateY = R_eye_back_ctrl.translateY/2*(R_eye_back_ctrl.Eye_Lower_follow);' + '\nR_eye_lower_eye_back_follow_grp.translateZ = R_eye_back_ctrl.translateZ/2*(R_eye_back_ctrl.Eye_Lower_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Eye_expression')
            cmds.expression(
                s='\n//Eye_side_Shrink Follow\n' + '\nif (System_L_eye_lower_jnt_grp.translateY>0){' + '\nL_eye_lacrimal_shrink_follow_grp.translateX = -System_L_eye_lower_jnt_grp.translateY/8*(L_eye_lower_ctrl.side_shrink_follow);' + '\nL_eye_back_shrink_follow_grp.translateX = -System_L_eye_lower_jnt_grp.translateY/8*(L_eye_lower_ctrl.side_shrink_follow);}' + '\nelse{' + '\nL_eye_lacrimal_shrink_follow_grp.translateX = 0;' + '\nL_eye_back_shrink_follow_grp.translateX = 0;}' + '\nif (System_R_eye_lower_jnt_grp.translateY>0){' + '\nR_eye_lacrimal_shrink_follow_grp.translateX = -System_R_eye_lower_jnt_grp.translateY/8*(R_eye_lower_ctrl.side_shrink_follow);' + '\nR_eye_back_shrink_follow_grp.translateX = -System_R_eye_lower_jnt_grp.translateY/8*(R_eye_lower_ctrl.side_shrink_follow);}' + '\nelse{' + '\nR_eye_lacrimal_shrink_follow_grp.translateX = 0;' + '\nR_eye_back_shrink_follow_grp.translateX = 0;}',
                ae=1, uc=all, alwaysEvaluate=0, n='Eye_Shrink_expression')
        if 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 0.3, n='L_eye_double_ctrl')
            cmds.group('L_eye_double_ctrl', n='L_eye_double_Ctrl_grp')
            cmds.pointConstraint('System_L_eye_double_jnt', 'L_eye_double_Ctrl_grp')
            cmds.delete('L_eye_double_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('L_eye_double_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.7 * self.ctrl_scale, 'L_eye_double_ctrl.cv[0:7]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.262 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_eye_double_ctrl.cv[4:6]', r=True)
            cmds.move(0 * self.ctrl_scale, 0.27 * self.ctrl_scale, 0 * self.ctrl_scale, 'L_eye_double_ctrl.cv[5]', r=True)
            cmds.select(clear=True)
            cmds.select('L_eye_double_ctrl')
            cmds.setAttr('L_eye_double_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('L_eye_double_ctrlShape.overrideColor', 13)
            cmds.group(em=True, n='L_SymGroup')
            cmds.parent('L_eye_double_Ctrl_grp', 'L_SymGroup')
            cmds.duplicate('L_SymGroup', n='R_SymGroup')
            cmds.setAttr('R_SymGroup.scaleX', -1)
            cmds.select('R_SymGroup', hi=True)
            mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
            cmds.parent('L_eye_double_Ctrl_grp', 'R_eye_double_Ctrl_grp', w=True)
            cmds.delete('L_SymGroup')
            cmds.delete('R_SymGroup')
            cmds.pointConstraint('System_R_eye_double_jnt', 'R_eye_double_Ctrl_grp')
            cmds.delete('R_eye_double_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('R_eye_double_Ctrl_grp', apply=True, t=True)
            cmds.group('System_L_eye_double_jnt', n='System_L_eye_double_jnt_grp')
            cmds.group('System_R_eye_double_jnt', n='System_R_eye_double_jnt_grp')
            cmds.group('System_L_eye_double_jnt_grp', n='System_L_eye_double_master_follow_grp')
            cmds.group('System_R_eye_double_jnt_grp', n='System_R_eye_double_master_follow_grp')
            cmds.parentConstraint('L_eye_double_ctrl', 'System_L_eye_double_jnt_grp', mo=True)
            cmds.scaleConstraint('L_eye_double_ctrl', 'System_L_eye_double_jnt_grp', mo=True)
            cmds.parentConstraint('R_eye_double_ctrl', 'System_R_eye_double_jnt_grp', mo=True)
            cmds.scaleConstraint('R_eye_double_ctrl', 'System_R_eye_double_jnt_grp', mo=True)
            cmds.parentConstraint('System_L_eye_double_master_follow_grp', 'L_eye_double_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_R_eye_double_master_follow_grp', 'R_eye_double_Ctrl_grp', mo=True)
            cmds.group('L_eye_double_ctrl', n='L_eye_double_eye_blink_follow_grp')
            cmds.group('R_eye_double_ctrl', n='R_eye_double_eye_blink_follow_grp')
            cmds.addAttr('L_eye_blink_ctrl', ln='Up_Eye_Double_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_blink_ctrl.Up_Eye_Double_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_blink_ctrl.Up_Eye_Double_follow', 1)
            cmds.addAttr('L_eye_blink_ctrl', ln='Down_Eye_Double_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_blink_ctrl.Down_Eye_Double_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_blink_ctrl.Down_Eye_Double_follow', 1)
            cmds.addAttr('R_eye_blink_ctrl', ln='Up_Eye_Double_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_blink_ctrl.Up_Eye_Double_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_blink_ctrl.Up_Eye_Double_follow', 1)
            cmds.addAttr('R_eye_blink_ctrl', ln='Down_Eye_Double_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_blink_ctrl.Down_Eye_Double_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_blink_ctrl.Down_Eye_Double_follow', 1)
            cmds.expression(
                s='\n//Eye_double Follow\n' + '\nif(System_L_eye_blink_jnt_grp.translateY>0){' + '\nL_eye_double_eye_blink_follow_grp.translateY = System_L_eye_blink_jnt_grp.translateY/3*(L_eye_blink_ctrl.Up_Eye_Double_follow);' + '\nL_eye_double_eye_blink_follow_grp.translateX = System_L_eye_blink_jnt_grp.translateX/4;}' + '\nelse{L_eye_double_eye_blink_follow_grp.translateY = System_L_eye_blink_jnt_grp.translateY/6*(L_eye_blink_ctrl.Down_Eye_Double_follow);' + '\nL_eye_double_eye_blink_follow_grp.translateX = System_L_eye_blink_jnt_grp.translateX/4;}' + '\nL_eye_double_eye_blink_follow_grp.translateZ = -System_L_eye_blink_jnt_grp.translateY/4*(L_eye_blink_ctrl.Up_Eye_Double_follow);' + '\nif(System_R_eye_blink_jnt_grp.translateY>0){' + '\nR_eye_double_eye_blink_follow_grp.translateY = System_R_eye_blink_jnt_grp.translateY/3*(R_eye_blink_ctrl.Up_Eye_Double_follow);' + '\nR_eye_double_eye_blink_follow_grp.translateX = -System_R_eye_blink_jnt_grp.translateX/4;}' + '\nelse{R_eye_double_eye_blink_follow_grp.translateY = System_R_eye_blink_jnt_grp.translateY/6*(R_eye_blink_ctrl.Down_Eye_Double_follow);' + '\nR_eye_double_eye_blink_follow_grp.translateX = -System_R_eye_blink_jnt_grp.translateX/4;}' + '\nR_eye_double_eye_blink_follow_grp.translateZ = -System_R_eye_blink_jnt_grp.translateY/4*(R_eye_blink_ctrl.Up_Eye_Double_follow);',
                ae=1, uc=all, alwaysEvaluate=0, n='Eye_double_expression')
        cmds.group(em=True, n='Eye_All_Ctrl_grp')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText():
            cmds.parent('*_eye_blink_Ctrl_grp', '*_eye_lower_Ctrl_grp', '*_eye_lacrimal_Ctrl_grp', '*_eye_back_Ctrl_grp', 'Eye_All_Ctrl_grp')
        elif 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.parent('*_eye_blink_Ctrl_grp', '*_eye_lower_Ctrl_grp', '*_eye_lacrimal_Ctrl_grp', '*_eye_back_Ctrl_grp', '*_eye_double_Ctrl_grp', 'Eye_All_Ctrl_grp')
            if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
                cmds.parent('*_eye_lacrimal_*_FK_Ctrl_grp', '*_eye_back_*_FK_Ctrl_grp', 'Eye_All_Ctrl_grp')
        else:
            cmds.parent('*_eye_blink_Ctrl_grp', 'Eye_All_Ctrl_grp')

    def brow_eye_connect_system(self):
        cmds.group('L_brow_master_ctrl', n='L_brow_master_eye_blink_follow_grp')
        cmds.group('R_brow_master_ctrl', n='R_brow_master_eye_blink_follow_grp')
        cmds.group('System_L_eye_blink_jnt', n='System_L_brow_master_eye_blink_follow_grp')
        if self.ui.EyeTargetCheckBox.isChecked() is True:
            cmds.parent('System_L_eye_blink_jnt', 'System_L_eye_blink_rotate_follow_grp')
        else:
            cmds.parent('System_L_eye_blink_jnt', 'System_L_eye_blink_jnt_grp')
        cmds.group('System_R_eye_blink_jnt', n='System_R_brow_master_eye_blink_follow_grp')
        if self.ui.EyeTargetCheckBox.isChecked() is True:
            cmds.parent('System_R_eye_blink_jnt', 'System_R_eye_blink_rotate_follow_grp')
        else:
            cmds.parent('System_R_eye_blink_jnt', 'System_R_eye_blink_jnt_grp')
        cmds.parent('System_L_brow_master_eye_blink_follow_grp', 'L_eye_blink_Ctrl_grp')
        cmds.pointConstraint('L_eye_blink_ctrl', 'System_L_brow_master_eye_blink_follow_grp', mo=True)
        cmds.parent('System_R_brow_master_eye_blink_follow_grp', 'R_eye_blink_Ctrl_grp')
        cmds.pointConstraint('R_eye_blink_ctrl', 'System_R_brow_master_eye_blink_follow_grp', mo=True)
        cmds.addAttr('L_eye_blink_ctrl', ln='Up_Brow_Master_follow', at='double', min=0, max=2)
        cmds.setAttr('L_eye_blink_ctrl.Up_Brow_Master_follow', e=1, keyable=True)
        cmds.setAttr('L_eye_blink_ctrl.Up_Brow_Master_follow', 0.5)
        cmds.addAttr('R_eye_blink_ctrl', ln='Up_Brow_Master_follow', at='double', min=0, max=2)
        cmds.setAttr('R_eye_blink_ctrl.Up_Brow_Master_follow', e=1, keyable=True)
        cmds.setAttr('R_eye_blink_ctrl.Up_Brow_Master_follow', 0.5)
        cmds.addAttr('L_eye_blink_ctrl', ln='Down_Brow_Master_follow', at='double', min=0, max=2)
        cmds.setAttr('L_eye_blink_ctrl.Down_Brow_Master_follow', e=1, keyable=True)
        cmds.setAttr('L_eye_blink_ctrl.Down_Brow_Master_follow', 0.3)
        cmds.addAttr('R_eye_blink_ctrl', ln='Down_Brow_Master_follow', at='double', min=0, max=2)
        cmds.setAttr('R_eye_blink_ctrl.Down_Brow_Master_follow', e=1, keyable=True)
        cmds.setAttr('R_eye_blink_ctrl.Down_Brow_Master_follow', 0.3)
        cmds.expression(
            s='\n//Brow_Master Follow\n' + '\nif(System_L_brow_master_eye_blink_follow_grp.translateY<0){' + '\nL_brow_master_eye_blink_follow_grp.translateY = System_L_brow_master_eye_blink_follow_grp.translateY/4*(L_eye_blink_ctrl.Down_Brow_Master_follow);}' + '\nelse{L_brow_master_eye_blink_follow_grp.translateY = System_L_brow_master_eye_blink_follow_grp.translateY/1.5*(L_eye_blink_ctrl.Up_Brow_Master_follow);}' + '\nif(System_R_brow_master_eye_blink_follow_grp.translateY<0){' + '\nR_brow_master_eye_blink_follow_grp.translateY = System_R_brow_master_eye_blink_follow_grp.translateY/4*(R_eye_blink_ctrl.Down_Brow_Master_follow);}' + '\nelse{R_brow_master_eye_blink_follow_grp.translateY = System_R_brow_master_eye_blink_follow_grp.translateY/1.5*(R_eye_blink_ctrl.Up_Brow_Master_follow);}',
            ae=1, uc=all, alwaysEvaluate=0, n='Brow_Master_expression')
        if 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('L_eye_double_ctrl', n='L_eye_double_brow_02_follow_grp')
            cmds.group('R_eye_double_ctrl', n='R_eye_double_brow_02_follow_grp')
            cmds.group(em=True, n='System_L_eye_double_brow_02_follow_grp')
            cmds.group(em=True, n='System_R_eye_double_brow_02_follow_grp')
            cmds.pointConstraint('System_L_eye_double_jnt', 'System_L_eye_double_brow_02_follow_grp')
            cmds.pointConstraint('System_R_eye_double_jnt', 'System_R_eye_double_brow_02_follow_grp')
            cmds.delete('System_L_eye_double_brow_02_follow_grp_pointConstraint1')
            cmds.delete('System_R_eye_double_brow_02_follow_grp_pointConstraint1')
            cmds.makeIdentity('System_L_eye_double_brow_02_follow_grp', t=True, apply=True)
            cmds.makeIdentity('System_R_eye_double_brow_02_follow_grp', t=True, apply=True)
            cmds.addAttr('L_brow_02_ctrl', ln='Eye_Double_follow', at='double', min=0, max=4)
            cmds.setAttr('L_brow_02_ctrl.Eye_Double_follow', e=1, keyable=True)
            cmds.setAttr('L_brow_02_ctrl.Eye_Double_follow', 1)
            cmds.addAttr('R_brow_02_ctrl', ln='Eye_Double_follow', at='double', min=0, max=4)
            cmds.setAttr('R_brow_02_ctrl.Eye_Double_follow', e=1, keyable=True)
            cmds.setAttr('R_brow_02_ctrl.Eye_Double_follow', 1)
            cmds.parentConstraint('L_brow_02_ctrl', 'System_L_eye_double_brow_02_follow_grp', mo=True)
            cmds.parentConstraint('R_brow_02_ctrl', 'System_R_eye_double_brow_02_follow_grp', mo=True)
            cmds.parent('System_L_eye_double_brow_02_follow_grp', 'L_brow_02_Ctrl_grp')
            cmds.parent('System_R_eye_double_brow_02_follow_grp', 'R_brow_02_Ctrl_grp')
            cmds.expression('Eye_double_expression', e=True,
                            s='\n//Eye_double Follow\n' + '\nif(System_L_eye_blink_jnt_grp.translateY>0){' + '\nL_eye_double_eye_blink_follow_grp.translateY = System_L_eye_blink_jnt_grp.translateY/3*(L_eye_blink_ctrl.Up_Eye_Double_follow);' + '\nL_eye_double_eye_blink_follow_grp.translateX = System_L_eye_blink_jnt_grp.translateX/4;}' + '\nelse{L_eye_double_eye_blink_follow_grp.translateY = System_L_eye_blink_jnt_grp.translateY/6*(L_eye_blink_ctrl.Down_Eye_Double_follow);' + '\nL_eye_double_eye_blink_follow_grp.translateX = System_L_eye_blink_jnt_grp.translateX/4;}' + '\nif(System_R_eye_blink_jnt_grp.translateY>0){' + '\nR_eye_double_eye_blink_follow_grp.translateY = System_R_eye_blink_jnt_grp.translateY/3*(R_eye_blink_ctrl.Up_Eye_Double_follow);' + '\nR_eye_double_eye_blink_follow_grp.translateX = -System_R_eye_blink_jnt_grp.translateX/4;}' + '\nelse{R_eye_double_eye_blink_follow_grp.translateY = System_R_eye_blink_jnt_grp.translateY/6*(R_eye_blink_ctrl.Down_Eye_Double_follow);' + '\nR_eye_double_eye_blink_follow_grp.translateX = -System_R_eye_blink_jnt_grp.translateX/4;}' + '\n//Eye_double Brow_02 Follow\n' + '\nL_eye_double_brow_02_follow_grp.translateY = System_L_eye_double_brow_02_follow_grp.translateY/2.5*(L_brow_02_ctrl.Eye_Double_follow);' + '\nR_eye_double_brow_02_follow_grp.translateY = System_R_eye_double_brow_02_follow_grp.translateY/2.5*(R_brow_02_ctrl.Eye_Double_follow);',
                            ae=1, uc=all, alwaysEvaluate=0)

    def cheek_eye_connect_system(self):
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            if 'Cheek 08 joint' == self.ui.CheekOption.currentText() or 'Cheek 12 joint' == self.ui.CheekOption.currentText():
                cmds.group('L_eye_lower_ctrl', n='L_eye_upper_cheek_follow_grp')
                cmds.group('System_L_upper_cheek_jnt', n='System_L_eye_upper_cheek_follow_grp')
                cmds.parent('System_L_upper_cheek_jnt', 'System_L_upper_cheek_jnt_grp')
                cmds.group('R_eye_lower_ctrl', n='R_eye_upper_cheek_follow_grp')
                cmds.group('System_R_upper_cheek_jnt', n='System_R_eye_upper_cheek_follow_grp')
                cmds.parent('System_R_upper_cheek_jnt', 'System_R_upper_cheek_jnt_grp')
                cmds.parent('System_L_eye_upper_cheek_follow_grp', 'L_upper_cheek_Ctrl_grp')
                cmds.parent('System_R_eye_upper_cheek_follow_grp', 'R_upper_cheek_Ctrl_grp')
                cmds.pointConstraint('L_upper_cheek_ctrl', 'System_L_eye_upper_cheek_follow_grp', mo=True)
                cmds.pointConstraint('R_upper_cheek_ctrl', 'System_R_eye_upper_cheek_follow_grp', mo=True)
                cmds.addAttr('L_upper_cheek_ctrl', ln='Eye_Lower_follow', at='double', min=0, max=2)
                cmds.setAttr('L_upper_cheek_ctrl.Eye_Lower_follow', e=1, keyable=True)
                cmds.setAttr('L_upper_cheek_ctrl.Eye_Lower_follow', 1)
                cmds.addAttr('R_upper_cheek_ctrl', ln='Eye_Lower_follow', at='double', min=0, max=2)
                cmds.setAttr('R_upper_cheek_ctrl.Eye_Lower_follow', e=1, keyable=True)
                cmds.setAttr('R_upper_cheek_ctrl.Eye_Lower_follow', 1)
            if 'Cheek 12 joint' == self.ui.CheekOption.currentText():
                cmds.group('L_outer_orbicularis_cheek_FK_ctrl', n='L_outer_orbicularis_cheek_FK_eye_lower_follow_grp')
                cmds.group('L_inner_orbicularis_cheek_FK_ctrl', n='L_inner_orbicularis_cheek_FK_eye_lower_follow_grp')
                cmds.group('R_outer_orbicularis_cheek_FK_ctrl', n='R_outer_orbicularis_cheek_FK_eye_lower_follow_grp')
                cmds.group('R_inner_orbicularis_cheek_FK_ctrl', n='R_inner_orbicularis_cheek_FK_eye_lower_follow_grp')
                cmds.addAttr('L_eye_lower_ctrl', ln='Orbicularis_cheek_follow', at='double', min=0, max=4)
                cmds.setAttr('L_eye_lower_ctrl.Orbicularis_cheek_follow', e=1, keyable=True)
                cmds.setAttr('L_eye_lower_ctrl.Orbicularis_cheek_follow', 1)
                cmds.addAttr('R_eye_lower_ctrl', ln='Orbicularis_cheek_follow', at='double', min=0, max=4)
                cmds.setAttr('R_eye_lower_ctrl.Orbicularis_cheek_follow', e=1, keyable=True)
                cmds.setAttr('R_eye_lower_ctrl.Orbicularis_cheek_follow', 1)
            if 'Cheek 08 joint' == self.ui.CheekOption.currentText():
                cmds.expression(
                    s='\n//Eye_upper_cheek Follow\n' + '\nif(System_L_eye_upper_cheek_follow_grp.translateY>0){' + '\nL_eye_upper_cheek_follow_grp.translateY = System_L_eye_upper_cheek_follow_grp.translateY/3*(L_upper_cheek_ctrl.Eye_Lower_follow);}' + '\nelse{L_eye_upper_cheek_follow_grp.translateY = 0;}' + '\nif(System_R_eye_upper_cheek_follow_grp.translateY>0){' + '\nR_eye_upper_cheek_follow_grp.translateY = System_R_eye_upper_cheek_follow_grp.translateY/3*(R_upper_cheek_ctrl.Eye_Lower_follow);}' + '\nelse{R_eye_upper_cheek_follow_grp.translateY = 0;}',
                    ae=1, uc=all, alwaysEvaluate=0, n='Eye_upper_cheek_expression')
            elif 'Cheek 12 joint' == self.ui.CheekOption.currentText():
                cmds.expression(
                    s='\n//Eye_upper_cheek Follow\n' + '\nif(System_L_eye_upper_cheek_follow_grp.translateY>0){' + '\nL_eye_upper_cheek_follow_grp.translateY = System_L_eye_upper_cheek_follow_grp.translateY/3*(L_upper_cheek_ctrl.Eye_Lower_follow);}' + '\nelse{L_eye_upper_cheek_follow_grp.translateY = 0;}' + '\nif(System_R_eye_upper_cheek_follow_grp.translateY>0){' + '\nR_eye_upper_cheek_follow_grp.translateY = System_R_eye_upper_cheek_follow_grp.translateY/3*(R_upper_cheek_ctrl.Eye_Lower_follow);}' + '\nelse{R_eye_upper_cheek_follow_grp.translateY = 0;}' + '\n//Orbicularis_cheek Eye lower Follow\n' + '\nL_outer_orbicularis_cheek_FK_eye_lower_follow_grp.translateX = -(L_eye_lower_ctrl.translateY/3+L_eye_lower_blink_follow_grp.translateY/3+L_eye_lower_eye_target_follow_grp.translateY/3+L_eye_lower_blink_side_follow_grp.translateY/3)*(L_eye_lower_ctrl.Orbicularis_cheek_follow);' + '\nL_outer_orbicularis_cheek_FK_eye_lower_follow_grp.translateY = (L_eye_lower_ctrl.translateY/3+L_eye_lower_blink_follow_grp.translateY/3+L_eye_lower_eye_target_follow_grp.translateY/3+L_eye_lower_blink_side_follow_grp.translateY/3)*(L_eye_lower_ctrl.Orbicularis_cheek_follow);' + '\nL_inner_orbicularis_cheek_FK_eye_lower_follow_grp.translateY = (L_eye_lower_ctrl.translateY/3+L_eye_lower_blink_follow_grp.translateY/3+L_eye_lower_eye_target_follow_grp.translateY/3+L_eye_lower_blink_side_follow_grp.translateY/3)*(L_eye_lower_ctrl.Orbicularis_cheek_follow);' + '\nR_outer_orbicularis_cheek_FK_eye_lower_follow_grp.translateX = -(R_eye_lower_ctrl.translateY/3+R_eye_lower_blink_follow_grp.translateY/3+R_eye_lower_eye_target_follow_grp.translateY/3+R_eye_lower_blink_side_follow_grp.translateY/3)*(R_eye_lower_ctrl.Orbicularis_cheek_follow);' + '\nR_outer_orbicularis_cheek_FK_eye_lower_follow_grp.translateY = (R_eye_lower_ctrl.translateY/3+R_eye_lower_blink_follow_grp.translateY/3+R_eye_lower_eye_target_follow_grp.translateY/3+R_eye_lower_blink_side_follow_grp.translateY/3)*(R_eye_lower_ctrl.Orbicularis_cheek_follow);' + '\nR_inner_orbicularis_cheek_FK_eye_lower_follow_grp.translateY = (R_eye_lower_ctrl.translateY/3+R_eye_lower_blink_follow_grp.translateY/3+R_eye_lower_eye_target_follow_grp.translateY/3+R_eye_lower_blink_side_follow_grp.translateY/3)*(R_eye_lower_ctrl.Orbicularis_cheek_follow);',
                    ae=1, uc=all, alwaysEvaluate=0, n='Eye_upper_cheek_expression')

    def eye_target_system(self):
        cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 3, n='L_eye_target_ctrl')
        cmds.group('L_eye_target_ctrl', n='L_eye_target_Ctrl_grp')
        cmds.pointConstraint('System_L_eye_ball_jnt', 'L_eye_target_Ctrl_grp')
        cmds.delete('L_eye_target_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('L_eye_target_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 20 * self.ctrl_scale, 'L_eye_target_ctrl.cv[0:7]', r=True)
        cmds.select(clear=True)
        cmds.select('L_eye_target_ctrl')
        cmds.xform(cp=True)
        cmds.setAttr('L_eye_target_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('L_eye_target_ctrlShape.overrideColor', 23)
        cmds.group(em=True, n='L_SymGroup')
        cmds.parent('L_eye_target_Ctrl_grp', 'L_SymGroup')
        cmds.duplicate('L_SymGroup', n='R_SymGroup')
        cmds.setAttr('R_SymGroup.scaleX', -1)
        cmds.select('R_SymGroup', hi=True)
        mel.eval('searchReplaceNames "L_" "R_" "hierarchy"')
        cmds.parent('L_eye_target_Ctrl_grp', 'R_eye_target_Ctrl_grp', w=True)
        cmds.makeIdentity('R_eye_target_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.delete('L_SymGroup')
        cmds.delete('R_SymGroup')
        cmds.setAttr('R_eye_target_ctrlShape.overrideColor', 29)
        cmds.group('System_L_eye_ball_jnt', n='System_L_eye_ball_jnt_grp')
        cmds.group('System_R_eye_ball_jnt', n='System_R_eye_ball_jnt_grp')
        cmds.aimConstraint('L_eye_target_ctrl', 'System_L_eye_ball_jnt_grp', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
        cmds.setAttr('System_L_eye_ball_jnt_grp.rotateOrder', 4)
        cmds.aimConstraint('R_eye_target_ctrl', 'System_R_eye_ball_jnt_grp', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
        cmds.setAttr('System_R_eye_ball_jnt_grp.rotateOrder', 4)
        cmds.nurbsSquare(nr=(0, 0, 1), c=(0, 0, 0), n='Eye_target_Master_ctrl')
        cmds.select('topEye_target_Master_ctrlShape', 'leftEye_target_Master_ctrlShape', 'bottomEye_target_Master_ctrlShape', 'rightEye_target_Master_ctrlShape', 'Eye_target_Master_ctrl', add=True)
        mel.eval('parent -r -s')
        cmds.delete('topEye_target_Master_ctrl', 'leftEye_target_Master_ctrl', 'bottomEye_target_Master_ctrl', 'rightEye_target_Master_ctrl')
        cmds.select('Eye_target_Master_ctrl')
        cmds.scale(13.8 * self.ctrl_scale, 6.6 * self.ctrl_scale, 13.8 * self.ctrl_scale, r=True)
        cmds.group('Eye_target_Master_ctrl', n='Eye_target_Master_Ctrl_grp')
        A = cmds.getAttr('System_L_eye_ball_jnt.translateX')
        B = cmds.getAttr('System_R_eye_ball_jnt.translateX')
        cmds.pointConstraint('System_R_eye_ball_jnt', 'Eye_target_Master_Ctrl_grp')
        cmds.delete('Eye_target_Master_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('Eye_target_Master_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.setAttr('Eye_target_Master_Ctrl_grp.translateX', (A - B) / 2)
        cmds.setAttr('Eye_target_Master_Ctrl_grp.translateZ', 20 * self.ctrl_scale)
        cmds.makeIdentity('Eye_target_Master_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.select(clear=True)
        cmds.select('Eye_target_Master_Ctrl_grp', 'Eye_target_Master_ctrl', add=True)
        cmds.xform(cp=True)
        cmds.setAttr('topEye_target_Master_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('leftEye_target_Master_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('bottomEye_target_Master_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('rightEye_target_Master_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('topEye_target_Master_ctrlShape.overrideColor', 31)
        cmds.setAttr('leftEye_target_Master_ctrlShape.overrideColor', 31)
        cmds.setAttr('bottomEye_target_Master_ctrlShape.overrideColor', 31)
        cmds.setAttr('rightEye_target_Master_ctrlShape.overrideColor', 31)
        cmds.parent('L_eye_target_Ctrl_grp', 'R_eye_target_Ctrl_grp', 'Eye_target_Master_ctrl')
        cmds.parentConstraint('System_Head_master_jnt', 'Eye_target_Master_Ctrl_grp', mo=True)
        cmds.group('Eye_target_Master_Ctrl_grp', n='Eye_target_All_Ctrl_grp')
        cmds.select('Eye_target_Master_ctrl')
        cmds.transformLimits(tx=(-17 * self.ctrl_scale, 17 * self.ctrl_scale),
                             ty=(-10 * self.ctrl_scale, 10 * self.ctrl_scale),
                             tz=(-1 * self.ctrl_scale, 1 * self.ctrl_scale))
        cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
        cmds.select('L_eye_target_ctrl')
        cmds.transformLimits(tx=(-17 * self.ctrl_scale, 17 * self.ctrl_scale),
                             ty=(-10 * self.ctrl_scale, 10 * self.ctrl_scale),
                             tz=(-1 * self.ctrl_scale, 1 * self.ctrl_scale))
        cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
        cmds.select('R_eye_target_ctrl')
        cmds.transformLimits(tx=(-17 * self.ctrl_scale, 17 * self.ctrl_scale),
                             ty=(-10 * self.ctrl_scale, 10 * self.ctrl_scale),
                             tz=(-1 * self.ctrl_scale, 1 * self.ctrl_scale))
        cmds.transformLimits(etx=(True, True), ety=(True, True), etz=(True, True))
        cmds.setAttr('Eye_target_Master_ctrl.rx', keyable=False)
        cmds.setAttr('Eye_target_Master_ctrl.ry', keyable=False)
        cmds.setAttr('Eye_target_Master_ctrl.rz', keyable=False)
        cmds.group('Eye_target_Master_ctrl', n='Eye_target_World_point_follow_grp')
        cmds.spaceLocator(n='Eye_World_point_loc')
        cmds.pointConstraint('Eye_target_Master_ctrl', 'Eye_World_point_loc')
        cmds.delete('Eye_World_point_loc_pointConstraint1')
        cmds.makeIdentity('Eye_World_point_loc', apply=True, t=True, r=True, scale=True)
        cmds.group('Eye_World_point_loc', n='Eye_World_point_Loc_grp')
        cmds.orientConstraint('Eye_target_Master_Ctrl_grp', 'Eye_World_point_Loc_grp', mo=True)
        cmds.scale(self.ctrl_scale, self.ctrl_scale, self.ctrl_scale, 'Eye_World_point_loc')
        cmds.setAttr('Eye_World_point_locShape.overrideEnabled', 1)
        cmds.setAttr('Eye_World_point_locShape.overrideColor', 17)
        cmds.setAttr('Eye_World_point_loc.rx', keyable=False)
        cmds.setAttr('Eye_World_point_loc.ry', keyable=False)
        cmds.setAttr('Eye_World_point_loc.rz', keyable=False)
        cmds.setAttr('Eye_World_point_loc.sx', keyable=False)
        cmds.setAttr('Eye_World_point_loc.sy', keyable=False)
        cmds.setAttr('Eye_World_point_loc.sz', keyable=False)
        cmds.group(em=True, n='System_Eye_target_World_point_follow_grp')
        cmds.parent('System_Eye_target_World_point_follow_grp', 'Eye_World_point_Loc_grp')
        cmds.group('Eye_World_point_loc', n='System_Eye_World_point_follow_grp')
        cmds.spaceLocator(n='L_Eye_World_point_ctrl')
        cmds.pointConstraint('L_eye_target_ctrl', 'L_Eye_World_point_ctrl')
        cmds.delete('L_Eye_World_point_ctrl_pointConstraint1')
        cmds.makeIdentity('L_Eye_World_point_ctrl', apply=True, t=True, r=True, scale=True)
        cmds.group('L_Eye_World_point_ctrl', n='L_Eye_World_point_ctrl_grp')
        cmds.scale(self.ctrl_scale * 0.6, self.ctrl_scale * 0.6, self.ctrl_scale * 0.6, 'L_Eye_World_point_ctrl_grp')
        cmds.setAttr('L_Eye_World_point_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('L_Eye_World_point_ctrlShape.overrideColor', 17)
        cmds.setAttr('L_Eye_World_point_ctrl.rx', keyable=False)
        cmds.setAttr('L_Eye_World_point_ctrl.ry', keyable=False)
        cmds.setAttr('L_Eye_World_point_ctrl.rz', keyable=False)
        cmds.setAttr('L_Eye_World_point_ctrl.sx', keyable=False)
        cmds.setAttr('L_Eye_World_point_ctrl.sy', keyable=False)
        cmds.setAttr('L_Eye_World_point_ctrl.sz', keyable=False)
        cmds.parent('L_Eye_World_point_ctrl_grp', 'System_Eye_World_point_follow_grp')
        cmds.spaceLocator(n='R_Eye_World_point_ctrl')
        cmds.pointConstraint('R_eye_target_ctrl', 'R_Eye_World_point_ctrl')
        cmds.delete('R_Eye_World_point_ctrl_pointConstraint1')
        cmds.makeIdentity('R_Eye_World_point_ctrl', apply=True, t=True, r=True, scale=True)
        cmds.group('R_Eye_World_point_ctrl', n='R_Eye_World_point_ctrl_grp')
        cmds.scale(self.ctrl_scale * 0.6, self.ctrl_scale * 0.6, self.ctrl_scale * 0.6, 'R_Eye_World_point_ctrl_grp')
        cmds.setAttr('R_Eye_World_point_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('R_Eye_World_point_ctrlShape.overrideColor', 17)
        cmds.setAttr('R_Eye_World_point_ctrl.rx', keyable=False)
        cmds.setAttr('R_Eye_World_point_ctrl.ry', keyable=False)
        cmds.setAttr('R_Eye_World_point_ctrl.rz', keyable=False)
        cmds.setAttr('R_Eye_World_point_ctrl.sx', keyable=False)
        cmds.setAttr('R_Eye_World_point_ctrl.sy', keyable=False)
        cmds.setAttr('R_Eye_World_point_ctrl.sz', keyable=False)
        cmds.parent('R_Eye_World_point_ctrl_grp', 'System_Eye_World_point_follow_grp')
        cmds.addAttr('Eye_target_Master_ctrl', ln='Target_World', at='double', min=0, max=1)
        cmds.setAttr('Eye_target_Master_ctrl.Target_World', e=1, keyable=True)
        cmds.setAttr('Eye_target_Master_ctrl.Target_World', 0)
        cmds.setAttr('Eye_World_point_Loc_grp.inheritsTransform', 0)
        cmds.aimConstraint('L_Eye_World_point_ctrl', 'System_L_eye_ball_jnt_grp', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
        cmds.aimConstraint('R_Eye_World_point_ctrl', 'System_R_eye_ball_jnt_grp', mo=True, wu=(0, 0, 0), aim=(0, 0, 1), u=(0, 1, 0))
        cmds.expression(
            s='\n//EyeTarget World Follow\n' + '\nSystem_L_eye_ball_jnt_grp_aimConstraint1.L_eye_target_ctrlW0 = 1-(Eye_target_Master_ctrl.Target_World);\n' + '\nSystem_R_eye_ball_jnt_grp_aimConstraint1.R_eye_target_ctrlW0 = 1-(Eye_target_Master_ctrl.Target_World);\n' + '\nSystem_L_eye_ball_jnt_grp_aimConstraint1.L_Eye_World_point_ctrlW1 = (Eye_target_Master_ctrl.Target_World);\n' + '\nSystem_R_eye_ball_jnt_grp_aimConstraint1.R_Eye_World_point_ctrlW1 = (Eye_target_Master_ctrl.Target_World);\n',
            ae=1, uc=all, alwaysEvaluate=0, n='EyeTarget_World_expression')

    def eye_eye_target_connect_system(self):
        cmds.group('L_eye_blink_ctrl', n='L_eye_blink_eye_target_follow_grp')
        cmds.group('R_eye_blink_ctrl', n='R_eye_blink_eye_target_follow_grp')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('L_eye_lower_ctrl', n='L_eye_lower_eye_target_follow_grp')
            cmds.group('R_eye_lower_ctrl', n='R_eye_lower_eye_target_follow_grp')
        cmds.group('L_eye_target_ctrl', n='System_L_eye_eye_target_follow_grp')
        cmds.group('R_eye_target_ctrl', n='System_R_eye_eye_target_follow_grp')
        cmds.parent('L_eye_target_ctrl', 'L_eye_target_Ctrl_grp')
        cmds.parent('R_eye_target_ctrl', 'R_eye_target_Ctrl_grp')
        cmds.parent('System_L_eye_eye_target_follow_grp', 'System_R_eye_eye_target_follow_grp', 'Eye_target_Master_Ctrl_grp')
        cmds.pointConstraint('L_eye_target_ctrl', 'System_L_eye_eye_target_follow_grp', mo=True)
        cmds.pointConstraint('R_eye_target_ctrl', 'System_R_eye_eye_target_follow_grp', mo=True)
        cmds.pointConstraint('L_Eye_World_point_ctrl', 'System_L_eye_eye_target_follow_grp', mo=True)
        cmds.pointConstraint('R_Eye_World_point_ctrl', 'System_R_eye_eye_target_follow_grp', mo=True)
        cmds.parentConstraint('Eye_World_point_loc', 'L_Eye_World_point_ctrl_grp', mo=True)
        cmds.parentConstraint('Eye_World_point_loc', 'R_Eye_World_point_ctrl_grp', mo=True)
        if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('L_eye_lacrimal_upper_FK_ctrl', n='L_eye_lacrimal_upper_FK_blink_system_grp')
            cmds.group('L_eye_back_upper_FK_ctrl', n='L_eye_back_upper_FK_blink_system_grp')
            cmds.group('L_eye_lacrimal_lower_FK_ctrl', n='L_eye_lacrimal_lower_FK_blink_system_grp')
            cmds.group('L_eye_back_lower_FK_ctrl', n='L_eye_back_lower_FK_blink_system_grp')
            cmds.group('R_eye_lacrimal_upper_FK_ctrl', n='R_eye_lacrimal_upper_FK_blink_system_grp')
            cmds.group('R_eye_back_upper_FK_ctrl', n='R_eye_back_upper_FK_blink_system_grp')
            cmds.group('R_eye_lacrimal_lower_FK_ctrl', n='R_eye_lacrimal_lower_FK_blink_system_grp')
            cmds.group('R_eye_back_lower_FK_ctrl', n='R_eye_back_lower_FK_blink_system_grp')
        cmds.addAttr('L_eye_target_ctrl', ln='Blink', at='double', min=0, max=1)
        cmds.setAttr('L_eye_target_ctrl.Blink', e=1, keyable=True)
        cmds.addAttr('R_eye_target_ctrl', ln='Blink', at='double', min=0, max=1)
        cmds.setAttr('R_eye_target_ctrl.Blink', e=1, keyable=True)
        cmds.group('L_eye_blink_ctrl', n='L_eye_blink_blink_follow_grp')
        cmds.group('R_eye_blink_ctrl', n='R_eye_blink_blink_follow_grp')
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('L_eye_lower_ctrl', n='L_eye_lower_blink_follow_grp')
            cmds.group('R_eye_lower_ctrl', n='R_eye_lower_blink_follow_grp')
            cmds.addAttr('L_eye_target_ctrl', ln='Blink_Side', at='double', min=-1, max=1)
            cmds.setAttr('L_eye_target_ctrl.Blink_Side', e=1, keyable=True)
            cmds.addAttr('R_eye_target_ctrl', ln='Blink_Side', at='double', min=-1, max=1)
            cmds.setAttr('R_eye_target_ctrl.Blink_Side', e=1, keyable=True)
            cmds.group('L_eye_blink_ctrl', n='L_eye_blink_blink_side_follow_grp')
            cmds.group('R_eye_blink_ctrl', n='R_eye_blink_blink_side_follow_grp')
            cmds.group('L_eye_lower_ctrl', n='L_eye_lower_blink_side_follow_grp')
            cmds.group('R_eye_lower_ctrl', n='R_eye_lower_blink_side_follow_grp')
        cmds.addAttr('L_eye_target_ctrl', ln='Eyelid_up_follow', at='double', min=0, max=3)
        cmds.setAttr('L_eye_target_ctrl.Eyelid_up_follow', e=1, keyable=True)
        cmds.setAttr('L_eye_target_ctrl.Eyelid_up_follow', 0.4)
        cmds.addAttr('R_eye_target_ctrl', ln='Eyelid_up_follow', at='double', min=0, max=3)
        cmds.setAttr('R_eye_target_ctrl.Eyelid_up_follow', e=1, keyable=True)
        cmds.setAttr('R_eye_target_ctrl.Eyelid_up_follow', 0.4)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.addAttr('L_eye_target_ctrl', ln='Eyelid_down_follow', at='double', min=0, max=3)
            cmds.setAttr('L_eye_target_ctrl.Eyelid_down_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_target_ctrl.Eyelid_down_follow', 0.4)
            cmds.addAttr('R_eye_target_ctrl', ln='Eyelid_down_follow', at='double', min=0, max=3)
            cmds.setAttr('R_eye_target_ctrl.Eyelid_down_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_target_ctrl.Eyelid_down_follow', 0.4)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.group('L_eye_back_ctrl', n='L_eye_back_eye_target_follow_grp')
            cmds.group('R_eye_back_ctrl', n='R_eye_back_eye_target_follow_grp')
            cmds.group('L_eye_lacrimal_ctrl', n='L_eye_lacrimal_eye_target_follow_grp')
            cmds.group('R_eye_lacrimal_ctrl', n='R_eye_lacrimal_eye_target_follow_grp')
            cmds.addAttr('L_eye_target_ctrl', ln='Eyelid_side_follow', at='double', min=0, max=2)
            cmds.setAttr('L_eye_target_ctrl.Eyelid_side_follow', e=1, keyable=True)
            cmds.setAttr('L_eye_target_ctrl.Eyelid_side_follow', 1)
            cmds.addAttr('R_eye_target_ctrl', ln='Eyelid_side_follow', at='double', min=0, max=2)
            cmds.setAttr('R_eye_target_ctrl.Eyelid_side_follow', e=1, keyable=True)
            cmds.setAttr('R_eye_target_ctrl.Eyelid_side_follow', 1)
        if 'Eye 08 joint' == self.ui.EyeOption.currentText() or 'Eye 08 joint (D eyelid)' == self.ui.EyeOption.currentText() or 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//EyeLid Follow\n' + '\nif(System_L_eye_ball_jnt_grp.rotateY>-40){' + '\nL_eye_blink_eye_target_follow_grp.translateX = System_L_eye_ball_jnt_grp.rotateY/40*(L_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}\n' + '\nif((System_L_eye_ball_jnt_grp.rotateX>-40)&&(System_L_eye_ball_jnt_grp.rotateX<40)){' + '\nif(System_L_eye_eye_target_follow_grp.translateY<0){' + '\nL_eye_blink_eye_target_follow_grp.translateY = -System_L_eye_ball_jnt_grp.rotateX/13*(L_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}' + '\nelse{L_eye_blink_eye_target_follow_grp.translateY = (-System_L_eye_ball_jnt_grp.rotateX/30*(L_eye_target_ctrl.Eyelid_up_follow*$sumXYZ))*(1-L_eye_target_ctrl.Blink);}}\n' + '\nif(System_L_eye_ball_jnt_grp.rotateY>-40){' + '\nL_eye_lower_eye_target_follow_grp.translateX = System_L_eye_ball_jnt_grp.rotateY/40*(L_eye_target_ctrl.Eyelid_down_follow*$sumXYZ);}\n' + '\nif((System_L_eye_ball_jnt_grp.rotateX>-40)&&(System_L_eye_ball_jnt_grp.rotateX<40)){' + '\nif(System_L_eye_eye_target_follow_grp.translateY<0){' + '\nL_eye_lower_eye_target_follow_grp.translateY = -System_L_eye_ball_jnt_grp.rotateX/15*(L_eye_target_ctrl.Eyelid_down_follow*$sumXYZ);}' + '\nelse{L_eye_lower_eye_target_follow_grp.translateY = (-System_L_eye_ball_jnt_grp.rotateX/60*(L_eye_target_ctrl.Eyelid_down_follow*$sumXYZ))*(1-L_eye_target_ctrl.Blink);}}\n' + '\nif((System_R_eye_ball_jnt_grp.rotateY<38)&&(System_R_eye_ball_jnt_grp.rotateY>-40)){' + '\nR_eye_blink_eye_target_follow_grp.translateX = -System_R_eye_ball_jnt_grp.rotateY/40*(R_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}\n' + '\nif((System_R_eye_ball_jnt_grp.rotateX<38)&&(System_R_eye_ball_jnt_grp.rotateX>-40)){' + '\nif(System_R_eye_eye_target_follow_grp.translateY<0){' + '\nR_eye_blink_eye_target_follow_grp.translateY = -System_R_eye_ball_jnt_grp.rotateX/13*(R_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}' + '\nelse{R_eye_blink_eye_target_follow_grp.translateY = (-System_R_eye_ball_jnt_grp.rotateX/30*(R_eye_target_ctrl.Eyelid_up_follow*$sumXYZ))*(1-R_eye_target_ctrl.Blink);}}\n' + '\nif((System_R_eye_ball_jnt_grp.rotateY<38)&&(System_R_eye_ball_jnt_grp.rotateY>-40)){' + '\nR_eye_lower_eye_target_follow_grp.translateX = -System_R_eye_ball_jnt_grp.rotateY/40*(R_eye_target_ctrl.Eyelid_down_follow*$sumXYZ);}\n' + '\nif((System_R_eye_ball_jnt_grp.rotateX<38)&&(System_R_eye_ball_jnt_grp.rotateX>-40)){' + '\nif(System_R_eye_eye_target_follow_grp.translateY<0){' + '\nR_eye_lower_eye_target_follow_grp.translateY = -System_R_eye_ball_jnt_grp.rotateX/15*(R_eye_target_ctrl.Eyelid_down_follow*$sumXYZ);}' + '\nelse{R_eye_lower_eye_target_follow_grp.translateY = (-System_R_eye_ball_jnt_grp.rotateX/60*(R_eye_target_ctrl.Eyelid_down_follow*$sumXYZ))*(1-R_eye_target_ctrl.Blink);}}' + '\n//EyeBlink_Attribute\n' + '\nL_eye_blink_blink_follow_grp.translateY = -((System_L_eye_blink_jnt.translateY+L_eye_blink_ctrl.translateY-L_eye_lacrimal_ctrl.translateY/4) - (System_L_eye_lower_jnt.translateY+L_eye_lower_ctrl.translateY+L_eye_back_ctrl.translateY/4))*0.85*(L_eye_target_ctrl.Blink);\n' + '\nL_eye_lower_blink_follow_grp.translateY = ((System_L_eye_blink_jnt.translateY+L_eye_blink_ctrl.translateY-L_eye_lacrimal_ctrl.translateY/2) - (System_L_eye_lower_jnt.translateY+L_eye_lower_ctrl.translateY+L_eye_back_ctrl.translateY/2))*0.2*(L_eye_target_ctrl.Blink);\n' + '\nR_eye_blink_blink_follow_grp.translateY = -((System_R_eye_blink_jnt.translateY+R_eye_blink_ctrl.translateY-R_eye_lacrimal_ctrl.translateY/4) - (System_R_eye_lower_jnt.translateY+R_eye_lower_ctrl.translateY+R_eye_back_ctrl.translateY/4))*0.85*(R_eye_target_ctrl.Blink);\n' + '\nR_eye_lower_blink_follow_grp.translateY = ((System_R_eye_blink_jnt.translateY+R_eye_blink_ctrl.translateY-R_eye_lacrimal_ctrl.translateY/2) - (System_R_eye_lower_jnt.translateY+R_eye_lower_ctrl.translateY+R_eye_back_ctrl.translateY/2))*0.2*(R_eye_target_ctrl.Blink);\n' + '\n//EyeBlink_Side_Attribute\n' + '\nL_eye_blink_blink_side_follow_grp.translateY = L_eye_target_ctrl.Blink_Side*(L_eye_target_ctrl.Blink)*$sumXYZ;\n' + '\nL_eye_lower_blink_side_follow_grp.translateY = L_eye_target_ctrl.Blink_Side*(L_eye_target_ctrl.Blink)*$sumXYZ;\n' + '\nR_eye_blink_blink_side_follow_grp.translateY = R_eye_target_ctrl.Blink_Side*(R_eye_target_ctrl.Blink)*$sumXYZ;\n' + '\nR_eye_lower_blink_side_follow_grp.translateY = R_eye_target_ctrl.Blink_Side*(R_eye_target_ctrl.Blink)*$sumXYZ;\n' + '\n//Eye_lacrimal & back target follow System\n' + '\nL_eye_back_eye_target_follow_grp.translateX = (L_eye_blink_eye_target_follow_grp.translateX+L_eye_lower_eye_target_follow_grp.translateX)/8*(L_eye_target_ctrl.Eyelid_side_follow);\n' + '\nL_eye_back_eye_target_follow_grp.translateY = (L_eye_blink_eye_target_follow_grp.translateY+L_eye_lower_eye_target_follow_grp.translateY)/12*(L_eye_target_ctrl.Eyelid_side_follow);\n' + '\nL_eye_back_eye_target_follow_grp.translateZ = -(L_eye_blink_eye_target_follow_grp.translateX+L_eye_lower_eye_target_follow_grp.translateX)/1.5*(L_eye_target_ctrl.Eyelid_side_follow);\n' + '\nR_eye_back_eye_target_follow_grp.translateX = (R_eye_blink_eye_target_follow_grp.translateX+R_eye_lower_eye_target_follow_grp.translateX)/8*(R_eye_target_ctrl.Eyelid_side_follow);\n' + '\nR_eye_back_eye_target_follow_grp.translateY = (R_eye_blink_eye_target_follow_grp.translateY+R_eye_lower_eye_target_follow_grp.translateY)/12*(R_eye_target_ctrl.Eyelid_side_follow);\n' + '\nR_eye_back_eye_target_follow_grp.translateZ = -(R_eye_blink_eye_target_follow_grp.translateX+R_eye_lower_eye_target_follow_grp.translateX)/1.5*(R_eye_target_ctrl.Eyelid_side_follow);\n' + '\nL_eye_lacrimal_eye_target_follow_grp.translateX = (L_eye_blink_eye_target_follow_grp.translateX+L_eye_lower_eye_target_follow_grp.translateX)/4*(L_eye_target_ctrl.Eyelid_side_follow);\n' + '\nL_eye_lacrimal_eye_target_follow_grp.translateY = (L_eye_blink_eye_target_follow_grp.translateY+L_eye_lower_eye_target_follow_grp.translateY)/12*(L_eye_target_ctrl.Eyelid_side_follow);\n' + '\nL_eye_lacrimal_eye_target_follow_grp.translateZ = (L_eye_blink_eye_target_follow_grp.translateX+L_eye_lower_eye_target_follow_grp.translateX)/4*(L_eye_target_ctrl.Eyelid_side_follow);\n' + '\nR_eye_lacrimal_eye_target_follow_grp.translateX = (R_eye_blink_eye_target_follow_grp.translateX+R_eye_lower_eye_target_follow_grp.translateX)/4*(R_eye_target_ctrl.Eyelid_side_follow);\n' + '\nR_eye_lacrimal_eye_target_follow_grp.translateY = (R_eye_blink_eye_target_follow_grp.translateY+R_eye_lower_eye_target_follow_grp.translateY)/12*(R_eye_target_ctrl.Eyelid_side_follow);\n' + '\nR_eye_lacrimal_eye_target_follow_grp.translateZ = (R_eye_blink_eye_target_follow_grp.translateX+R_eye_lower_eye_target_follow_grp.translateX)/4*(R_eye_target_ctrl.Eyelid_side_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='EyeLid_Blink_expression')
        if 'Eye 02 joint' == self.ui.EyeOption.currentText():
            cmds.expression(
                s='float $sX = scale_check_grp.scaleX;float $sY = scale_check_grp.scaleY;float $sZ = scale_check_grp.scaleZ;float $sumXYZ = ($sX + $sY + $sZ)/3;' + '\n//EyeLid Follow\n' + '\nif(System_L_eye_ball_jnt_grp.rotateY>-40){' + '\nL_eye_blink_eye_target_follow_grp.translateX = System_L_eye_ball_jnt_grp.rotateY/40*(L_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}\n' + '\nif((System_L_eye_ball_jnt_grp.rotateX>-40)&&(System_L_eye_ball_jnt_grp.rotateX<40)){' + '\nif(System_L_eye_eye_target_follow_grp.translateY<0){' + '\nL_eye_blink_eye_target_follow_grp.translateY = -System_L_eye_ball_jnt_grp.rotateX/30*(L_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}' + '\nelse{L_eye_blink_eye_target_follow_grp.translateY = (-System_L_eye_ball_jnt_grp.rotateX/14*(L_eye_target_ctrl.Eyelid_up_follow*$sumXYZ))*(1-L_eye_target_ctrl.Blink);}}\n' + '\nif((System_R_eye_ball_jnt_grp.rotateY<38)&&(System_R_eye_ball_jnt_grp.rotateY>-40)){' + '\nR_eye_blink_eye_target_follow_grp.translateX = -System_R_eye_ball_jnt_grp.rotateY/40*(R_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}\n' + '\nif((System_R_eye_ball_jnt_grp.rotateX<38)&&(System_R_eye_ball_jnt_grp.rotateX>-40)){' + '\nif(System_R_eye_eye_target_follow_grp.translateY<0){' + '\nR_eye_blink_eye_target_follow_grp.translateY = -System_R_eye_ball_jnt_grp.rotateX/30*(R_eye_target_ctrl.Eyelid_up_follow*$sumXYZ);}' + '\nelse{R_eye_blink_eye_target_follow_grp.translateY = (-System_R_eye_ball_jnt_grp.rotateX/14*(R_eye_target_ctrl.Eyelid_up_follow*$sumXYZ))*(1-R_eye_target_ctrl.Blink);}}\n',
                ae=1, uc=all, alwaysEvaluate=0, n='EyeLid_Blink_expression')
        if 'Eye 16 joint (D eyelid)' == self.ui.EyeOption.currentText():
            cmds.expression(
                s='\n//Eyelid_FK_Blink_Attribute\n' + '\nL_eye_lacrimal_upper_FK_blink_system_grp.translateY = -((System_L_eye_lacrimal_upper_jnt.translateY+L_eye_lacrimal_upper_FK_ctrl.translateY+L_eye_lacrimal_upper_FK_blink_follow_grp.translateY) - (System_L_eye_lacrimal_lower_jnt.translateY+L_eye_lacrimal_lower_FK_ctrl.translateY+L_eye_lacrimal_lower_FK_lower_follow_grp.translateY))*0.8*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink);\n' + '\nL_eye_lacrimal_lower_FK_blink_system_grp.translateY = ((System_L_eye_lacrimal_upper_jnt.translateY+L_eye_lacrimal_upper_FK_ctrl.translateY+L_eye_lacrimal_upper_FK_blink_follow_grp.translateY) - (System_L_eye_lacrimal_lower_jnt.translateY+L_eye_lacrimal_lower_FK_ctrl.translateY+L_eye_lacrimal_lower_FK_lower_follow_grp.translateY))*0.2*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink);\n' + '\nR_eye_lacrimal_upper_FK_blink_system_grp.translateY = -((System_R_eye_lacrimal_upper_jnt.translateY+R_eye_lacrimal_upper_FK_ctrl.translateY+R_eye_lacrimal_upper_FK_blink_follow_grp.translateY) - (System_R_eye_lacrimal_lower_jnt.translateY+R_eye_lacrimal_lower_FK_ctrl.translateY+R_eye_lacrimal_lower_FK_lower_follow_grp.translateY))*0.8*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink);\n' + '\nR_eye_lacrimal_lower_FK_blink_system_grp.translateY = ((System_R_eye_lacrimal_upper_jnt.translateY+R_eye_lacrimal_upper_FK_ctrl.translateY+R_eye_lacrimal_upper_FK_blink_follow_grp.translateY) - (System_R_eye_lacrimal_lower_jnt.translateY+R_eye_lacrimal_lower_FK_ctrl.translateY+R_eye_lacrimal_lower_FK_lower_follow_grp.translateY))*0.2*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink);\n' + '\nL_eye_back_upper_FK_blink_system_grp.translateY = -((System_L_eye_back_upper_jnt.translateY+L_eye_back_upper_FK_ctrl.translateY+L_eye_back_upper_FK_blink_follow_grp.translateY) - (System_L_eye_back_lower_jnt.translateY+L_eye_back_lower_FK_ctrl.translateY+L_eye_back_lower_FK_lower_follow_grp.translateY))*0.8*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink);\n' + '\nL_eye_back_lower_FK_blink_system_grp.translateY = ((System_L_eye_back_upper_jnt.translateY+L_eye_back_upper_FK_ctrl.translateY+L_eye_back_upper_FK_blink_follow_grp.translateY) - (System_L_eye_back_lower_jnt.translateY+L_eye_back_lower_FK_ctrl.translateY+L_eye_back_lower_FK_lower_follow_grp.translateY))*0.2*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink)*(L_eye_target_ctrl.Blink);\n' + '\nR_eye_back_upper_FK_blink_system_grp.translateY = -((System_R_eye_back_upper_jnt.translateY+R_eye_back_upper_FK_ctrl.translateY+R_eye_back_upper_FK_blink_follow_grp.translateY) - (System_R_eye_back_lower_jnt.translateY+R_eye_back_lower_FK_ctrl.translateY+R_eye_back_lower_FK_lower_follow_grp.translateY))*0.8*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink);\n' + '\nR_eye_back_lower_FK_blink_system_grp.translateY = ((System_R_eye_back_upper_jnt.translateY+R_eye_back_upper_FK_ctrl.translateY+R_eye_back_upper_FK_blink_follow_grp.translateY) - (System_R_eye_back_lower_jnt.translateY+R_eye_back_lower_FK_ctrl.translateY+R_eye_back_lower_FK_lower_follow_grp.translateY))*0.2*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink)*(R_eye_target_ctrl.Blink);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Eyelid_FK_Blink_expression')
        cmds.expression(
            s='\n//EyeTarget Eyelid World Follow\n' + '\nSystem_L_eye_eye_target_follow_grp_pointConstraint1.L_eye_target_ctrlW0 = 1-(Eye_target_Master_ctrl.Target_World);\n' + '\nSystem_R_eye_eye_target_follow_grp_pointConstraint1.R_eye_target_ctrlW0 = 1-(Eye_target_Master_ctrl.Target_World);\n' + '\nSystem_L_eye_eye_target_follow_grp_pointConstraint1.L_Eye_World_point_ctrlW1 = (Eye_target_Master_ctrl.Target_World);\n' + '\nSystem_R_eye_eye_target_follow_grp_pointConstraint1.R_Eye_World_point_ctrlW1 = (Eye_target_Master_ctrl.Target_World);\n',
            ae=1, uc=all, alwaysEvaluate=0, n='EyeTarget_Eyelid_World_expression')

    # 口腔内システム
    def oral_cavity_system(self):
        cmds.circle(nr=(0, 1, 0), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 3, n='Lower_teeth_ctrl')
        cmds.group('Lower_teeth_ctrl', n='Lower_teeth_Ctrl_grp')
        cmds.pointConstraint('System_Lower_teeth_jnt', 'Lower_teeth_Ctrl_grp')
        cmds.delete('Lower_teeth_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('Lower_teeth_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.move(0 * self.ctrl_scale, 0 * self.ctrl_scale, 0.1 * self.ctrl_scale, 'Lower_teeth_ctrl.cv[0:7]', r=True)
        cmds.select(clear=True)
        cmds.select('Lower_teeth_ctrl')
        cmds.setAttr('Lower_teeth_ctrlShape.overrideEnabled', 1)
        cmds.setAttr('Lower_teeth_ctrlShape.overrideColor', 13)
        cmds.group('System_Lower_teeth_jnt', n='System_Lower_teeth_jnt_grp')
        cmds.parentConstraint('Lower_teeth_ctrl', 'System_Lower_teeth_jnt_grp', mo=True)
        cmds.scaleConstraint('Lower_teeth_ctrl', 'System_Lower_teeth_jnt_grp', mo=True)
        cmds.duplicate('Lower_teeth_Ctrl_grp', n='Upper_teeth_Ctrl_grp')
        cmds.select('Upper_teeth_Ctrl_grp', hi=True)
        mel.eval('searchReplaceNames "Lower_" "Upper_" "hierarchy"')
        cmds.pointConstraint('System_Upper_teeth_jnt', 'Upper_teeth_Ctrl_grp')
        cmds.delete('Upper_teeth_Ctrl_grp_pointConstraint1')
        cmds.makeIdentity('Upper_teeth_Ctrl_grp', apply=True, t=True, r=True, scale=True)
        cmds.group('System_Upper_teeth_jnt', n='System_Upper_teeth_jnt_grp')
        cmds.parentConstraint('Upper_teeth_ctrl', 'System_Upper_teeth_jnt_grp', mo=True)
        cmds.scaleConstraint('Upper_teeth_ctrl', 'System_Upper_teeth_jnt_grp', mo=True)
        cmds.parent('Lower_teeth_ctrl', w=True)
        cmds.group(em=True, n='Lower_teeth_jaw_follow_grp')
        cmds.pointConstraint('System_Jaw_master_jnt', 'Lower_teeth_jaw_follow_grp')
        cmds.delete('Lower_teeth_jaw_follow_grp_pointConstraint1')
        cmds.parent('Lower_teeth_jaw_follow_grp', 'Lower_teeth_Ctrl_grp')
        cmds.parent('Lower_teeth_ctrl', 'Lower_teeth_jaw_follow_grp')
        cmds.makeIdentity('Lower_teeth_jaw_follow_grp', apply=True, t=True, r=True, scale=True)
        if 'Teeth joint' != self.ui.OralOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 3, n='Tongue_ctrl')
            cmds.group('Tongue_ctrl', n='Tongue_Ctrl_grp')
            cmds.pointConstraint('System_Tongue_jnt', 'Tongue_Ctrl_grp')
            cmds.delete('Tongue_Ctrl_grp_pointConstraint1')
            cmds.makeIdentity('Tongue_Ctrl_grp', apply=True, t=True, r=True, scale=True)
            cmds.move(0 * self.ctrl_scale, -2 * self.ctrl_scale, 0 * self.ctrl_scale, 'Tongue_ctrl.cv[1]', r=True)
            cmds.move(0 * self.ctrl_scale, 2 * self.ctrl_scale, 0 * self.ctrl_scale, 'Tongue_ctrl.cv[5]', r=True)
            cmds.select(clear=True)
            cmds.select('Tongue_ctrl')
            cmds.setAttr('Tongue_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('Tongue_ctrlShape.overrideColor', 13)
            cmds.group('System_Tongue_jnt', n='System_Tongue_jnt_grp')
            cmds.parentConstraint('Tongue_ctrl', 'System_Tongue_jnt_grp', mo=True)
            cmds.scaleConstraint('Tongue_ctrl', 'System_Tongue_jnt_grp', mo=True)
            cmds.parent('Tongue_ctrl', w=True)
            cmds.group(em=True, n='Tongue_jaw_follow_grp')
            cmds.pointConstraint('System_Jaw_master_jnt', 'Tongue_jaw_follow_grp')
            cmds.delete('Tongue_jaw_follow_grp_pointConstraint1')
            cmds.parent('Tongue_jaw_follow_grp', 'Tongue_Ctrl_grp')
            cmds.parent('Tongue_ctrl', 'Tongue_jaw_follow_grp')
        if 'Teeth & Tongue(3) joint' == self.ui.OralOption.currentText():
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 2.4, n='Tongue_02_ctrl')
            cmds.pointConstraint('System_Tongue_02_jnt', 'Tongue_02_ctrl')
            cmds.delete('Tongue_02_ctrl_pointConstraint1')
            cmds.setAttr('Tongue_02_ctrl.scaleY', 0.56)
            cmds.makeIdentity('Tongue_02_ctrl', t=True, r=True, s=True, apply=True)
            cmds.select(clear=True)
            cmds.select('Tongue_02_ctrl')
            cmds.circle(nr=(0, 0, 1), c=(0, 0, 0), sw=360, r=self.ctrl_scale * 2, n='Tongue_03_ctrl')
            cmds.pointConstraint('System_Tongue_03_jnt', 'Tongue_03_ctrl')
            cmds.delete('Tongue_03_ctrl_pointConstraint1')
            cmds.setAttr('Tongue_03_ctrl.scaleY', 0.56)
            cmds.makeIdentity('Tongue_03_ctrl', t=True, r=True, s=True, apply=True)
            cmds.select(clear=True)
            cmds.select('Tongue_03_ctrl')
            cmds.setAttr('Tongue_02_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('Tongue_02_ctrlShape.overrideColor', 13)
            cmds.setAttr('Tongue_03_ctrlShape.overrideEnabled', 1)
            cmds.setAttr('Tongue_03_ctrlShape.overrideColor', 13)
            cmds.group('System_Tongue_02_jnt', n='System_Tongue_02_jnt_grp')
            cmds.group('System_Tongue_03_jnt', n='System_Tongue_03_jnt_grp')
            cmds.parentConstraint('Tongue_02_ctrl', 'System_Tongue_02_jnt_grp', mo=True)
            cmds.scaleConstraint('Tongue_02_ctrl', 'System_Tongue_02_jnt_grp', mo=True)
            cmds.parentConstraint('Tongue_03_ctrl', 'System_Tongue_03_jnt_grp', mo=True)
            cmds.scaleConstraint('Tongue_03_ctrl', 'System_Tongue_03_jnt_grp', mo=True)
            cmds.group('Tongue_02_ctrl', n='Tongue_02_ctrl_grp')
            cmds.group('Tongue_03_ctrl', n='Tongue_03_ctrl_grp')
        if 'Teeth joint' != self.ui.OralOption.currentText():
            cmds.makeIdentity('Tongue_jaw_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parentConstraint('System_Head_master_jnt', 'Lower_teeth_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'Upper_teeth_Ctrl_grp', mo=True)
            cmds.parentConstraint('System_Head_master_jnt', 'Tongue_Ctrl_grp', mo=True)
        if 'Teeth & Tongue(3) joint' == self.ui.OralOption.currentText():
            cmds.makeIdentity('Tongue_jaw_follow_grp', apply=True, t=True, r=True, scale=True)
            cmds.parent('Tongue_02_ctrl_grp', 'Tongue_jaw_follow_grp')
            cmds.parent('Tongue_03_ctrl_grp', 'Tongue_jaw_follow_grp')
            cmds.parentConstraint('Tongue_ctrl', 'Tongue_02_ctrl_grp', mo=True)
            cmds.parentConstraint('Tongue_02_ctrl', 'Tongue_03_ctrl_grp', mo=True)
        cmds.addAttr('Jaw_Master_Ctrl', ln='Lower_Teeth_follow', at='double', min=0, max=1)
        cmds.setAttr('Jaw_Master_Ctrl.Lower_Teeth_follow', e=1, keyable=True)
        cmds.setAttr('Jaw_Master_Ctrl.Lower_Teeth_follow', 1)
        if 'Teeth joint' != self.ui.OralOption.currentText():
            cmds.addAttr('Jaw_Master_Ctrl', ln='Tongue_follow', at='double', min=0, max=1)
            cmds.setAttr('Jaw_Master_Ctrl.Tongue_follow', e=1, keyable=True)
            cmds.setAttr('Jaw_Master_Ctrl.Tongue_follow', 1)
        if 'Teeth joint' != self.ui.OralOption.currentText():
            cmds.expression(
                s='\n//Lower Teeth Jaw follow\n' + '\nLower_teeth_jaw_follow_grp.translateX = System_Jaw_master_jnt_grp.translateX*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.translateY = System_Jaw_master_jnt_grp.translateY*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.translateZ = System_Jaw_master_jnt_grp.translateZ*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.rotateX = System_Jaw_master_jnt_grp.rotateX*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.rotateY = System_Jaw_master_jnt_grp.rotateY*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.rotateZ = System_Jaw_master_jnt_grp.rotateZ*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\n//Tongue Jaw follow\n' + '\nTongue_jaw_follow_grp.translateX = System_Jaw_master_jnt_grp.translateX*(Jaw_Master_Ctrl.Tongue_follow);\n' + '\nTongue_jaw_follow_grp.translateY = System_Jaw_master_jnt_grp.translateY*(Jaw_Master_Ctrl.Tongue_follow);\n' + '\nTongue_jaw_follow_grp.translateZ = System_Jaw_master_jnt_grp.translateZ*(Jaw_Master_Ctrl.Tongue_follow);\n' + '\nTongue_jaw_follow_grp.rotateX = System_Jaw_master_jnt_grp.rotateX*(Jaw_Master_Ctrl.Tongue_follow);\n' + '\nTongue_jaw_follow_grp.rotateY = System_Jaw_master_jnt_grp.rotateY*(Jaw_Master_Ctrl.Tongue_follow);\n' + '\nTongue_jaw_follow_grp.rotateZ = System_Jaw_master_jnt_grp.rotateZ*(Jaw_Master_Ctrl.Tongue_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Oral_Cavity_expression')
        else:
            cmds.expression(
                s='\n//Lower Teeth Jaw follow\n' + '\nLower_teeth_jaw_follow_grp.translateX = System_Jaw_master_jnt_grp.translateX*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.translateY = System_Jaw_master_jnt_grp.translateY*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.translateZ = System_Jaw_master_jnt_grp.translateZ*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.rotateX = System_Jaw_master_jnt_grp.rotateX*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.rotateY = System_Jaw_master_jnt_grp.rotateY*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n' + '\nLower_teeth_jaw_follow_grp.rotateZ = System_Jaw_master_jnt_grp.rotateZ*(Jaw_Master_Ctrl.Lower_Teeth_follow);\n',
                ae=1, uc=all, alwaysEvaluate=0, n='Oral_Cavity_expression')
        cmds.group(em=True, n='Oral_Cavity_All_Ctrl_grp')
        if 'Teeth joint' != self.ui.OralOption.currentText():
            cmds.parent('*_teeth_Ctrl_grp', 'Tongue_Ctrl_grp', 'Oral_Cavity_All_Ctrl_grp')
        else:
            cmds.parent('*_teeth_Ctrl_grp', 'Oral_Cavity_All_Ctrl_grp')

    def create_rig_skin(self):
        cmds.select('Skin*_jnt')
        all_skin_jnt = cmds.ls(sl=True)
        for each in all_skin_jnt:
            sys_jnt = each.replace('Skin', 'System')
            if cmds.objExists(sys_jnt):
                self.connect_inverse_parent(sys_jnt, each)

    def connect_inverse_parent(self, src_obj, trg_obj):
        multMat = cmds.shadingNode('multMatrix', asUtility=True, n=src_obj + '_multMatrix')
        cmds.connectAttr(src_obj + '.worldMatrix[0]', multMat + '.matrixIn[0]', force=True)
        cmds.connectAttr(trg_obj + '.parentInverseMatrix', multMat + '.matrixIn[1]', force=True)
        decomposeMat = cmds.shadingNode('decomposeMatrix', asUtility=True, n=src_obj + '_decomposeMatrix')
        cmds.connectAttr(multMat + '.matrixSum', decomposeMat + '.inputMatrix', force=True)
        cmds.connectAttr(decomposeMat + '.outputTranslate', trg_obj + '.translate')
        cmds.connectAttr(decomposeMat + '.outputRotate', trg_obj + '.rotate')
        cmds.connectAttr(decomposeMat + '.outputScale', trg_obj + '.scale')
        cmds.setAttr(trg_obj + '.jointOrientX', 0)
        cmds.setAttr(trg_obj + '.jointOrientY', 0)
        cmds.setAttr(trg_obj + '.jointOrientZ', 0)


if __name__ == '__main__':
    Facial_Window_Manager.main()
